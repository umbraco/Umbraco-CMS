<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Desc_MaxItemsAllowed" xml:space="preserve">
    <value>The maximum number of items that are allowed to be selected by a content editor. If an unlimited number of node selections should be allowed, then enter -1 as the value</value>
  </data>
  <data name="Desc_MinItemsAllowed" xml:space="preserve">
    <value>The minimum number of items that are allowed to be selected by a content editor.</value>
  </data>
  <data name="Desc_NodeSelectionType" xml:space="preserve">
    <value>Nodes can be selected from a parent node (Node Picker) or by an XPath expression. NOTE: When using an XPath expression, only published nodes can be shown.</value>
  </data>
  <data name="Desc_ShowThumbnails" xml:space="preserve">
    <value>If enabled and 'media' is selected as the tree type then a thumbnail will be rendered for each item selected.</value>
  </data>
  <data name="Desc_ShowTooltips" xml:space="preserve">
    <value>If enabled will show an information icon next to each node selected. When the icon is clicked, a tooltip is shown displaying the nodes extended properties.</value>
  </data>
  <data name="Desc_StartNodeId" xml:space="preserve">
    <value>Define the starting node that should be rendered for the picker. This will ensure that the correct security measures are in place by checking the defined start node ID for the user accessing the picker. In some cases, if the user is not able to view the node, then the picker will render an error message.</value>
  </data>
  <data name="Desc_StoreAsComma" xml:space="preserve">
    <value>You can specify to store the data in Umbraco as comma separated or as XML. By default it is stored as XML which makes it easier to use the saved value in XSLT, however, storing it as comma separated makes it easier to work with the data using the API such as Node factory.</value>
  </data>
  <data name="Desc_XPathExpression" xml:space="preserve">
    <value>This XPath expression is used to select a starting node and depends on the XPath expression type chosen (global or from current). &lt;u&gt;IMPORTANT&lt;/u&gt;: This XPath expression should be written to match &lt;b&gt;ONE&lt;/b&gt; node, if the expression matches more than one node, then the first node matched will be used as the start node.</value>
  </data>
  <data name="Desc_XPathExpressionType" xml:space="preserve">
    <value>The XPath expression that is evaluated to match a start node can be evaluated at a global tree level, or matched from the current node being edited.</value>
  </data>
  <data name="Desc_XPathFilter" xml:space="preserve">
    <value>An xpath filter to match nodes that will be either enabled or disabled from being clicked (depending on what is selected for the XPath filter type). This XPath filter is for one node only so it should be formatted to select only one node. The XML to XPath against is the same as the Umbraco XML for one node.&lt;br/&gt;&lt;br/&gt;Example: &lt;code&gt;/*[self::myNodeType or self::yourNodeType]&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;The above would make all nodes of types: myNodeType or yourNodeType not selectable in the tree</value>
  </data>
  <data name="Desc_XPathFilterType" xml:space="preserve">
    <value>Should the XPath filter match nodes to enable nodes or disable nodes. If Enable is selected, this means that only nodes that match the XPath filter will be allowed to be selected in the tree picker and vise versa for Disabled</value>
  </data>
  <data name="Item_NodeSelectionType_Picker" xml:space="preserve">
    <value>Node Picker</value>
  </data>
  <data name="Item_NodeSelectionType_XPath" xml:space="preserve">
    <value>XPath Expression</value>
  </data>
  <data name="Item_XPathExpressionType_CurrentNode" xml:space="preserve">
    <value>From Current</value>
  </data>
  <data name="Item_XPathExpressionType_Global" xml:space="preserve">
    <value>Global</value>
  </data>
  <data name="Item_XPathMatchType_Disable" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="Item_XPathMatchType_Enable" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="Lbl_ControlHeight" xml:space="preserve">
    <value>Pixel height of the tree control box</value>
  </data>
  <data name="Lbl_MaxItemsAllowed" xml:space="preserve">
    <value>Maximum node selections</value>
  </data>
  <data name="Lbl_MinItemsAllowed" xml:space="preserve">
    <value>Minimum node selections</value>
  </data>
  <data name="Lbl_NodeSelectionType" xml:space="preserve">
    <value>Node selection type</value>
  </data>
  <data name="Lbl_SelectTreeType" xml:space="preserve">
    <value>Select tree type</value>
  </data>
  <data name="Lbl_ShowItemInfoTooltipCheckBox" xml:space="preserve">
    <value>Show tooltip for selected item</value>
  </data>
  <data name="Lbl_ShowThumbnails" xml:space="preserve">
    <value>Show thumbnails for media items?</value>
  </data>
  <data name="Lbl_StartNodeId" xml:space="preserve">
    <value>Start node ID</value>
  </data>
  <data name="Lbl_StoreAsComma" xml:space="preserve">
    <value>Data as CSV or XML? </value>
  </data>
  <data name="Lbl_XPathExpression" xml:space="preserve">
    <value>XPath expression</value>
  </data>
  <data name="Lbl_XPathExpressionType" xml:space="preserve">
    <value>XPath type</value>
  </data>
  <data name="Lbl_XPathFilter" xml:space="preserve">
    <value>XPath filter</value>
  </data>
  <data name="Lbl_XPathFilterType" xml:space="preserve">
    <value>XPath filter type</value>
  </data>
  <data name="Val_ControlHeightMsg" xml:space="preserve">
    <value>Please enter a pixel value between 1 - 999</value>
  </data>
  <data name="Val_MaxItemsMsg" xml:space="preserve">
    <value>Please enter only numbers</value>
  </data>
  <data name="Val_MinItemsInvalid" xml:space="preserve">
    <value>The highlighted Multi Node Tree Picker property requires a minimum node selection of {0}</value>
  </data>
  <data name="Val_MinItemsMsg" xml:space="preserve">
    <value>Please enter only numbers</value>
  </data>
  <data name="Val_RelativeXpath" xml:space="preserve">
    <value>A relative xpath expression cannot start with "/" or "//"</value>
  </data>
</root>