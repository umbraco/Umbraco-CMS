<?xml version="1.0" encoding="utf-8"?>

<!--
For full details of the client dependency framework, visit
https://github.com/Shandem/ClientDependency
It manages CSS and JS file dependencies per control without having to worry about duplicates.
It also manages the combination, compression and minification of all JS & CSS files.

NOTES:
* Compression/Combination/Minification is not enabled unless debug="false" is specified on the 'compiliation' element in the web.config
* A new version will invalidate both client and server cache and create new persisted files
-->
<clientDependency version="1" fileDependencyExtensions=".js,.css" loggerType="Umbraco.Web.CdfLogger, Umbraco.Web">

  <!--
    This section is used for Web Forms only, the enableCompositeFiles="true" is optional and by default is set to true.
    The LoaderControlProvider is set to default, the javascriptPlaceHolderId, cssPlaceHolderId attributes are optional and default to what is listed below. If using
    this provider, then you must specify both PlaceHolder controls on your page in order to render the JS/CSS.
  -->
  <fileRegistration defaultProvider="PlaceHolderProvider">
    <providers>
      <add name="PageHeaderProvider" type="ClientDependency.Core.FileRegistration.Providers.PageHeaderProvider, ClientDependency.Core" />
      <add name="LazyLoadProvider" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadProvider, ClientDependency.Core" />
      <add name="LoaderControlProvider" type="ClientDependency.Core.FileRegistration.Providers.LoaderControlProvider, ClientDependency.Core" />
      <add name="PlaceHolderProvider" type="ClientDependency.Core.FileRegistration.Providers.PlaceHolderProvider, ClientDependency.Core" javascriptPlaceHolderId="JavaScriptPlaceHolder" cssPlaceHolderId="CssPlaceHolder" />
    </providers>
  </fileRegistration>

  <!-- This section is used for MVC only -->
  <mvc defaultRenderer="StandardRenderer">
    <renderers>
      <add name="StandardRenderer" type="ClientDependency.Core.FileRegistration.Providers.StandardRenderer, ClientDependency.Core" />
      <add name="LazyLoadRenderer" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadRenderer, ClientDependency.Core" />
    </renderers>
  </mvc>

  <!--
  The composite file section configures the compression/combination/minification of files.
  You can enable/disable minification of either JS/CSS files and you can enable/disable the
  persistence of composite files. By default, minification and persistence is enabled. Persisting files
  means that the system is going to save the output of the compressed/combined/minified files
  to disk so that on any subsequent request (when output cache expires) that these files don't have
  to be recreated again and will be based on the persisted file on disk. This saves on processing time.
  -->
  <compositeFiles defaultProvider="defaultFileProcessingProvider" compositeFileHandlerPath="~/DependencyHandler.axd">
    <fileProcessingProviders>
      <add name="CompositeFileProcessor"
           type="ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProvider, ClientDependency.Core"
           enableCssMinify="true"
           enableJsMinify="true"
           persistFiles="true"
           compositeFilePath="~/App_Data/TEMP/ClientDependency"
           bundleDomains="localhost:123456"
           urlType="Base64QueryStrings"
           pathUrlFormat="{dependencyId}/{version}/{type}"/>
    </fileProcessingProviders>

    <!-- A file map provider stores references to dependency files by an id to be used in the handler URL when using the MappedId Url type -->
    <fileMapProviders>
      <add name="XmlFileMap"
           type="ClientDependency.Core.CompositeFiles.Providers.XmlFileMapper, ClientDependency.Core"
           mapPath="~/App_Data/TEMP/ClientDependency" />
    </fileMapProviders>

  </compositeFiles>
</clientDependency>
