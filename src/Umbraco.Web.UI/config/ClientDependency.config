<?xml version="1.0" encoding="utf-8"?>

<!-- 
For full details of the client dependency framework, visit
the CodePlex site @ http://clientdependency.codeplex.com
It manages CSS and JS file dependencies per control without having to worry about duplicates.
It also manages the combination, compression and minification of all JS & CSS files.

NOTES:
* Compression/Combination/Minification is not enabled unless debug="false" is specified on the 'compiliation' element in the web.config
* A new version will invalidate both client and server cache and create new persisted files
-->
<clientDependency version="6" fileDependencyExtensions=".js,.css">

	<fileRegistration defaultProvider="LoaderControlProvider">
		<providers>
			<add name="PageHeaderProvider" type="ClientDependency.Core.FileRegistration.Providers.PageHeaderProvider, ClientDependency.Core" />
			<add name="LazyLoadProvider" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadProvider, ClientDependency.Core" />
			<add name="LoaderControlProvider" type="ClientDependency.Core.FileRegistration.Providers.LoaderControlProvider, ClientDependency.Core" />
			<add name="PlaceHolderProvider" type="ClientDependency.Core.FileRegistration.Providers.PlaceHolderProvider, ClientDependency.Core" enableCompositeFiles="true" javascriptPlaceHolderId="JavaScriptPlaceHolder" cssPlaceHolderId="CssPlaceHolder" />
			<!-- Used for loading dependencies in Canvas mode -->
			<add name="CanvasProvider" type="umbraco.presentation.LiveEditing.CanvasClientDependencyProvider, umbraco" />
		</providers>
	</fileRegistration>

	<!-- This section is used for MVC only -->
	<mvc defaultRenderer="StandardRenderer">
		<renderers>
			<add name="StandardRenderer" type="ClientDependency.Core.FileRegistration.Providers.StandardRenderer, ClientDependency.Core" />
			<add name="LazyLoadRenderer" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadRenderer, ClientDependency.Core" />
		</renderers>
	</mvc>

	<!--
    The composite file section configures the compression/combination/minification of files.
    You can enable/disable minification of either JS/CSS files and you can enable/disable the 
    persistence of composite files. By default, minification and persistence is enabled. Persisting files
    means that the system is going to save the output of the compressed/combined/minified files
    to disk so that on any subsequent request (when output cache expires) that these files don't have
    to be recreated again and will be based on the persisted file on disk. This saves on processing time.
    -->
	<compositeFiles defaultProvider="defaultFileProcessingProvider" compositeFileHandlerPath="~/DependencyHandler.axd">
		<fileProcessingProviders>
			<add name="CompositeFileProcessor" type="ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProvider, ClientDependency.Core" enableCssMinify="true" enableJsMinify="true" persistFiles="true" compositeFilePath="~/App_Data/TEMP/ClientDependency" urlType="Base64QueryStrings" />
		</fileProcessingProviders>

		<!-- A file map provider stores references to dependency files by an id to be used in the handler URL when using the MappedId Url type -->
		<fileMapProviders>
			<add name="XmlFileMap" type="ClientDependency.Core.CompositeFiles.Providers.XmlFileMapper, ClientDependency.Core" mapPath="~/App_Data/TEMP/ClientDependency" />
		</fileMapProviders>

		<!-- 
      Defines the mime types to compress when requested by the client.
      Path is a regex selector, or a * can be used as in place of 'any'.
      Generally mime types are only set by client browsers in the request for things
      such as JSON or XML ajax requests.
      -->
		<mimeTypeCompression>
			<!-- Compress all json requests for the tree -->
			<add type="application/json" path="^.*?/webservices/Tree.*" />
		</mimeTypeCompression>

	</compositeFiles>

</clientDependency>
