// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetCultureData, GetCultureResponses, GetCultureErrors, PostDataTypeData, PostDataTypeResponses, PostDataTypeErrors, DeleteDataTypeByIdData, DeleteDataTypeByIdResponses, DeleteDataTypeByIdErrors, GetDataTypeByIdData, GetDataTypeByIdResponses, GetDataTypeByIdErrors, PutDataTypeByIdData, PutDataTypeByIdResponses, PutDataTypeByIdErrors, PostDataTypeByIdCopyData, PostDataTypeByIdCopyResponses, PostDataTypeByIdCopyErrors, GetDataTypeByIdIsUsedData, GetDataTypeByIdIsUsedResponses, GetDataTypeByIdIsUsedErrors, PutDataTypeByIdMoveData, PutDataTypeByIdMoveResponses, PutDataTypeByIdMoveErrors, GetDataTypeByIdReferencedByData, GetDataTypeByIdReferencedByResponses, GetDataTypeByIdReferencedByErrors, GetDataTypeByIdReferencesData, GetDataTypeByIdReferencesResponses, GetDataTypeByIdReferencesErrors, GetDataTypeConfigurationData, GetDataTypeConfigurationResponses, GetDataTypeConfigurationErrors, PostDataTypeFolderData, PostDataTypeFolderResponses, PostDataTypeFolderErrors, DeleteDataTypeFolderByIdData, DeleteDataTypeFolderByIdResponses, DeleteDataTypeFolderByIdErrors, GetDataTypeFolderByIdData, GetDataTypeFolderByIdResponses, GetDataTypeFolderByIdErrors, PutDataTypeFolderByIdData, PutDataTypeFolderByIdResponses, PutDataTypeFolderByIdErrors, GetFilterDataTypeData, GetFilterDataTypeResponses, GetFilterDataTypeErrors, GetItemDataTypeData, GetItemDataTypeResponses, GetItemDataTypeErrors, GetItemDataTypeSearchData, GetItemDataTypeSearchResponses, GetItemDataTypeSearchErrors, GetTreeDataTypeAncestorsData, GetTreeDataTypeAncestorsResponses, GetTreeDataTypeAncestorsErrors, GetTreeDataTypeChildrenData, GetTreeDataTypeChildrenResponses, GetTreeDataTypeChildrenErrors, GetTreeDataTypeRootData, GetTreeDataTypeRootResponses, GetTreeDataTypeRootErrors, GetDictionaryData, GetDictionaryResponses, GetDictionaryErrors, PostDictionaryData, PostDictionaryResponses, PostDictionaryErrors, DeleteDictionaryByIdData, DeleteDictionaryByIdResponses, DeleteDictionaryByIdErrors, GetDictionaryByIdData, GetDictionaryByIdResponses, GetDictionaryByIdErrors, PutDictionaryByIdData, PutDictionaryByIdResponses, PutDictionaryByIdErrors, GetDictionaryByIdExportData, GetDictionaryByIdExportResponses, GetDictionaryByIdExportErrors, PutDictionaryByIdMoveData, PutDictionaryByIdMoveResponses, PutDictionaryByIdMoveErrors, PostDictionaryImportData, PostDictionaryImportResponses, PostDictionaryImportErrors, GetItemDictionaryData, GetItemDictionaryResponses, GetItemDictionaryErrors, GetTreeDictionaryAncestorsData, GetTreeDictionaryAncestorsResponses, GetTreeDictionaryAncestorsErrors, GetTreeDictionaryChildrenData, GetTreeDictionaryChildrenResponses, GetTreeDictionaryChildrenErrors, GetTreeDictionaryRootData, GetTreeDictionaryRootResponses, GetTreeDictionaryRootErrors, PostDocumentBlueprintData, PostDocumentBlueprintResponses, PostDocumentBlueprintErrors, DeleteDocumentBlueprintByIdData, DeleteDocumentBlueprintByIdResponses, DeleteDocumentBlueprintByIdErrors, GetDocumentBlueprintByIdData, GetDocumentBlueprintByIdResponses, GetDocumentBlueprintByIdErrors, PutDocumentBlueprintByIdData, PutDocumentBlueprintByIdResponses, PutDocumentBlueprintByIdErrors, PutDocumentBlueprintByIdMoveData, PutDocumentBlueprintByIdMoveResponses, PutDocumentBlueprintByIdMoveErrors, GetDocumentBlueprintByIdScaffoldData, GetDocumentBlueprintByIdScaffoldResponses, GetDocumentBlueprintByIdScaffoldErrors, PostDocumentBlueprintFolderData, PostDocumentBlueprintFolderResponses, PostDocumentBlueprintFolderErrors, DeleteDocumentBlueprintFolderByIdData, DeleteDocumentBlueprintFolderByIdResponses, DeleteDocumentBlueprintFolderByIdErrors, GetDocumentBlueprintFolderByIdData, GetDocumentBlueprintFolderByIdResponses, GetDocumentBlueprintFolderByIdErrors, PutDocumentBlueprintFolderByIdData, PutDocumentBlueprintFolderByIdResponses, PutDocumentBlueprintFolderByIdErrors, PostDocumentBlueprintFromDocumentData, PostDocumentBlueprintFromDocumentResponses, PostDocumentBlueprintFromDocumentErrors, GetItemDocumentBlueprintData, GetItemDocumentBlueprintResponses, GetItemDocumentBlueprintErrors, GetTreeDocumentBlueprintAncestorsData, GetTreeDocumentBlueprintAncestorsResponses, GetTreeDocumentBlueprintAncestorsErrors, GetTreeDocumentBlueprintChildrenData, GetTreeDocumentBlueprintChildrenResponses, GetTreeDocumentBlueprintChildrenErrors, GetTreeDocumentBlueprintRootData, GetTreeDocumentBlueprintRootResponses, GetTreeDocumentBlueprintRootErrors, PostDocumentTypeData, PostDocumentTypeResponses, PostDocumentTypeErrors, DeleteDocumentTypeByIdData, DeleteDocumentTypeByIdResponses, DeleteDocumentTypeByIdErrors, GetDocumentTypeByIdData, GetDocumentTypeByIdResponses, GetDocumentTypeByIdErrors, PutDocumentTypeByIdData, PutDocumentTypeByIdResponses, PutDocumentTypeByIdErrors, GetDocumentTypeByIdAllowedChildrenData, GetDocumentTypeByIdAllowedChildrenResponses, GetDocumentTypeByIdAllowedChildrenErrors, GetDocumentTypeByIdBlueprintData, GetDocumentTypeByIdBlueprintResponses, GetDocumentTypeByIdBlueprintErrors, GetDocumentTypeByIdCompositionReferencesData, GetDocumentTypeByIdCompositionReferencesResponses, GetDocumentTypeByIdCompositionReferencesErrors, PostDocumentTypeByIdCopyData, PostDocumentTypeByIdCopyResponses, PostDocumentTypeByIdCopyErrors, GetDocumentTypeByIdExportData, GetDocumentTypeByIdExportResponses, GetDocumentTypeByIdExportErrors, PutDocumentTypeByIdImportData, PutDocumentTypeByIdImportResponses, PutDocumentTypeByIdImportErrors, PutDocumentTypeByIdMoveData, PutDocumentTypeByIdMoveResponses, PutDocumentTypeByIdMoveErrors, GetDocumentTypeAllowedAtRootData, GetDocumentTypeAllowedAtRootResponses, GetDocumentTypeAllowedAtRootErrors, PostDocumentTypeAvailableCompositionsData, PostDocumentTypeAvailableCompositionsResponses, PostDocumentTypeAvailableCompositionsErrors, GetDocumentTypeConfigurationData, GetDocumentTypeConfigurationResponses, GetDocumentTypeConfigurationErrors, PostDocumentTypeFolderData, PostDocumentTypeFolderResponses, PostDocumentTypeFolderErrors, DeleteDocumentTypeFolderByIdData, DeleteDocumentTypeFolderByIdResponses, DeleteDocumentTypeFolderByIdErrors, GetDocumentTypeFolderByIdData, GetDocumentTypeFolderByIdResponses, GetDocumentTypeFolderByIdErrors, PutDocumentTypeFolderByIdData, PutDocumentTypeFolderByIdResponses, PutDocumentTypeFolderByIdErrors, PostDocumentTypeImportData, PostDocumentTypeImportResponses, PostDocumentTypeImportErrors, GetItemDocumentTypeData, GetItemDocumentTypeResponses, GetItemDocumentTypeErrors, GetItemDocumentTypeSearchData, GetItemDocumentTypeSearchResponses, GetItemDocumentTypeSearchErrors, GetTreeDocumentTypeAncestorsData, GetTreeDocumentTypeAncestorsResponses, GetTreeDocumentTypeAncestorsErrors, GetTreeDocumentTypeChildrenData, GetTreeDocumentTypeChildrenResponses, GetTreeDocumentTypeChildrenErrors, GetTreeDocumentTypeRootData, GetTreeDocumentTypeRootResponses, GetTreeDocumentTypeRootErrors, GetDocumentVersionData, GetDocumentVersionResponses, GetDocumentVersionErrors, GetDocumentVersionByIdData, GetDocumentVersionByIdResponses, GetDocumentVersionByIdErrors, PutDocumentVersionByIdPreventCleanupData, PutDocumentVersionByIdPreventCleanupResponses, PutDocumentVersionByIdPreventCleanupErrors, PostDocumentVersionByIdRollbackData, PostDocumentVersionByIdRollbackResponses, PostDocumentVersionByIdRollbackErrors, GetCollectionDocumentByIdData, GetCollectionDocumentByIdResponses, GetCollectionDocumentByIdErrors, PostDocumentData, PostDocumentResponses, PostDocumentErrors, DeleteDocumentByIdData, DeleteDocumentByIdResponses, DeleteDocumentByIdErrors, GetDocumentByIdData, GetDocumentByIdResponses, GetDocumentByIdErrors, PutDocumentByIdData, PutDocumentByIdResponses, PutDocumentByIdErrors, GetDocumentByIdAuditLogData, GetDocumentByIdAuditLogResponses, GetDocumentByIdAuditLogErrors, PostDocumentByIdCopyData, PostDocumentByIdCopyResponses, PostDocumentByIdCopyErrors, GetDocumentByIdDomainsData, GetDocumentByIdDomainsResponses, GetDocumentByIdDomainsErrors, PutDocumentByIdDomainsData, PutDocumentByIdDomainsResponses, PutDocumentByIdDomainsErrors, PutDocumentByIdMoveData, PutDocumentByIdMoveResponses, PutDocumentByIdMoveErrors, PutDocumentByIdMoveToRecycleBinData, PutDocumentByIdMoveToRecycleBinResponses, PutDocumentByIdMoveToRecycleBinErrors, GetDocumentByIdNotificationsData, GetDocumentByIdNotificationsResponses, GetDocumentByIdNotificationsErrors, PutDocumentByIdNotificationsData, PutDocumentByIdNotificationsResponses, PutDocumentByIdNotificationsErrors, DeleteDocumentByIdPublicAccessData, DeleteDocumentByIdPublicAccessResponses, DeleteDocumentByIdPublicAccessErrors, GetDocumentByIdPublicAccessData, GetDocumentByIdPublicAccessResponses, GetDocumentByIdPublicAccessErrors, PostDocumentByIdPublicAccessData, PostDocumentByIdPublicAccessResponses, PostDocumentByIdPublicAccessErrors, PutDocumentByIdPublicAccessData, PutDocumentByIdPublicAccessResponses, PutDocumentByIdPublicAccessErrors, PutDocumentByIdPublishData, PutDocumentByIdPublishResponses, PutDocumentByIdPublishErrors, PutDocumentByIdPublishWithDescendantsData, PutDocumentByIdPublishWithDescendantsResponses, PutDocumentByIdPublishWithDescendantsErrors, GetDocumentByIdPublishWithDescendantsResultByTaskIdData, GetDocumentByIdPublishWithDescendantsResultByTaskIdResponses, GetDocumentByIdPublishWithDescendantsResultByTaskIdErrors, GetDocumentByIdPublishedData, GetDocumentByIdPublishedResponses, GetDocumentByIdPublishedErrors, GetDocumentByIdReferencedByData, GetDocumentByIdReferencedByResponses, GetDocumentByIdReferencedByErrors, GetDocumentByIdReferencedDescendantsData, GetDocumentByIdReferencedDescendantsResponses, GetDocumentByIdReferencedDescendantsErrors, PutDocumentByIdUnpublishData, PutDocumentByIdUnpublishResponses, PutDocumentByIdUnpublishErrors, PutUmbracoManagementApiV11DocumentByIdValidate11Data, PutUmbracoManagementApiV11DocumentByIdValidate11Responses, PutUmbracoManagementApiV11DocumentByIdValidate11Errors, GetDocumentAreReferencedData, GetDocumentAreReferencedResponses, GetDocumentAreReferencedErrors, GetDocumentConfigurationData, GetDocumentConfigurationResponses, GetDocumentConfigurationErrors, PutDocumentSortData, PutDocumentSortResponses, PutDocumentSortErrors, GetDocumentUrlsData, GetDocumentUrlsResponses, GetDocumentUrlsErrors, PostDocumentValidateData, PostDocumentValidateResponses, PostDocumentValidateErrors, GetItemDocumentData, GetItemDocumentResponses, GetItemDocumentErrors, GetItemDocumentSearchData, GetItemDocumentSearchResponses, GetItemDocumentSearchErrors, DeleteRecycleBinDocumentData, DeleteRecycleBinDocumentResponses, DeleteRecycleBinDocumentErrors, DeleteRecycleBinDocumentByIdData, DeleteRecycleBinDocumentByIdResponses, DeleteRecycleBinDocumentByIdErrors, GetRecycleBinDocumentByIdOriginalParentData, GetRecycleBinDocumentByIdOriginalParentResponses, GetRecycleBinDocumentByIdOriginalParentErrors, PutRecycleBinDocumentByIdRestoreData, PutRecycleBinDocumentByIdRestoreResponses, PutRecycleBinDocumentByIdRestoreErrors, GetRecycleBinDocumentChildrenData, GetRecycleBinDocumentChildrenResponses, GetRecycleBinDocumentChildrenErrors, GetRecycleBinDocumentReferencedByData, GetRecycleBinDocumentReferencedByResponses, GetRecycleBinDocumentReferencedByErrors, GetRecycleBinDocumentRootData, GetRecycleBinDocumentRootResponses, GetRecycleBinDocumentRootErrors, GetTreeDocumentAncestorsData, GetTreeDocumentAncestorsResponses, GetTreeDocumentAncestorsErrors, GetTreeDocumentChildrenData, GetTreeDocumentChildrenResponses, GetTreeDocumentChildrenErrors, GetTreeDocumentRootData, GetTreeDocumentRootResponses, GetTreeDocumentRootErrors, PostDynamicRootQueryData, PostDynamicRootQueryResponses, PostDynamicRootQueryErrors, GetDynamicRootStepsData, GetDynamicRootStepsResponses, GetDynamicRootStepsErrors, GetHealthCheckGroupData, GetHealthCheckGroupResponses, GetHealthCheckGroupErrors, GetHealthCheckGroupByNameData, GetHealthCheckGroupByNameResponses, GetHealthCheckGroupByNameErrors, PostHealthCheckGroupByNameCheckData, PostHealthCheckGroupByNameCheckResponses, PostHealthCheckGroupByNameCheckErrors, PostHealthCheckExecuteActionData, PostHealthCheckExecuteActionResponses, PostHealthCheckExecuteActionErrors, GetHelpData, GetHelpResponses, GetHelpErrors, GetImagingResizeUrlsData, GetImagingResizeUrlsResponses, GetImagingResizeUrlsErrors, GetImportAnalyzeData, GetImportAnalyzeResponses, GetImportAnalyzeErrors, GetIndexerData, GetIndexerResponses, GetIndexerErrors, GetIndexerByIndexNameData, GetIndexerByIndexNameResponses, GetIndexerByIndexNameErrors, PostIndexerByIndexNameRebuildData, PostIndexerByIndexNameRebuildResponses, PostIndexerByIndexNameRebuildErrors, GetInstallSettingsData, GetInstallSettingsResponses, GetInstallSettingsErrors, PostInstallSetupData, PostInstallSetupResponses, PostInstallSetupErrors, PostInstallValidateDatabaseData, PostInstallValidateDatabaseResponses, PostInstallValidateDatabaseErrors, GetItemLanguageData, GetItemLanguageResponses, GetItemLanguageErrors, GetItemLanguageDefaultData, GetItemLanguageDefaultResponses, GetItemLanguageDefaultErrors, GetLanguageData, GetLanguageResponses, GetLanguageErrors, PostLanguageData, PostLanguageResponses, PostLanguageErrors, DeleteLanguageByIsoCodeData, DeleteLanguageByIsoCodeResponses, DeleteLanguageByIsoCodeErrors, GetLanguageByIsoCodeData, GetLanguageByIsoCodeResponses, GetLanguageByIsoCodeErrors, PutLanguageByIsoCodeData, PutLanguageByIsoCodeResponses, PutLanguageByIsoCodeErrors, GetLogViewerLevelData, GetLogViewerLevelResponses, GetLogViewerLevelErrors, GetLogViewerLevelCountData, GetLogViewerLevelCountResponses, GetLogViewerLevelCountErrors, GetLogViewerLogData, GetLogViewerLogResponses, GetLogViewerLogErrors, GetLogViewerMessageTemplateData, GetLogViewerMessageTemplateResponses, GetLogViewerMessageTemplateErrors, GetLogViewerSavedSearchData, GetLogViewerSavedSearchResponses, GetLogViewerSavedSearchErrors, PostLogViewerSavedSearchData, PostLogViewerSavedSearchResponses, PostLogViewerSavedSearchErrors, DeleteLogViewerSavedSearchByNameData, DeleteLogViewerSavedSearchByNameResponses, DeleteLogViewerSavedSearchByNameErrors, GetLogViewerSavedSearchByNameData, GetLogViewerSavedSearchByNameResponses, GetLogViewerSavedSearchByNameErrors, GetLogViewerValidateLogsSizeData, GetLogViewerValidateLogsSizeResponses, GetLogViewerValidateLogsSizeErrors, GetManifestManifestData, GetManifestManifestResponses, GetManifestManifestErrors, GetManifestManifestPrivateData, GetManifestManifestPrivateResponses, GetManifestManifestPrivateErrors, GetManifestManifestPublicData, GetManifestManifestPublicResponses, GetItemMediaTypeData, GetItemMediaTypeResponses, GetItemMediaTypeErrors, GetItemMediaTypeAllowedData, GetItemMediaTypeAllowedResponses, GetItemMediaTypeAllowedErrors, GetItemMediaTypeFoldersData, GetItemMediaTypeFoldersResponses, GetItemMediaTypeFoldersErrors, GetItemMediaTypeSearchData, GetItemMediaTypeSearchResponses, GetItemMediaTypeSearchErrors, PostMediaTypeData, PostMediaTypeResponses, PostMediaTypeErrors, DeleteMediaTypeByIdData, DeleteMediaTypeByIdResponses, DeleteMediaTypeByIdErrors, GetMediaTypeByIdData, GetMediaTypeByIdResponses, GetMediaTypeByIdErrors, PutMediaTypeByIdData, PutMediaTypeByIdResponses, PutMediaTypeByIdErrors, GetMediaTypeByIdAllowedChildrenData, GetMediaTypeByIdAllowedChildrenResponses, GetMediaTypeByIdAllowedChildrenErrors, GetMediaTypeByIdCompositionReferencesData, GetMediaTypeByIdCompositionReferencesResponses, GetMediaTypeByIdCompositionReferencesErrors, PostMediaTypeByIdCopyData, PostMediaTypeByIdCopyResponses, PostMediaTypeByIdCopyErrors, GetMediaTypeByIdExportData, GetMediaTypeByIdExportResponses, GetMediaTypeByIdExportErrors, PutMediaTypeByIdImportData, PutMediaTypeByIdImportResponses, PutMediaTypeByIdImportErrors, PutMediaTypeByIdMoveData, PutMediaTypeByIdMoveResponses, PutMediaTypeByIdMoveErrors, GetMediaTypeAllowedAtRootData, GetMediaTypeAllowedAtRootResponses, GetMediaTypeAllowedAtRootErrors, PostMediaTypeAvailableCompositionsData, PostMediaTypeAvailableCompositionsResponses, PostMediaTypeAvailableCompositionsErrors, GetMediaTypeConfigurationData, GetMediaTypeConfigurationResponses, GetMediaTypeConfigurationErrors, PostMediaTypeFolderData, PostMediaTypeFolderResponses, PostMediaTypeFolderErrors, DeleteMediaTypeFolderByIdData, DeleteMediaTypeFolderByIdResponses, DeleteMediaTypeFolderByIdErrors, GetMediaTypeFolderByIdData, GetMediaTypeFolderByIdResponses, GetMediaTypeFolderByIdErrors, PutMediaTypeFolderByIdData, PutMediaTypeFolderByIdResponses, PutMediaTypeFolderByIdErrors, PostMediaTypeImportData, PostMediaTypeImportResponses, PostMediaTypeImportErrors, GetTreeMediaTypeAncestorsData, GetTreeMediaTypeAncestorsResponses, GetTreeMediaTypeAncestorsErrors, GetTreeMediaTypeChildrenData, GetTreeMediaTypeChildrenResponses, GetTreeMediaTypeChildrenErrors, GetTreeMediaTypeRootData, GetTreeMediaTypeRootResponses, GetTreeMediaTypeRootErrors, GetCollectionMediaData, GetCollectionMediaResponses, GetCollectionMediaErrors, GetItemMediaData, GetItemMediaResponses, GetItemMediaErrors, GetItemMediaSearchData, GetItemMediaSearchResponses, GetItemMediaSearchErrors, PostMediaData, PostMediaResponses, PostMediaErrors, DeleteMediaByIdData, DeleteMediaByIdResponses, DeleteMediaByIdErrors, GetMediaByIdData, GetMediaByIdResponses, GetMediaByIdErrors, PutMediaByIdData, PutMediaByIdResponses, PutMediaByIdErrors, GetMediaByIdAuditLogData, GetMediaByIdAuditLogResponses, GetMediaByIdAuditLogErrors, PutMediaByIdMoveData, PutMediaByIdMoveResponses, PutMediaByIdMoveErrors, PutMediaByIdMoveToRecycleBinData, PutMediaByIdMoveToRecycleBinResponses, PutMediaByIdMoveToRecycleBinErrors, GetMediaByIdReferencedByData, GetMediaByIdReferencedByResponses, GetMediaByIdReferencedByErrors, GetMediaByIdReferencedDescendantsData, GetMediaByIdReferencedDescendantsResponses, GetMediaByIdReferencedDescendantsErrors, PutMediaByIdValidateData, PutMediaByIdValidateResponses, PutMediaByIdValidateErrors, GetMediaAreReferencedData, GetMediaAreReferencedResponses, GetMediaAreReferencedErrors, GetMediaConfigurationData, GetMediaConfigurationResponses, GetMediaConfigurationErrors, PutMediaSortData, PutMediaSortResponses, PutMediaSortErrors, GetMediaUrlsData, GetMediaUrlsResponses, GetMediaUrlsErrors, PostMediaValidateData, PostMediaValidateResponses, PostMediaValidateErrors, DeleteRecycleBinMediaData, DeleteRecycleBinMediaResponses, DeleteRecycleBinMediaErrors, DeleteRecycleBinMediaByIdData, DeleteRecycleBinMediaByIdResponses, DeleteRecycleBinMediaByIdErrors, GetRecycleBinMediaByIdOriginalParentData, GetRecycleBinMediaByIdOriginalParentResponses, GetRecycleBinMediaByIdOriginalParentErrors, PutRecycleBinMediaByIdRestoreData, PutRecycleBinMediaByIdRestoreResponses, PutRecycleBinMediaByIdRestoreErrors, GetRecycleBinMediaChildrenData, GetRecycleBinMediaChildrenResponses, GetRecycleBinMediaChildrenErrors, GetRecycleBinMediaReferencedByData, GetRecycleBinMediaReferencedByResponses, GetRecycleBinMediaReferencedByErrors, GetRecycleBinMediaRootData, GetRecycleBinMediaRootResponses, GetRecycleBinMediaRootErrors, GetTreeMediaAncestorsData, GetTreeMediaAncestorsResponses, GetTreeMediaAncestorsErrors, GetTreeMediaChildrenData, GetTreeMediaChildrenResponses, GetTreeMediaChildrenErrors, GetTreeMediaRootData, GetTreeMediaRootResponses, GetTreeMediaRootErrors, GetItemMemberGroupData, GetItemMemberGroupResponses, GetItemMemberGroupErrors, GetMemberGroupData, GetMemberGroupResponses, GetMemberGroupErrors, PostMemberGroupData, PostMemberGroupResponses, PostMemberGroupErrors, DeleteMemberGroupByIdData, DeleteMemberGroupByIdResponses, DeleteMemberGroupByIdErrors, GetMemberGroupByIdData, GetMemberGroupByIdResponses, GetMemberGroupByIdErrors, PutMemberGroupByIdData, PutMemberGroupByIdResponses, PutMemberGroupByIdErrors, GetTreeMemberGroupRootData, GetTreeMemberGroupRootResponses, GetTreeMemberGroupRootErrors, GetItemMemberTypeData, GetItemMemberTypeResponses, GetItemMemberTypeErrors, GetItemMemberTypeSearchData, GetItemMemberTypeSearchResponses, GetItemMemberTypeSearchErrors, PostMemberTypeData, PostMemberTypeResponses, PostMemberTypeErrors, DeleteMemberTypeByIdData, DeleteMemberTypeByIdResponses, DeleteMemberTypeByIdErrors, GetMemberTypeByIdData, GetMemberTypeByIdResponses, GetMemberTypeByIdErrors, PutMemberTypeByIdData, PutMemberTypeByIdResponses, PutMemberTypeByIdErrors, GetMemberTypeByIdCompositionReferencesData, GetMemberTypeByIdCompositionReferencesResponses, GetMemberTypeByIdCompositionReferencesErrors, PostMemberTypeByIdCopyData, PostMemberTypeByIdCopyResponses, PostMemberTypeByIdCopyErrors, PostMemberTypeAvailableCompositionsData, PostMemberTypeAvailableCompositionsResponses, PostMemberTypeAvailableCompositionsErrors, GetMemberTypeConfigurationData, GetMemberTypeConfigurationResponses, GetMemberTypeConfigurationErrors, GetTreeMemberTypeRootData, GetTreeMemberTypeRootResponses, GetTreeMemberTypeRootErrors, GetFilterMemberData, GetFilterMemberResponses, GetFilterMemberErrors, GetItemMemberData, GetItemMemberResponses, GetItemMemberErrors, GetItemMemberSearchData, GetItemMemberSearchResponses, GetItemMemberSearchErrors, PostMemberData, PostMemberResponses, PostMemberErrors, DeleteMemberByIdData, DeleteMemberByIdResponses, DeleteMemberByIdErrors, GetMemberByIdData, GetMemberByIdResponses, GetMemberByIdErrors, PutMemberByIdData, PutMemberByIdResponses, PutMemberByIdErrors, GetMemberByIdReferencedByData, GetMemberByIdReferencedByResponses, GetMemberByIdReferencedByErrors, GetMemberByIdReferencedDescendantsData, GetMemberByIdReferencedDescendantsResponses, GetMemberByIdReferencedDescendantsErrors, PutMemberByIdValidateData, PutMemberByIdValidateResponses, PutMemberByIdValidateErrors, GetMemberAreReferencedData, GetMemberAreReferencedResponses, GetMemberAreReferencedErrors, GetMemberConfigurationData, GetMemberConfigurationResponses, GetMemberConfigurationErrors, PostMemberValidateData, PostMemberValidateResponses, PostMemberValidateErrors, PostModelsBuilderBuildData, PostModelsBuilderBuildResponses, PostModelsBuilderBuildErrors, GetModelsBuilderDashboardData, GetModelsBuilderDashboardResponses, GetModelsBuilderDashboardErrors, GetModelsBuilderStatusData, GetModelsBuilderStatusResponses, GetModelsBuilderStatusErrors, GetObjectTypesData, GetObjectTypesResponses, GetObjectTypesErrors, GetOembedQueryData, GetOembedQueryResponses, GetOembedQueryErrors, PostPackageByNameRunMigrationData, PostPackageByNameRunMigrationResponses, PostPackageByNameRunMigrationErrors, GetPackageConfigurationData, GetPackageConfigurationResponses, GetPackageConfigurationErrors, GetPackageCreatedData, GetPackageCreatedResponses, GetPackageCreatedErrors, PostPackageCreatedData, PostPackageCreatedResponses, PostPackageCreatedErrors, DeletePackageCreatedByIdData, DeletePackageCreatedByIdResponses, DeletePackageCreatedByIdErrors, GetPackageCreatedByIdData, GetPackageCreatedByIdResponses, GetPackageCreatedByIdErrors, PutPackageCreatedByIdData, PutPackageCreatedByIdResponses, PutPackageCreatedByIdErrors, GetPackageCreatedByIdDownloadData, GetPackageCreatedByIdDownloadResponses, GetPackageCreatedByIdDownloadErrors, GetPackageMigrationStatusData, GetPackageMigrationStatusResponses, GetPackageMigrationStatusErrors, GetItemPartialViewData, GetItemPartialViewResponses, GetItemPartialViewErrors, PostPartialViewData, PostPartialViewResponses, PostPartialViewErrors, DeletePartialViewByPathData, DeletePartialViewByPathResponses, DeletePartialViewByPathErrors, GetPartialViewByPathData, GetPartialViewByPathResponses, GetPartialViewByPathErrors, PutPartialViewByPathData, PutPartialViewByPathResponses, PutPartialViewByPathErrors, PutPartialViewByPathRenameData, PutPartialViewByPathRenameResponses, PutPartialViewByPathRenameErrors, PostPartialViewFolderData, PostPartialViewFolderResponses, PostPartialViewFolderErrors, DeletePartialViewFolderByPathData, DeletePartialViewFolderByPathResponses, DeletePartialViewFolderByPathErrors, GetPartialViewFolderByPathData, GetPartialViewFolderByPathResponses, GetPartialViewFolderByPathErrors, GetPartialViewSnippetData, GetPartialViewSnippetResponses, GetPartialViewSnippetErrors, GetPartialViewSnippetByIdData, GetPartialViewSnippetByIdResponses, GetPartialViewSnippetByIdErrors, GetTreePartialViewAncestorsData, GetTreePartialViewAncestorsResponses, GetTreePartialViewAncestorsErrors, GetTreePartialViewChildrenData, GetTreePartialViewChildrenResponses, GetTreePartialViewChildrenErrors, GetTreePartialViewRootData, GetTreePartialViewRootResponses, GetTreePartialViewRootErrors, DeletePreviewData, DeletePreviewResponses, PostPreviewData, PostPreviewResponses, PostPreviewErrors, GetProfilingStatusData, GetProfilingStatusResponses, GetProfilingStatusErrors, PutProfilingStatusData, PutProfilingStatusResponses, PutProfilingStatusErrors, GetPropertyTypeIsUsedData, GetPropertyTypeIsUsedResponses, GetPropertyTypeIsUsedErrors, PostPublishedCacheRebuildData, PostPublishedCacheRebuildResponses, PostPublishedCacheRebuildErrors, GetPublishedCacheRebuildStatusData, GetPublishedCacheRebuildStatusResponses, GetPublishedCacheRebuildStatusErrors, PostPublishedCacheReloadData, PostPublishedCacheReloadResponses, PostPublishedCacheReloadErrors, GetRedirectManagementData, GetRedirectManagementResponses, GetRedirectManagementErrors, DeleteRedirectManagementByIdData, DeleteRedirectManagementByIdResponses, DeleteRedirectManagementByIdErrors, GetRedirectManagementByIdData, GetRedirectManagementByIdResponses, GetRedirectManagementByIdErrors, GetRedirectManagementStatusData, GetRedirectManagementStatusResponses, GetRedirectManagementStatusErrors, PostRedirectManagementStatusData, PostRedirectManagementStatusResponses, PostRedirectManagementStatusErrors, GetItemRelationTypeData, GetItemRelationTypeResponses, GetItemRelationTypeErrors, GetRelationTypeData, GetRelationTypeResponses, GetRelationTypeErrors, GetRelationTypeByIdData, GetRelationTypeByIdResponses, GetRelationTypeByIdErrors, GetRelationByRelationTypeIdData, GetRelationByRelationTypeIdResponses, GetRelationByRelationTypeIdErrors, GetItemScriptData, GetItemScriptResponses, GetItemScriptErrors, PostScriptData, PostScriptResponses, PostScriptErrors, DeleteScriptByPathData, DeleteScriptByPathResponses, DeleteScriptByPathErrors, GetScriptByPathData, GetScriptByPathResponses, GetScriptByPathErrors, PutScriptByPathData, PutScriptByPathResponses, PutScriptByPathErrors, PutScriptByPathRenameData, PutScriptByPathRenameResponses, PutScriptByPathRenameErrors, PostScriptFolderData, PostScriptFolderResponses, PostScriptFolderErrors, DeleteScriptFolderByPathData, DeleteScriptFolderByPathResponses, DeleteScriptFolderByPathErrors, GetScriptFolderByPathData, GetScriptFolderByPathResponses, GetScriptFolderByPathErrors, GetTreeScriptAncestorsData, GetTreeScriptAncestorsResponses, GetTreeScriptAncestorsErrors, GetTreeScriptChildrenData, GetTreeScriptChildrenResponses, GetTreeScriptChildrenErrors, GetTreeScriptRootData, GetTreeScriptRootResponses, GetTreeScriptRootErrors, GetSearcherData, GetSearcherResponses, GetSearcherErrors, GetSearcherBySearcherNameQueryData, GetSearcherBySearcherNameQueryResponses, GetSearcherBySearcherNameQueryErrors, GetSecurityConfigurationData, GetSecurityConfigurationResponses, GetSecurityConfigurationErrors, PostSecurityForgotPasswordData, PostSecurityForgotPasswordResponses, PostSecurityForgotPasswordErrors, PostSecurityForgotPasswordResetData, PostSecurityForgotPasswordResetResponses, PostSecurityForgotPasswordResetErrors, PostSecurityForgotPasswordVerifyData, PostSecurityForgotPasswordVerifyResponses, PostSecurityForgotPasswordVerifyErrors, GetSegmentData, GetSegmentResponses, GetSegmentErrors, GetServerConfigurationData, GetServerConfigurationResponses, GetServerInformationData, GetServerInformationResponses, GetServerInformationErrors, GetServerStatusData, GetServerStatusResponses, GetServerStatusErrors, GetServerTroubleshootingData, GetServerTroubleshootingResponses, GetServerTroubleshootingErrors, GetServerUpgradeCheckData, GetServerUpgradeCheckResponses, GetServerUpgradeCheckErrors, GetItemStaticFileData, GetItemStaticFileResponses, GetItemStaticFileErrors, GetTreeStaticFileAncestorsData, GetTreeStaticFileAncestorsResponses, GetTreeStaticFileAncestorsErrors, GetTreeStaticFileChildrenData, GetTreeStaticFileChildrenResponses, GetTreeStaticFileChildrenErrors, GetTreeStaticFileRootData, GetTreeStaticFileRootResponses, GetTreeStaticFileRootErrors, GetItemStylesheetData, GetItemStylesheetResponses, GetItemStylesheetErrors, PostStylesheetData, PostStylesheetResponses, PostStylesheetErrors, DeleteStylesheetByPathData, DeleteStylesheetByPathResponses, DeleteStylesheetByPathErrors, GetStylesheetByPathData, GetStylesheetByPathResponses, GetStylesheetByPathErrors, PutStylesheetByPathData, PutStylesheetByPathResponses, PutStylesheetByPathErrors, PutStylesheetByPathRenameData, PutStylesheetByPathRenameResponses, PutStylesheetByPathRenameErrors, PostStylesheetFolderData, PostStylesheetFolderResponses, PostStylesheetFolderErrors, DeleteStylesheetFolderByPathData, DeleteStylesheetFolderByPathResponses, DeleteStylesheetFolderByPathErrors, GetStylesheetFolderByPathData, GetStylesheetFolderByPathResponses, GetStylesheetFolderByPathErrors, GetTreeStylesheetAncestorsData, GetTreeStylesheetAncestorsResponses, GetTreeStylesheetAncestorsErrors, GetTreeStylesheetChildrenData, GetTreeStylesheetChildrenResponses, GetTreeStylesheetChildrenErrors, GetTreeStylesheetRootData, GetTreeStylesheetRootResponses, GetTreeStylesheetRootErrors, GetTagData, GetTagResponses, GetTagErrors, GetTelemetryData, GetTelemetryResponses, GetTelemetryErrors, GetTelemetryLevelData, GetTelemetryLevelResponses, GetTelemetryLevelErrors, PostTelemetryLevelData, PostTelemetryLevelResponses, PostTelemetryLevelErrors, GetItemTemplateData, GetItemTemplateResponses, GetItemTemplateErrors, GetItemTemplateSearchData, GetItemTemplateSearchResponses, GetItemTemplateSearchErrors, PostTemplateData, PostTemplateResponses, PostTemplateErrors, DeleteTemplateByIdData, DeleteTemplateByIdResponses, DeleteTemplateByIdErrors, GetTemplateByIdData, GetTemplateByIdResponses, GetTemplateByIdErrors, PutTemplateByIdData, PutTemplateByIdResponses, PutTemplateByIdErrors, GetTemplateConfigurationData, GetTemplateConfigurationResponses, GetTemplateConfigurationErrors, PostTemplateQueryExecuteData, PostTemplateQueryExecuteResponses, PostTemplateQueryExecuteErrors, GetTemplateQuerySettingsData, GetTemplateQuerySettingsResponses, GetTemplateQuerySettingsErrors, GetTreeTemplateAncestorsData, GetTreeTemplateAncestorsResponses, GetTreeTemplateAncestorsErrors, GetTreeTemplateChildrenData, GetTreeTemplateChildrenResponses, GetTreeTemplateChildrenErrors, GetTreeTemplateRootData, GetTreeTemplateRootResponses, GetTreeTemplateRootErrors, PostTemporaryFileData, PostTemporaryFileResponses, PostTemporaryFileErrors, DeleteTemporaryFileByIdData, DeleteTemporaryFileByIdResponses, DeleteTemporaryFileByIdErrors, GetTemporaryFileByIdData, GetTemporaryFileByIdResponses, GetTemporaryFileByIdErrors, GetTemporaryFileConfigurationData, GetTemporaryFileConfigurationResponses, GetTemporaryFileConfigurationErrors, PostUpgradeAuthorizeData, PostUpgradeAuthorizeResponses, PostUpgradeAuthorizeErrors, GetUpgradeSettingsData, GetUpgradeSettingsResponses, GetUpgradeSettingsErrors, GetUserDataData, GetUserDataResponses, GetUserDataErrors, PostUserDataData, PostUserDataResponses, PostUserDataErrors, PutUserDataData, PutUserDataResponses, PutUserDataErrors, GetUserDataByIdData, GetUserDataByIdResponses, GetUserDataByIdErrors, GetFilterUserGroupData, GetFilterUserGroupResponses, GetFilterUserGroupErrors, GetItemUserGroupData, GetItemUserGroupResponses, GetItemUserGroupErrors, DeleteUserGroupData, DeleteUserGroupResponses, DeleteUserGroupErrors, GetUserGroupData, GetUserGroupResponses, GetUserGroupErrors, PostUserGroupData, PostUserGroupResponses, PostUserGroupErrors, DeleteUserGroupByIdData, DeleteUserGroupByIdResponses, DeleteUserGroupByIdErrors, GetUserGroupByIdData, GetUserGroupByIdResponses, GetUserGroupByIdErrors, PutUserGroupByIdData, PutUserGroupByIdResponses, PutUserGroupByIdErrors, DeleteUserGroupByIdUsersData, DeleteUserGroupByIdUsersResponses, DeleteUserGroupByIdUsersErrors, PostUserGroupByIdUsersData, PostUserGroupByIdUsersResponses, PostUserGroupByIdUsersErrors, GetFilterUserData, GetFilterUserResponses, GetFilterUserErrors, GetItemUserData, GetItemUserResponses, GetItemUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, GetUserData, GetUserResponses, GetUserErrors, PostUserData, PostUserResponses, PostUserErrors, DeleteUserByIdData, DeleteUserByIdResponses, DeleteUserByIdErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, PutUserByIdData, PutUserByIdResponses, PutUserByIdErrors, GetUserById2FaData, GetUserById2FaResponses, GetUserById2FaErrors, DeleteUserById2FaByProviderNameData, DeleteUserById2FaByProviderNameResponses, DeleteUserById2FaByProviderNameErrors, GetUserByIdCalculateStartNodesData, GetUserByIdCalculateStartNodesResponses, GetUserByIdCalculateStartNodesErrors, PostUserByIdChangePasswordData, PostUserByIdChangePasswordResponses, PostUserByIdChangePasswordErrors, GetUserByIdClientCredentialsData, GetUserByIdClientCredentialsResponses, GetUserByIdClientCredentialsErrors, PostUserByIdClientCredentialsData, PostUserByIdClientCredentialsResponses, PostUserByIdClientCredentialsErrors, DeleteUserByIdClientCredentialsByClientIdData, DeleteUserByIdClientCredentialsByClientIdResponses, DeleteUserByIdClientCredentialsByClientIdErrors, PostUserByIdResetPasswordData, PostUserByIdResetPasswordResponses, PostUserByIdResetPasswordErrors, DeleteUserAvatarByIdData, DeleteUserAvatarByIdResponses, DeleteUserAvatarByIdErrors, PostUserAvatarByIdData, PostUserAvatarByIdResponses, PostUserAvatarByIdErrors, GetUserConfigurationData, GetUserConfigurationResponses, GetUserConfigurationErrors, GetUserCurrentData, GetUserCurrentResponses, GetUserCurrentErrors, GetUserCurrent2FaData, GetUserCurrent2FaResponses, GetUserCurrent2FaErrors, DeleteUserCurrent2FaByProviderNameData, DeleteUserCurrent2FaByProviderNameResponses, DeleteUserCurrent2FaByProviderNameErrors, GetUserCurrent2FaByProviderNameData, GetUserCurrent2FaByProviderNameResponses, GetUserCurrent2FaByProviderNameErrors, PostUserCurrent2FaByProviderNameData, PostUserCurrent2FaByProviderNameResponses, PostUserCurrent2FaByProviderNameErrors, PostUserCurrentAvatarData, PostUserCurrentAvatarResponses, PostUserCurrentAvatarErrors, PostUserCurrentChangePasswordData, PostUserCurrentChangePasswordResponses, PostUserCurrentChangePasswordErrors, GetUserCurrentConfigurationData, GetUserCurrentConfigurationResponses, GetUserCurrentConfigurationErrors, GetUserCurrentLoginProvidersData, GetUserCurrentLoginProvidersResponses, GetUserCurrentLoginProvidersErrors, GetUserCurrentPermissionsData, GetUserCurrentPermissionsResponses, GetUserCurrentPermissionsErrors, GetUserCurrentPermissionsDocumentData, GetUserCurrentPermissionsDocumentResponses, GetUserCurrentPermissionsDocumentErrors, GetUserCurrentPermissionsMediaData, GetUserCurrentPermissionsMediaResponses, GetUserCurrentPermissionsMediaErrors, PostUserDisableData, PostUserDisableResponses, PostUserDisableErrors, PostUserEnableData, PostUserEnableResponses, PostUserEnableErrors, PostUserInviteData, PostUserInviteResponses, PostUserInviteErrors, PostUserInviteCreatePasswordData, PostUserInviteCreatePasswordResponses, PostUserInviteCreatePasswordErrors, PostUserInviteResendData, PostUserInviteResendResponses, PostUserInviteResendErrors, PostUserInviteVerifyData, PostUserInviteVerifyResponses, PostUserInviteVerifyErrors, PostUserSetUserGroupsData, PostUserSetUserGroupsResponses, PostUserSetUserGroupsErrors, PostUserUnlockData, PostUserUnlockResponses, PostUserUnlockErrors, GetItemWebhookData, GetItemWebhookResponses, GetItemWebhookErrors, GetWebhookData, GetWebhookResponses, GetWebhookErrors, PostWebhookData, PostWebhookResponses, PostWebhookErrors, DeleteWebhookByIdData, DeleteWebhookByIdResponses, DeleteWebhookByIdErrors, GetWebhookByIdData, GetWebhookByIdResponses, GetWebhookByIdErrors, PutWebhookByIdData, PutWebhookByIdResponses, PutWebhookByIdErrors, GetWebhookByIdLogsData, GetWebhookByIdLogsResponses, GetWebhookByIdLogsErrors, GetWebhookEventsData, GetWebhookEventsResponses, GetWebhookEventsErrors, GetWebhookLogsData, GetWebhookLogsResponses, GetWebhookLogsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class CultureService {
    public static getCulture<ThrowOnError extends boolean = true>(options?: Options<GetCultureData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCultureResponses, GetCultureErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/culture',
            ...options
        });
    }
}

export class DataTypeService {
    public static postDataType<ThrowOnError extends boolean = true>(options?: Options<PostDataTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDataTypeResponses, PostDataTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDataTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDataTypeByIdResponses, DeleteDataTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options
        });
    }
    
    public static getDataTypeById<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdResponses, GetDataTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options
        });
    }
    
    public static putDataTypeById<ThrowOnError extends boolean = true>(options: Options<PutDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDataTypeByIdResponses, PutDataTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDataTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDataTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostDataTypeByIdCopyResponses, PostDataTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDataTypeByIdIsUsed<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdIsUsedData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdIsUsedResponses, GetDataTypeByIdIsUsedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/is-used',
            ...options
        });
    }
    
    public static putDataTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDataTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDataTypeByIdMoveResponses, PutDataTypeByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDataTypeByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdReferencedByResponses, GetDataTypeByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/referenced-by',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static getDataTypeByIdReferences<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdReferencesResponses, GetDataTypeByIdReferencesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/references',
            ...options
        });
    }
    
    public static getDataTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDataTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDataTypeConfigurationResponses, GetDataTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/configuration',
            ...options
        });
    }
    
    public static postDataTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostDataTypeFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDataTypeFolderResponses, PostDataTypeFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDataTypeFolderByIdResponses, DeleteDataTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options
        });
    }
    
    public static getDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeFolderByIdResponses, GetDataTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options
        });
    }
    
    public static putDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDataTypeFolderByIdResponses, PutDataTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getFilterDataType<ThrowOnError extends boolean = true>(options?: Options<GetFilterDataTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterDataTypeResponses, GetFilterDataTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/data-type',
            ...options
        });
    }
    
    public static getItemDataType<ThrowOnError extends boolean = true>(options?: Options<GetItemDataTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDataTypeResponses, GetItemDataTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/data-type',
            ...options
        });
    }
    
    public static getItemDataTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDataTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDataTypeSearchResponses, GetItemDataTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/data-type/search',
            ...options
        });
    }
    
    public static getTreeDataTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDataTypeAncestorsResponses, GetTreeDataTypeAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/ancestors',
            ...options
        });
    }
    
    public static getTreeDataTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDataTypeChildrenResponses, GetTreeDataTypeChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/children',
            ...options
        });
    }
    
    public static getTreeDataTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDataTypeRootResponses, GetTreeDataTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/root',
            ...options
        });
    }
}

export class DictionaryService {
    public static getDictionary<ThrowOnError extends boolean = true>(options?: Options<GetDictionaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDictionaryResponses, GetDictionaryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary',
            ...options
        });
    }
    
    public static postDictionary<ThrowOnError extends boolean = true>(options?: Options<PostDictionaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDictionaryResponses, PostDictionaryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDictionaryById<ThrowOnError extends boolean = true>(options: Options<DeleteDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDictionaryByIdResponses, DeleteDictionaryByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options
        });
    }
    
    public static getDictionaryById<ThrowOnError extends boolean = true>(options: Options<GetDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDictionaryByIdResponses, GetDictionaryByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options
        });
    }
    
    public static putDictionaryById<ThrowOnError extends boolean = true>(options: Options<PutDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDictionaryByIdResponses, PutDictionaryByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDictionaryByIdExport<ThrowOnError extends boolean = true>(options: Options<GetDictionaryByIdExportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDictionaryByIdExportResponses, GetDictionaryByIdExportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}/export',
            ...options
        });
    }
    
    public static putDictionaryByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDictionaryByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDictionaryByIdMoveResponses, PutDictionaryByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDictionaryImport<ThrowOnError extends boolean = true>(options?: Options<PostDictionaryImportData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDictionaryImportResponses, PostDictionaryImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDictionary<ThrowOnError extends boolean = true>(options?: Options<GetItemDictionaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDictionaryResponses, GetItemDictionaryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/dictionary',
            ...options
        });
    }
    
    public static getTreeDictionaryAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDictionaryAncestorsResponses, GetTreeDictionaryAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',
            ...options
        });
    }
    
    public static getTreeDictionaryChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDictionaryChildrenResponses, GetTreeDictionaryChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/children',
            ...options
        });
    }
    
    public static getTreeDictionaryRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDictionaryRootResponses, GetTreeDictionaryRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/root',
            ...options
        });
    }
}

export class DocumentBlueprintService {
    public static postDocumentBlueprint<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentBlueprintResponses, PostDocumentBlueprintErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDocumentBlueprintByIdResponses, DeleteDocumentBlueprintByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options
        });
    }
    
    public static getDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentBlueprintByIdResponses, GetDocumentBlueprintByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options
        });
    }
    
    public static putDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentBlueprintByIdResponses, PutDocumentBlueprintByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentBlueprintByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentBlueprintByIdMoveResponses, PutDocumentBlueprintByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentBlueprintByIdScaffold<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintByIdScaffoldData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentBlueprintByIdScaffoldResponses, GetDocumentBlueprintByIdScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}/scaffold',
            ...options
        });
    }
    
    public static postDocumentBlueprintFolder<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentBlueprintFolderResponses, PostDocumentBlueprintFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDocumentBlueprintFolderByIdResponses, DeleteDocumentBlueprintFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options
        });
    }
    
    public static getDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentBlueprintFolderByIdResponses, GetDocumentBlueprintFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options
        });
    }
    
    public static putDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentBlueprintFolderByIdResponses, PutDocumentBlueprintFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDocumentBlueprintFromDocument<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintFromDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentBlueprintFromDocumentResponses, PostDocumentBlueprintFromDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/from-document',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocumentBlueprint<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentBlueprintData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentBlueprintResponses, GetItemDocumentBlueprintErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-blueprint',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintAncestorsResponses, GetTreeDocumentBlueprintAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintChildrenResponses, GetTreeDocumentBlueprintChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/children',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintRootResponses, GetTreeDocumentBlueprintRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/root',
            ...options
        });
    }
}

export class DocumentTypeService {
    public static postDocumentType<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentTypeResponses, PostDocumentTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDocumentTypeByIdResponses, DeleteDocumentTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options
        });
    }
    
    public static getDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdResponses, GetDocumentTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options
        });
    }
    
    public static putDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentTypeByIdResponses, PutDocumentTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentTypeByIdAllowedChildren<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdAllowedChildrenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdAllowedChildrenResponses, GetDocumentTypeByIdAllowedChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',
            ...options
        });
    }
    
    public static getDocumentTypeByIdBlueprint<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdBlueprintData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdBlueprintResponses, GetDocumentTypeByIdBlueprintErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',
            ...options
        });
    }
    
    public static getDocumentTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdCompositionReferencesResponses, GetDocumentTypeByIdCompositionReferencesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postDocumentTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDocumentTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostDocumentTypeByIdCopyResponses, PostDocumentTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentTypeByIdExport<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdExportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdExportResponses, GetDocumentTypeByIdExportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/export',
            ...options
        });
    }
    
    public static putDocumentTypeByIdImport<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdImportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentTypeByIdImportResponses, PutDocumentTypeByIdImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentTypeByIdMoveResponses, PutDocumentTypeByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentTypeAllowedAtRoot<ThrowOnError extends boolean = true>(options?: Options<GetDocumentTypeAllowedAtRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentTypeAllowedAtRootResponses, GetDocumentTypeAllowedAtRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/allowed-at-root',
            ...options
        });
    }
    
    public static postDocumentTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentTypeAvailableCompositionsResponses, PostDocumentTypeAvailableCompositionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDocumentTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentTypeConfigurationResponses, GetDocumentTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/configuration',
            ...options
        });
    }
    
    public static postDocumentTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentTypeFolderResponses, PostDocumentTypeFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDocumentTypeFolderByIdResponses, DeleteDocumentTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options
        });
    }
    
    public static getDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeFolderByIdResponses, GetDocumentTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options
        });
    }
    
    public static putDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentTypeFolderByIdResponses, PutDocumentTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDocumentTypeImport<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeImportData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentTypeImportResponses, PostDocumentTypeImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocumentType<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentTypeResponses, GetItemDocumentTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-type',
            ...options
        });
    }
    
    public static getItemDocumentTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentTypeSearchResponses, GetItemDocumentTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-type/search',
            ...options
        });
    }
    
    public static getTreeDocumentTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeAncestorsResponses, GetTreeDocumentTypeAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeChildrenResponses, GetTreeDocumentTypeChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/children',
            ...options
        });
    }
    
    public static getTreeDocumentTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeRootResponses, GetTreeDocumentTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/root',
            ...options
        });
    }
}

export class DocumentVersionService {
    public static getDocumentVersion<ThrowOnError extends boolean = true>(options: Options<GetDocumentVersionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentVersionResponses, GetDocumentVersionErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version',
            ...options
        });
    }
    
    public static getDocumentVersionById<ThrowOnError extends boolean = true>(options: Options<GetDocumentVersionByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentVersionByIdResponses, GetDocumentVersionByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}',
            ...options
        });
    }
    
    public static putDocumentVersionByIdPreventCleanup<ThrowOnError extends boolean = true>(options: Options<PutDocumentVersionByIdPreventCleanupData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentVersionByIdPreventCleanupResponses, PutDocumentVersionByIdPreventCleanupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',
            ...options
        });
    }
    
    public static postDocumentVersionByIdRollback<ThrowOnError extends boolean = true>(options: Options<PostDocumentVersionByIdRollbackData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostDocumentVersionByIdRollbackResponses, PostDocumentVersionByIdRollbackErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}/rollback',
            ...options
        });
    }
}

export class DocumentService {
    public static getCollectionDocumentById<ThrowOnError extends boolean = true>(options: Options<GetCollectionDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCollectionDocumentByIdResponses, GetCollectionDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/collection/document/{id}',
            ...options
        });
    }
    
    public static postDocument<ThrowOnError extends boolean = true>(options?: Options<PostDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentResponses, PostDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDocumentByIdResponses, DeleteDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options
        });
    }
    
    public static getDocumentById<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdResponses, GetDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options
        });
    }
    
    public static putDocumentById<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdResponses, PutDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentByIdAuditLog<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdAuditLogData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdAuditLogResponses, GetDocumentByIdAuditLogErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/audit-log',
            ...options
        });
    }
    
    public static postDocumentByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDocumentByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostDocumentByIdCopyResponses, PostDocumentByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentByIdDomains<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdDomainsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdDomainsResponses, GetDocumentByIdDomainsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/domains',
            ...options
        });
    }
    
    public static putDocumentByIdDomains<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdDomainsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdDomainsResponses, PutDocumentByIdDomainsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/domains',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdMoveResponses, PutDocumentByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdMoveToRecycleBin<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdMoveToRecycleBinData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdMoveToRecycleBinResponses, PutDocumentByIdMoveToRecycleBinErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',
            ...options
        });
    }
    
    public static getDocumentByIdNotifications<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdNotificationsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdNotificationsResponses, GetDocumentByIdNotificationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            ...options
        });
    }
    
    public static putDocumentByIdNotifications<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdNotificationsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdNotificationsResponses, PutDocumentByIdNotificationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDocumentByIdPublicAccessResponses, DeleteDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options
        });
    }
    
    public static getDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdPublicAccessResponses, GetDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options
        });
    }
    
    public static postDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<PostDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostDocumentByIdPublicAccessResponses, PostDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdPublicAccessResponses, PutDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdPublish<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublishData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdPublishResponses, PutDocumentByIdPublishErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdPublishWithDescendants<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublishWithDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdPublishWithDescendantsResponses, PutDocumentByIdPublishWithDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentByIdPublishWithDescendantsResultByTaskId<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublishWithDescendantsResultByTaskIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdPublishWithDescendantsResultByTaskIdResponses, GetDocumentByIdPublishWithDescendantsResultByTaskIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants/result/{taskId}',
            ...options
        });
    }
    
    public static getDocumentByIdPublished<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublishedData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdPublishedResponses, GetDocumentByIdPublishedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/published',
            ...options
        });
    }
    
    public static getDocumentByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdReferencedByResponses, GetDocumentByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/referenced-by',
            ...options
        });
    }
    
    public static getDocumentByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdReferencedDescendantsResponses, GetDocumentByIdReferencedDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putDocumentByIdUnpublish<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdUnpublishData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdUnpublishResponses, PutDocumentByIdUnpublishErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/unpublish',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putUmbracoManagementApiV11DocumentByIdValidate11<ThrowOnError extends boolean = true>(options: Options<PutUmbracoManagementApiV11DocumentByIdValidate11Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutUmbracoManagementApiV11DocumentByIdValidate11Responses, PutUmbracoManagementApiV11DocumentByIdValidate11Errors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1.1/document/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetDocumentAreReferencedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentAreReferencedResponses, GetDocumentAreReferencedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/are-referenced',
            ...options
        });
    }
    
    public static getDocumentConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDocumentConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentConfigurationResponses, GetDocumentConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/configuration',
            ...options
        });
    }
    
    public static putDocumentSort<ThrowOnError extends boolean = true>(options?: Options<PutDocumentSortData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutDocumentSortResponses, PutDocumentSortErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentUrls<ThrowOnError extends boolean = true>(options?: Options<GetDocumentUrlsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentUrlsResponses, GetDocumentUrlsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/urls',
            ...options
        });
    }
    
    public static postDocumentValidate<ThrowOnError extends boolean = true>(options?: Options<PostDocumentValidateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentValidateResponses, PostDocumentValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocument<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentResponses, GetItemDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document',
            ...options
        });
    }
    
    public static getItemDocumentSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentSearchResponses, GetItemDocumentSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document/search',
            ...options
        });
    }
    
    public static deleteRecycleBinDocument<ThrowOnError extends boolean = true>(options?: Options<DeleteRecycleBinDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteRecycleBinDocumentResponses, DeleteRecycleBinDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document',
            ...options
        });
    }
    
    public static deleteRecycleBinDocumentById<ThrowOnError extends boolean = true>(options: Options<DeleteRecycleBinDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteRecycleBinDocumentByIdResponses, DeleteRecycleBinDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',
            ...options
        });
    }
    
    public static getRecycleBinDocumentByIdOriginalParent<ThrowOnError extends boolean = true>(options: Options<GetRecycleBinDocumentByIdOriginalParentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRecycleBinDocumentByIdOriginalParentResponses, GetRecycleBinDocumentByIdOriginalParentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',
            ...options
        });
    }
    
    public static putRecycleBinDocumentByIdRestore<ThrowOnError extends boolean = true>(options: Options<PutRecycleBinDocumentByIdRestoreData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutRecycleBinDocumentByIdRestoreResponses, PutRecycleBinDocumentByIdRestoreErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getRecycleBinDocumentChildren<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentChildrenResponses, GetRecycleBinDocumentChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/children',
            ...options
        });
    }
    
    public static getRecycleBinDocumentReferencedBy<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentReferencedByData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentReferencedByResponses, GetRecycleBinDocumentReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/referenced-by',
            ...options
        });
    }
    
    public static getRecycleBinDocumentRoot<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentRootResponses, GetRecycleBinDocumentRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/root',
            ...options
        });
    }
    
    public static getTreeDocumentAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentAncestorsResponses, GetTreeDocumentAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentChildrenResponses, GetTreeDocumentChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/children',
            ...options
        });
    }
    
    public static getTreeDocumentRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentRootResponses, GetTreeDocumentRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/root',
            ...options
        });
    }
}

export class DynamicRootService {
    public static postDynamicRootQuery<ThrowOnError extends boolean = true>(options?: Options<PostDynamicRootQueryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDynamicRootQueryResponses, PostDynamicRootQueryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dynamic-root/query',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDynamicRootSteps<ThrowOnError extends boolean = true>(options?: Options<GetDynamicRootStepsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDynamicRootStepsResponses, GetDynamicRootStepsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dynamic-root/steps',
            ...options
        });
    }
}

export class HealthCheckService {
    public static getHealthCheckGroup<ThrowOnError extends boolean = true>(options?: Options<GetHealthCheckGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetHealthCheckGroupResponses, GetHealthCheckGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group',
            ...options
        });
    }
    
    public static getHealthCheckGroupByName<ThrowOnError extends boolean = true>(options: Options<GetHealthCheckGroupByNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetHealthCheckGroupByNameResponses, GetHealthCheckGroupByNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group/{name}',
            ...options
        });
    }
    
    public static postHealthCheckGroupByNameCheck<ThrowOnError extends boolean = true>(options: Options<PostHealthCheckGroupByNameCheckData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostHealthCheckGroupByNameCheckResponses, PostHealthCheckGroupByNameCheckErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group/{name}/check',
            ...options
        });
    }
    
    public static postHealthCheckExecuteAction<ThrowOnError extends boolean = true>(options?: Options<PostHealthCheckExecuteActionData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostHealthCheckExecuteActionResponses, PostHealthCheckExecuteActionErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check/execute-action',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class HelpService {
    public static getHelp<ThrowOnError extends boolean = true>(options?: Options<GetHelpData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetHelpResponses, GetHelpErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/help',
            ...options
        });
    }
}

export class ImagingService {
    public static getImagingResizeUrls<ThrowOnError extends boolean = true>(options?: Options<GetImagingResizeUrlsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetImagingResizeUrlsResponses, GetImagingResizeUrlsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/imaging/resize/urls',
            ...options
        });
    }
}

export class ImportService {
    public static getImportAnalyze<ThrowOnError extends boolean = true>(options?: Options<GetImportAnalyzeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetImportAnalyzeResponses, GetImportAnalyzeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/import/analyze',
            ...options
        });
    }
}

export class IndexerService {
    public static getIndexer<ThrowOnError extends boolean = true>(options?: Options<GetIndexerData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetIndexerResponses, GetIndexerErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer',
            ...options
        });
    }
    
    public static getIndexerByIndexName<ThrowOnError extends boolean = true>(options: Options<GetIndexerByIndexNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetIndexerByIndexNameResponses, GetIndexerByIndexNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer/{indexName}',
            ...options
        });
    }
    
    public static postIndexerByIndexNameRebuild<ThrowOnError extends boolean = true>(options: Options<PostIndexerByIndexNameRebuildData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostIndexerByIndexNameRebuildResponses, PostIndexerByIndexNameRebuildErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',
            ...options
        });
    }
}

export class InstallService {
    public static getInstallSettings<ThrowOnError extends boolean = true>(options?: Options<GetInstallSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetInstallSettingsResponses, GetInstallSettingsErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/settings',
            ...options
        });
    }
    
    public static postInstallSetup<ThrowOnError extends boolean = true>(options?: Options<PostInstallSetupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostInstallSetupResponses, PostInstallSetupErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/setup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postInstallValidateDatabase<ThrowOnError extends boolean = true>(options?: Options<PostInstallValidateDatabaseData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostInstallValidateDatabaseResponses, PostInstallValidateDatabaseErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/validate-database',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class LanguageService {
    public static getItemLanguage<ThrowOnError extends boolean = true>(options?: Options<GetItemLanguageData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemLanguageResponses, GetItemLanguageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/language',
            ...options
        });
    }
    
    public static getItemLanguageDefault<ThrowOnError extends boolean = true>(options?: Options<GetItemLanguageDefaultData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemLanguageDefaultResponses, GetItemLanguageDefaultErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/language/default',
            ...options
        });
    }
    
    public static getLanguage<ThrowOnError extends boolean = true>(options?: Options<GetLanguageData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLanguageResponses, GetLanguageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language',
            ...options
        });
    }
    
    public static postLanguage<ThrowOnError extends boolean = true>(options?: Options<PostLanguageData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostLanguageResponses, PostLanguageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<DeleteLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteLanguageByIsoCodeResponses, DeleteLanguageByIsoCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options
        });
    }
    
    public static getLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<GetLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetLanguageByIsoCodeResponses, GetLanguageByIsoCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options
        });
    }
    
    public static putLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<PutLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutLanguageByIsoCodeResponses, PutLanguageByIsoCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class LogViewerService {
    public static getLogViewerLevel<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLevelData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerLevelResponses, GetLogViewerLevelErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/level',
            ...options
        });
    }
    
    public static getLogViewerLevelCount<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLevelCountData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerLevelCountResponses, GetLogViewerLevelCountErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/level-count',
            ...options
        });
    }
    
    public static getLogViewerLog<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLogData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerLogResponses, GetLogViewerLogErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/log',
            ...options
        });
    }
    
    public static getLogViewerMessageTemplate<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerMessageTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerMessageTemplateResponses, GetLogViewerMessageTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/message-template',
            ...options
        });
    }
    
    public static getLogViewerSavedSearch<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerSavedSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerSavedSearchResponses, GetLogViewerSavedSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            ...options
        });
    }
    
    public static postLogViewerSavedSearch<ThrowOnError extends boolean = true>(options?: Options<PostLogViewerSavedSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostLogViewerSavedSearchResponses, PostLogViewerSavedSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteLogViewerSavedSearchByName<ThrowOnError extends boolean = true>(options: Options<DeleteLogViewerSavedSearchByNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteLogViewerSavedSearchByNameResponses, DeleteLogViewerSavedSearchByNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            ...options
        });
    }
    
    public static getLogViewerSavedSearchByName<ThrowOnError extends boolean = true>(options: Options<GetLogViewerSavedSearchByNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetLogViewerSavedSearchByNameResponses, GetLogViewerSavedSearchByNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            ...options
        });
    }
    
    public static getLogViewerValidateLogsSize<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerValidateLogsSizeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerValidateLogsSizeResponses, GetLogViewerValidateLogsSizeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',
            ...options
        });
    }
}

export class ManifestService {
    public static getManifestManifest<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetManifestManifestResponses, GetManifestManifestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/manifest/manifest',
            ...options
        });
    }
    
    public static getManifestManifestPrivate<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestPrivateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetManifestManifestPrivateResponses, GetManifestManifestPrivateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/manifest/manifest/private',
            ...options
        });
    }
    
    public static getManifestManifestPublic<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestPublicData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetManifestManifestPublicResponses, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/manifest/manifest/public',
            ...options
        });
    }
}

export class MediaTypeService {
    public static getItemMediaType<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeResponses, GetItemMediaTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type',
            ...options
        });
    }
    
    public static getItemMediaTypeAllowed<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeAllowedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeAllowedResponses, GetItemMediaTypeAllowedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/allowed',
            ...options
        });
    }
    
    public static getItemMediaTypeFolders<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeFoldersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeFoldersResponses, GetItemMediaTypeFoldersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/folders',
            ...options
        });
    }
    
    public static getItemMediaTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeSearchResponses, GetItemMediaTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/search',
            ...options
        });
    }
    
    public static postMediaType<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMediaTypeResponses, PostMediaTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMediaTypeByIdResponses, DeleteMediaTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options
        });
    }
    
    public static getMediaTypeById<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdResponses, GetMediaTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options
        });
    }
    
    public static putMediaTypeById<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaTypeByIdResponses, PutMediaTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaTypeByIdAllowedChildren<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdAllowedChildrenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdAllowedChildrenResponses, GetMediaTypeByIdAllowedChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',
            ...options
        });
    }
    
    public static getMediaTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdCompositionReferencesResponses, GetMediaTypeByIdCompositionReferencesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postMediaTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostMediaTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostMediaTypeByIdCopyResponses, PostMediaTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaTypeByIdExport<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdExportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdExportResponses, GetMediaTypeByIdExportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/export',
            ...options
        });
    }
    
    public static putMediaTypeByIdImport<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdImportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaTypeByIdImportResponses, PutMediaTypeByIdImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putMediaTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaTypeByIdMoveResponses, PutMediaTypeByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaTypeAllowedAtRoot<ThrowOnError extends boolean = true>(options?: Options<GetMediaTypeAllowedAtRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaTypeAllowedAtRootResponses, GetMediaTypeAllowedAtRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/allowed-at-root',
            ...options
        });
    }
    
    public static postMediaTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMediaTypeAvailableCompositionsResponses, PostMediaTypeAvailableCompositionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMediaTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaTypeConfigurationResponses, GetMediaTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/configuration',
            ...options
        });
    }
    
    public static postMediaTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMediaTypeFolderResponses, PostMediaTypeFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMediaTypeFolderByIdResponses, DeleteMediaTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options
        });
    }
    
    public static getMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeFolderByIdResponses, GetMediaTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options
        });
    }
    
    public static putMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaTypeFolderByIdResponses, PutMediaTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postMediaTypeImport<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeImportData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMediaTypeImportResponses, PostMediaTypeImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTreeMediaTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeAncestorsResponses, GetTreeMediaTypeAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/ancestors',
            ...options
        });
    }
    
    public static getTreeMediaTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeChildrenResponses, GetTreeMediaTypeChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/children',
            ...options
        });
    }
    
    public static getTreeMediaTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeRootResponses, GetTreeMediaTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/root',
            ...options
        });
    }
}

export class MediaService {
    public static getCollectionMedia<ThrowOnError extends boolean = true>(options?: Options<GetCollectionMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCollectionMediaResponses, GetCollectionMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/collection/media',
            ...options
        });
    }
    
    public static getItemMedia<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaResponses, GetItemMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media',
            ...options
        });
    }
    
    public static getItemMediaSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaSearchResponses, GetItemMediaSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media/search',
            ...options
        });
    }
    
    public static postMedia<ThrowOnError extends boolean = true>(options?: Options<PostMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMediaResponses, PostMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMediaByIdResponses, DeleteMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options
        });
    }
    
    public static getMediaById<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdResponses, GetMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options
        });
    }
    
    public static putMediaById<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaByIdResponses, PutMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaByIdAuditLog<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdAuditLogData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdAuditLogResponses, GetMediaByIdAuditLogErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/audit-log',
            ...options
        });
    }
    
    public static putMediaByIdMove<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaByIdMoveResponses, PutMediaByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putMediaByIdMoveToRecycleBin<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdMoveToRecycleBinData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaByIdMoveToRecycleBinResponses, PutMediaByIdMoveToRecycleBinErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',
            ...options
        });
    }
    
    public static getMediaByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdReferencedByResponses, GetMediaByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/referenced-by',
            ...options
        });
    }
    
    public static getMediaByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdReferencedDescendantsResponses, GetMediaByIdReferencedDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putMediaByIdValidate<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdValidateData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMediaByIdValidateResponses, PutMediaByIdValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetMediaAreReferencedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaAreReferencedResponses, GetMediaAreReferencedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/are-referenced',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static getMediaConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMediaConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaConfigurationResponses, GetMediaConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/configuration',
            ...options
        });
    }
    
    public static putMediaSort<ThrowOnError extends boolean = true>(options?: Options<PutMediaSortData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutMediaSortResponses, PutMediaSortErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaUrls<ThrowOnError extends boolean = true>(options?: Options<GetMediaUrlsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaUrlsResponses, GetMediaUrlsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/urls',
            ...options
        });
    }
    
    public static postMediaValidate<ThrowOnError extends boolean = true>(options?: Options<PostMediaValidateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMediaValidateResponses, PostMediaValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteRecycleBinMedia<ThrowOnError extends boolean = true>(options?: Options<DeleteRecycleBinMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteRecycleBinMediaResponses, DeleteRecycleBinMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media',
            ...options
        });
    }
    
    public static deleteRecycleBinMediaById<ThrowOnError extends boolean = true>(options: Options<DeleteRecycleBinMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteRecycleBinMediaByIdResponses, DeleteRecycleBinMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',
            ...options
        });
    }
    
    public static getRecycleBinMediaByIdOriginalParent<ThrowOnError extends boolean = true>(options: Options<GetRecycleBinMediaByIdOriginalParentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRecycleBinMediaByIdOriginalParentResponses, GetRecycleBinMediaByIdOriginalParentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',
            ...options
        });
    }
    
    public static putRecycleBinMediaByIdRestore<ThrowOnError extends boolean = true>(options: Options<PutRecycleBinMediaByIdRestoreData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutRecycleBinMediaByIdRestoreResponses, PutRecycleBinMediaByIdRestoreErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getRecycleBinMediaChildren<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaChildrenResponses, GetRecycleBinMediaChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/children',
            ...options
        });
    }
    
    public static getRecycleBinMediaReferencedBy<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaReferencedByData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaReferencedByResponses, GetRecycleBinMediaReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/referenced-by',
            ...options
        });
    }
    
    public static getRecycleBinMediaRoot<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaRootResponses, GetRecycleBinMediaRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/root',
            ...options
        });
    }
    
    public static getTreeMediaAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaAncestorsResponses, GetTreeMediaAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/ancestors',
            ...options
        });
    }
    
    public static getTreeMediaChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaChildrenResponses, GetTreeMediaChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/children',
            ...options
        });
    }
    
    public static getTreeMediaRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaRootResponses, GetTreeMediaRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/root',
            ...options
        });
    }
}

export class MemberGroupService {
    public static getItemMemberGroup<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberGroupResponses, GetItemMemberGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-group',
            ...options
        });
    }
    
    public static getMemberGroup<ThrowOnError extends boolean = true>(options?: Options<GetMemberGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberGroupResponses, GetMemberGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group',
            ...options
        });
    }
    
    public static postMemberGroup<ThrowOnError extends boolean = true>(options?: Options<PostMemberGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMemberGroupResponses, PostMemberGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberGroupById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMemberGroupByIdResponses, DeleteMemberGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options
        });
    }
    
    public static getMemberGroupById<ThrowOnError extends boolean = true>(options: Options<GetMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberGroupByIdResponses, GetMemberGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options
        });
    }
    
    public static putMemberGroupById<ThrowOnError extends boolean = true>(options: Options<PutMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMemberGroupByIdResponses, PutMemberGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getTreeMemberGroupRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMemberGroupRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMemberGroupRootResponses, GetTreeMemberGroupRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/member-group/root',
            ...options
        });
    }
}

export class MemberTypeService {
    public static getItemMemberType<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberTypeResponses, GetItemMemberTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-type',
            ...options
        });
    }
    
    public static getItemMemberTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberTypeSearchResponses, GetItemMemberTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-type/search',
            ...options
        });
    }
    
    public static postMemberType<ThrowOnError extends boolean = true>(options?: Options<PostMemberTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMemberTypeResponses, PostMemberTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMemberTypeByIdResponses, DeleteMemberTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options
        });
    }
    
    public static getMemberTypeById<ThrowOnError extends boolean = true>(options: Options<GetMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberTypeByIdResponses, GetMemberTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options
        });
    }
    
    public static putMemberTypeById<ThrowOnError extends boolean = true>(options: Options<PutMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMemberTypeByIdResponses, PutMemberTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMemberTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetMemberTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberTypeByIdCompositionReferencesResponses, GetMemberTypeByIdCompositionReferencesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postMemberTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostMemberTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostMemberTypeByIdCopyResponses, PostMemberTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}/copy',
            ...options
        });
    }
    
    public static postMemberTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostMemberTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMemberTypeAvailableCompositionsResponses, PostMemberTypeAvailableCompositionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMemberTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMemberTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberTypeConfigurationResponses, GetMemberTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/configuration',
            ...options
        });
    }
    
    public static getTreeMemberTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMemberTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMemberTypeRootResponses, GetTreeMemberTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/member-type/root',
            ...options
        });
    }
}

export class MemberService {
    public static getFilterMember<ThrowOnError extends boolean = true>(options?: Options<GetFilterMemberData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterMemberResponses, GetFilterMemberErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/member',
            ...options
        });
    }
    
    public static getItemMember<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberResponses, GetItemMemberErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member',
            ...options
        });
    }
    
    public static getItemMemberSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberSearchResponses, GetItemMemberSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member/search',
            ...options
        });
    }
    
    public static postMember<ThrowOnError extends boolean = true>(options?: Options<PostMemberData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMemberResponses, PostMemberErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteMemberByIdResponses, DeleteMemberByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options
        });
    }
    
    public static getMemberById<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberByIdResponses, GetMemberByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options
        });
    }
    
    public static putMemberById<ThrowOnError extends boolean = true>(options: Options<PutMemberByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMemberByIdResponses, PutMemberByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMemberByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberByIdReferencedByResponses, GetMemberByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/referenced-by',
            ...options
        });
    }
    
    public static getMemberByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberByIdReferencedDescendantsResponses, GetMemberByIdReferencedDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putMemberByIdValidate<ThrowOnError extends boolean = true>(options: Options<PutMemberByIdValidateData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutMemberByIdValidateResponses, PutMemberByIdValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMemberAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetMemberAreReferencedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberAreReferencedResponses, GetMemberAreReferencedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/are-referenced',
            ...options
        });
    }
    
    public static getMemberConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMemberConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberConfigurationResponses, GetMemberConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/configuration',
            ...options
        });
    }
    
    public static postMemberValidate<ThrowOnError extends boolean = true>(options?: Options<PostMemberValidateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMemberValidateResponses, PostMemberValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class ModelsBuilderService {
    public static postModelsBuilderBuild<ThrowOnError extends boolean = true>(options?: Options<PostModelsBuilderBuildData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostModelsBuilderBuildResponses, PostModelsBuilderBuildErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/build',
            ...options
        });
    }
    
    public static getModelsBuilderDashboard<ThrowOnError extends boolean = true>(options?: Options<GetModelsBuilderDashboardData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetModelsBuilderDashboardResponses, GetModelsBuilderDashboardErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/dashboard',
            ...options
        });
    }
    
    public static getModelsBuilderStatus<ThrowOnError extends boolean = true>(options?: Options<GetModelsBuilderStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetModelsBuilderStatusResponses, GetModelsBuilderStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/status',
            ...options
        });
    }
}

export class ObjectTypesService {
    public static getObjectTypes<ThrowOnError extends boolean = true>(options?: Options<GetObjectTypesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetObjectTypesResponses, GetObjectTypesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/object-types',
            ...options
        });
    }
}

export class OEmbedService {
    public static getOembedQuery<ThrowOnError extends boolean = true>(options?: Options<GetOembedQueryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetOembedQueryResponses, GetOembedQueryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/oembed/query',
            ...options
        });
    }
}

export class PackageService {
    public static postPackageByNameRunMigration<ThrowOnError extends boolean = true>(options: Options<PostPackageByNameRunMigrationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostPackageByNameRunMigrationResponses, PostPackageByNameRunMigrationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/{name}/run-migration',
            ...options
        });
    }
    
    public static getPackageConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetPackageConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPackageConfigurationResponses, GetPackageConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/configuration',
            ...options
        });
    }
    
    public static getPackageCreated<ThrowOnError extends boolean = true>(options?: Options<GetPackageCreatedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPackageCreatedResponses, GetPackageCreatedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created',
            ...options
        });
    }
    
    public static postPackageCreated<ThrowOnError extends boolean = true>(options?: Options<PostPackageCreatedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPackageCreatedResponses, PostPackageCreatedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePackageCreatedById<ThrowOnError extends boolean = true>(options: Options<DeletePackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeletePackageCreatedByIdResponses, DeletePackageCreatedByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options
        });
    }
    
    public static getPackageCreatedById<ThrowOnError extends boolean = true>(options: Options<GetPackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPackageCreatedByIdResponses, GetPackageCreatedByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options
        });
    }
    
    public static putPackageCreatedById<ThrowOnError extends boolean = true>(options: Options<PutPackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutPackageCreatedByIdResponses, PutPackageCreatedByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getPackageCreatedByIdDownload<ThrowOnError extends boolean = true>(options: Options<GetPackageCreatedByIdDownloadData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPackageCreatedByIdDownloadResponses, GetPackageCreatedByIdDownloadErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}/download',
            ...options
        });
    }
    
    public static getPackageMigrationStatus<ThrowOnError extends boolean = true>(options?: Options<GetPackageMigrationStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPackageMigrationStatusResponses, GetPackageMigrationStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/migration-status',
            ...options
        });
    }
}

export class PartialViewService {
    public static getItemPartialView<ThrowOnError extends boolean = true>(options?: Options<GetItemPartialViewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemPartialViewResponses, GetItemPartialViewErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/partial-view',
            ...options
        });
    }
    
    public static postPartialView<ThrowOnError extends boolean = true>(options?: Options<PostPartialViewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPartialViewResponses, PostPartialViewErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePartialViewByPath<ThrowOnError extends boolean = true>(options: Options<DeletePartialViewByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeletePartialViewByPathResponses, DeletePartialViewByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options
        });
    }
    
    public static getPartialViewByPath<ThrowOnError extends boolean = true>(options: Options<GetPartialViewByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPartialViewByPathResponses, GetPartialViewByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options
        });
    }
    
    public static putPartialViewByPath<ThrowOnError extends boolean = true>(options: Options<PutPartialViewByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutPartialViewByPathResponses, PutPartialViewByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putPartialViewByPathRename<ThrowOnError extends boolean = true>(options: Options<PutPartialViewByPathRenameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutPartialViewByPathRenameResponses, PutPartialViewByPathRenameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postPartialViewFolder<ThrowOnError extends boolean = true>(options?: Options<PostPartialViewFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPartialViewFolderResponses, PostPartialViewFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePartialViewFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeletePartialViewFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeletePartialViewFolderByPathResponses, DeletePartialViewFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            ...options
        });
    }
    
    public static getPartialViewFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetPartialViewFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPartialViewFolderByPathResponses, GetPartialViewFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            ...options
        });
    }
    
    public static getPartialViewSnippet<ThrowOnError extends boolean = true>(options?: Options<GetPartialViewSnippetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPartialViewSnippetResponses, GetPartialViewSnippetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/snippet',
            ...options
        });
    }
    
    public static getPartialViewSnippetById<ThrowOnError extends boolean = true>(options: Options<GetPartialViewSnippetByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPartialViewSnippetByIdResponses, GetPartialViewSnippetByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',
            ...options
        });
    }
    
    public static getTreePartialViewAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreePartialViewAncestorsResponses, GetTreePartialViewAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',
            ...options
        });
    }
    
    public static getTreePartialViewChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreePartialViewChildrenResponses, GetTreePartialViewChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/children',
            ...options
        });
    }
    
    public static getTreePartialViewRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreePartialViewRootResponses, GetTreePartialViewRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/root',
            ...options
        });
    }
}

export class PreviewService {
    public static deletePreview<ThrowOnError extends boolean = true>(options?: Options<DeletePreviewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeletePreviewResponses, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/preview',
            ...options
        });
    }
    
    public static postPreview<ThrowOnError extends boolean = true>(options?: Options<PostPreviewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPreviewResponses, PostPreviewErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/preview',
            ...options
        });
    }
}

export class ProfilingService {
    public static getProfilingStatus<ThrowOnError extends boolean = true>(options?: Options<GetProfilingStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfilingStatusResponses, GetProfilingStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/profiling/status',
            ...options
        });
    }
    
    public static putProfilingStatus<ThrowOnError extends boolean = true>(options?: Options<PutProfilingStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutProfilingStatusResponses, PutProfilingStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/profiling/status',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class PropertyTypeService {
    public static getPropertyTypeIsUsed<ThrowOnError extends boolean = true>(options?: Options<GetPropertyTypeIsUsedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPropertyTypeIsUsedResponses, GetPropertyTypeIsUsedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/property-type/is-used',
            ...options
        });
    }
}

export class PublishedCacheService {
    public static postPublishedCacheRebuild<ThrowOnError extends boolean = true>(options?: Options<PostPublishedCacheRebuildData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPublishedCacheRebuildResponses, PostPublishedCacheRebuildErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/rebuild',
            ...options
        });
    }
    
    public static getPublishedCacheRebuildStatus<ThrowOnError extends boolean = true>(options?: Options<GetPublishedCacheRebuildStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPublishedCacheRebuildStatusResponses, GetPublishedCacheRebuildStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/rebuild/status',
            ...options
        });
    }
    
    public static postPublishedCacheReload<ThrowOnError extends boolean = true>(options?: Options<PostPublishedCacheReloadData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostPublishedCacheReloadResponses, PostPublishedCacheReloadErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/reload',
            ...options
        });
    }
}

export class RedirectManagementService {
    public static getRedirectManagement<ThrowOnError extends boolean = true>(options?: Options<GetRedirectManagementData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRedirectManagementResponses, GetRedirectManagementErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management',
            ...options
        });
    }
    
    public static deleteRedirectManagementById<ThrowOnError extends boolean = true>(options: Options<DeleteRedirectManagementByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteRedirectManagementByIdResponses, DeleteRedirectManagementByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            ...options
        });
    }
    
    public static getRedirectManagementById<ThrowOnError extends boolean = true>(options: Options<GetRedirectManagementByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRedirectManagementByIdResponses, GetRedirectManagementByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            ...options
        });
    }
    
    public static getRedirectManagementStatus<ThrowOnError extends boolean = true>(options?: Options<GetRedirectManagementStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRedirectManagementStatusResponses, GetRedirectManagementStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/status',
            ...options
        });
    }
    
    public static postRedirectManagementStatus<ThrowOnError extends boolean = true>(options?: Options<PostRedirectManagementStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostRedirectManagementStatusResponses, PostRedirectManagementStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/status',
            ...options
        });
    }
}

export class RelationTypeService {
    public static getItemRelationType<ThrowOnError extends boolean = true>(options?: Options<GetItemRelationTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemRelationTypeResponses, GetItemRelationTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/relation-type',
            ...options
        });
    }
    
    public static getRelationType<ThrowOnError extends boolean = true>(options?: Options<GetRelationTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRelationTypeResponses, GetRelationTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation-type',
            ...options
        });
    }
    
    public static getRelationTypeById<ThrowOnError extends boolean = true>(options: Options<GetRelationTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRelationTypeByIdResponses, GetRelationTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation-type/{id}',
            ...options
        });
    }
}

export class RelationService {
    public static getRelationByRelationTypeId<ThrowOnError extends boolean = true>(options: Options<GetRelationByRelationTypeIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRelationByRelationTypeIdResponses, GetRelationByRelationTypeIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation/type/{id}',
            ...options
        });
    }
}

export class ScriptService {
    public static getItemScript<ThrowOnError extends boolean = true>(options?: Options<GetItemScriptData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemScriptResponses, GetItemScriptErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/script',
            ...options
        });
    }
    
    public static postScript<ThrowOnError extends boolean = true>(options?: Options<PostScriptData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostScriptResponses, PostScriptErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteScriptByPath<ThrowOnError extends boolean = true>(options: Options<DeleteScriptByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteScriptByPathResponses, DeleteScriptByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options
        });
    }
    
    public static getScriptByPath<ThrowOnError extends boolean = true>(options: Options<GetScriptByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetScriptByPathResponses, GetScriptByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options
        });
    }
    
    public static putScriptByPath<ThrowOnError extends boolean = true>(options: Options<PutScriptByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutScriptByPathResponses, PutScriptByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putScriptByPathRename<ThrowOnError extends boolean = true>(options: Options<PutScriptByPathRenameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutScriptByPathRenameResponses, PutScriptByPathRenameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postScriptFolder<ThrowOnError extends boolean = true>(options?: Options<PostScriptFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostScriptFolderResponses, PostScriptFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteScriptFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeleteScriptFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteScriptFolderByPathResponses, DeleteScriptFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder/{path}',
            ...options
        });
    }
    
    public static getScriptFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetScriptFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetScriptFolderByPathResponses, GetScriptFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder/{path}',
            ...options
        });
    }
    
    public static getTreeScriptAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeScriptAncestorsResponses, GetTreeScriptAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/ancestors',
            ...options
        });
    }
    
    public static getTreeScriptChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeScriptChildrenResponses, GetTreeScriptChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/children',
            ...options
        });
    }
    
    public static getTreeScriptRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeScriptRootResponses, GetTreeScriptRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/root',
            ...options
        });
    }
}

export class SearcherService {
    public static getSearcher<ThrowOnError extends boolean = true>(options?: Options<GetSearcherData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSearcherResponses, GetSearcherErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/searcher',
            ...options
        });
    }
    
    public static getSearcherBySearcherNameQuery<ThrowOnError extends boolean = true>(options: Options<GetSearcherBySearcherNameQueryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetSearcherBySearcherNameQueryResponses, GetSearcherBySearcherNameQueryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',
            ...options
        });
    }
}

export class SecurityService {
    public static getSecurityConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetSecurityConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSecurityConfigurationResponses, GetSecurityConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/configuration',
            ...options
        });
    }
    
    public static postSecurityForgotPassword<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordResponses, PostSecurityForgotPasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/forgot-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postSecurityForgotPasswordReset<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordResetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordResetResponses, PostSecurityForgotPasswordResetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/forgot-password/reset',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postSecurityForgotPasswordVerify<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordVerifyData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordVerifyResponses, PostSecurityForgotPasswordVerifyErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/security/forgot-password/verify',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class SegmentService {
    public static getSegment<ThrowOnError extends boolean = true>(options?: Options<GetSegmentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSegmentResponses, GetSegmentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/segment',
            ...options
        });
    }
}

export class ServerService {
    public static getServerConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetServerConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerConfigurationResponses, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/server/configuration',
            ...options
        });
    }
    
    public static getServerInformation<ThrowOnError extends boolean = true>(options?: Options<GetServerInformationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerInformationResponses, GetServerInformationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/information',
            ...options
        });
    }
    
    public static getServerStatus<ThrowOnError extends boolean = true>(options?: Options<GetServerStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerStatusResponses, GetServerStatusErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/server/status',
            ...options
        });
    }
    
    public static getServerTroubleshooting<ThrowOnError extends boolean = true>(options?: Options<GetServerTroubleshootingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerTroubleshootingResponses, GetServerTroubleshootingErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/troubleshooting',
            ...options
        });
    }
    
    public static getServerUpgradeCheck<ThrowOnError extends boolean = true>(options?: Options<GetServerUpgradeCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerUpgradeCheckResponses, GetServerUpgradeCheckErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/upgrade-check',
            ...options
        });
    }
}

export class StaticFileService {
    public static getItemStaticFile<ThrowOnError extends boolean = true>(options?: Options<GetItemStaticFileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemStaticFileResponses, GetItemStaticFileErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/static-file',
            ...options
        });
    }
    
    public static getTreeStaticFileAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStaticFileAncestorsResponses, GetTreeStaticFileAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/ancestors',
            ...options
        });
    }
    
    public static getTreeStaticFileChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStaticFileChildrenResponses, GetTreeStaticFileChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/children',
            ...options
        });
    }
    
    public static getTreeStaticFileRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStaticFileRootResponses, GetTreeStaticFileRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/root',
            ...options
        });
    }
}

export class StylesheetService {
    public static getItemStylesheet<ThrowOnError extends boolean = true>(options?: Options<GetItemStylesheetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemStylesheetResponses, GetItemStylesheetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/stylesheet',
            ...options
        });
    }
    
    public static postStylesheet<ThrowOnError extends boolean = true>(options?: Options<PostStylesheetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostStylesheetResponses, PostStylesheetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<DeleteStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteStylesheetByPathResponses, DeleteStylesheetByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options
        });
    }
    
    public static getStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<GetStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetStylesheetByPathResponses, GetStylesheetByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options
        });
    }
    
    public static putStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<PutStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutStylesheetByPathResponses, PutStylesheetByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putStylesheetByPathRename<ThrowOnError extends boolean = true>(options: Options<PutStylesheetByPathRenameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutStylesheetByPathRenameResponses, PutStylesheetByPathRenameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postStylesheetFolder<ThrowOnError extends boolean = true>(options?: Options<PostStylesheetFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostStylesheetFolderResponses, PostStylesheetFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteStylesheetFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeleteStylesheetFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteStylesheetFolderByPathResponses, DeleteStylesheetFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            ...options
        });
    }
    
    public static getStylesheetFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetStylesheetFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetStylesheetFolderByPathResponses, GetStylesheetFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            ...options
        });
    }
    
    public static getTreeStylesheetAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStylesheetAncestorsResponses, GetTreeStylesheetAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',
            ...options
        });
    }
    
    public static getTreeStylesheetChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStylesheetChildrenResponses, GetTreeStylesheetChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/children',
            ...options
        });
    }
    
    public static getTreeStylesheetRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStylesheetRootResponses, GetTreeStylesheetRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/root',
            ...options
        });
    }
}

export class TagService {
    public static getTag<ThrowOnError extends boolean = true>(options?: Options<GetTagData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTagResponses, GetTagErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tag',
            ...options
        });
    }
}

export class TelemetryService {
    public static getTelemetry<ThrowOnError extends boolean = true>(options?: Options<GetTelemetryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTelemetryResponses, GetTelemetryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry',
            ...options
        });
    }
    
    public static getTelemetryLevel<ThrowOnError extends boolean = true>(options?: Options<GetTelemetryLevelData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTelemetryLevelResponses, GetTelemetryLevelErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry/level',
            ...options
        });
    }
    
    public static postTelemetryLevel<ThrowOnError extends boolean = true>(options?: Options<PostTelemetryLevelData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTelemetryLevelResponses, PostTelemetryLevelErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry/level',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class TemplateService {
    public static getItemTemplate<ThrowOnError extends boolean = true>(options?: Options<GetItemTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemTemplateResponses, GetItemTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/template',
            ...options
        });
    }
    
    public static getItemTemplateSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemTemplateSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemTemplateSearchResponses, GetItemTemplateSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/template/search',
            ...options
        });
    }
    
    public static postTemplate<ThrowOnError extends boolean = true>(options?: Options<PostTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTemplateResponses, PostTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteTemplateById<ThrowOnError extends boolean = true>(options: Options<DeleteTemplateByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteTemplateByIdResponses, DeleteTemplateByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options
        });
    }
    
    public static getTemplateById<ThrowOnError extends boolean = true>(options: Options<GetTemplateByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetTemplateByIdResponses, GetTemplateByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options
        });
    }
    
    public static putTemplateById<ThrowOnError extends boolean = true>(options: Options<PutTemplateByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutTemplateByIdResponses, PutTemplateByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getTemplateConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetTemplateConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTemplateConfigurationResponses, GetTemplateConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/configuration',
            ...options
        });
    }
    
    public static postTemplateQueryExecute<ThrowOnError extends boolean = true>(options?: Options<PostTemplateQueryExecuteData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTemplateQueryExecuteResponses, PostTemplateQueryExecuteErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/query/execute',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTemplateQuerySettings<ThrowOnError extends boolean = true>(options?: Options<GetTemplateQuerySettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTemplateQuerySettingsResponses, GetTemplateQuerySettingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/query/settings',
            ...options
        });
    }
    
    public static getTreeTemplateAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeTemplateAncestorsResponses, GetTreeTemplateAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/ancestors',
            ...options
        });
    }
    
    public static getTreeTemplateChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeTemplateChildrenResponses, GetTreeTemplateChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/children',
            ...options
        });
    }
    
    public static getTreeTemplateRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeTemplateRootResponses, GetTreeTemplateRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/root',
            ...options
        });
    }
}

export class TemporaryFileService {
    public static postTemporaryFile<ThrowOnError extends boolean = true>(options?: Options<PostTemporaryFileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTemporaryFileResponses, PostTemporaryFileErrors, ThrowOnError>({
            ...formDataBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file',
            ...options,
            headers: {
                'Content-Type': null,
                ...options?.headers
            }
        });
    }
    
    public static deleteTemporaryFileById<ThrowOnError extends boolean = true>(options: Options<DeleteTemporaryFileByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteTemporaryFileByIdResponses, DeleteTemporaryFileByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            ...options
        });
    }
    
    public static getTemporaryFileById<ThrowOnError extends boolean = true>(options: Options<GetTemporaryFileByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetTemporaryFileByIdResponses, GetTemporaryFileByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            ...options
        });
    }
    
    public static getTemporaryFileConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetTemporaryFileConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTemporaryFileConfigurationResponses, GetTemporaryFileConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/configuration',
            ...options
        });
    }
}

export class UpgradeService {
    public static postUpgradeAuthorize<ThrowOnError extends boolean = true>(options?: Options<PostUpgradeAuthorizeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUpgradeAuthorizeResponses, PostUpgradeAuthorizeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/upgrade/authorize',
            ...options
        });
    }
    
    public static getUpgradeSettings<ThrowOnError extends boolean = true>(options?: Options<GetUpgradeSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUpgradeSettingsResponses, GetUpgradeSettingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/upgrade/settings',
            ...options
        });
    }
}

export class UserDataService {
    public static getUserData<ThrowOnError extends boolean = true>(options?: Options<GetUserDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserDataResponses, GetUserDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options
        });
    }
    
    public static postUserData<ThrowOnError extends boolean = true>(options?: Options<PostUserDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserDataResponses, PostUserDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putUserData<ThrowOnError extends boolean = true>(options?: Options<PutUserDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<PutUserDataResponses, PutUserDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserDataById<ThrowOnError extends boolean = true>(options: Options<GetUserDataByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserDataByIdResponses, GetUserDataByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data/{id}',
            ...options
        });
    }
}

export class UserGroupService {
    public static getFilterUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetFilterUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterUserGroupResponses, GetFilterUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/user-group',
            ...options
        });
    }
    
    public static getItemUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetItemUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemUserGroupResponses, GetItemUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/user-group',
            ...options
        });
    }
    
    public static deleteUserGroup<ThrowOnError extends boolean = true>(options?: Options<DeleteUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteUserGroupResponses, DeleteUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserGroupResponses, GetUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options
        });
    }
    
    public static postUserGroup<ThrowOnError extends boolean = true>(options?: Options<PostUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserGroupResponses, PostUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserGroupById<ThrowOnError extends boolean = true>(options: Options<DeleteUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserGroupByIdResponses, DeleteUserGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options
        });
    }
    
    public static getUserGroupById<ThrowOnError extends boolean = true>(options: Options<GetUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserGroupByIdResponses, GetUserGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options
        });
    }
    
    public static putUserGroupById<ThrowOnError extends boolean = true>(options: Options<PutUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutUserGroupByIdResponses, PutUserGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteUserGroupByIdUsers<ThrowOnError extends boolean = true>(options: Options<DeleteUserGroupByIdUsersData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserGroupByIdUsersResponses, DeleteUserGroupByIdUsersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postUserGroupByIdUsers<ThrowOnError extends boolean = true>(options: Options<PostUserGroupByIdUsersData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserGroupByIdUsersResponses, PostUserGroupByIdUsersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class UserService {
    public static getFilterUser<ThrowOnError extends boolean = true>(options?: Options<GetFilterUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterUserResponses, GetFilterUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/user',
            ...options
        });
    }
    
    public static getItemUser<ThrowOnError extends boolean = true>(options?: Options<GetItemUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemUserResponses, GetItemUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/user',
            ...options
        });
    }
    
    public static deleteUser<ThrowOnError extends boolean = true>(options?: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUser<ThrowOnError extends boolean = true>(options?: Options<GetUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserResponses, GetUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options
        });
    }
    
    public static postUser<ThrowOnError extends boolean = true>(options?: Options<PostUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserResponses, PostUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserById<ThrowOnError extends boolean = true>(options: Options<DeleteUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserByIdResponses, DeleteUserByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options
        });
    }
    
    public static getUserById<ThrowOnError extends boolean = true>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options
        });
    }
    
    public static putUserById<ThrowOnError extends boolean = true>(options: Options<PutUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutUserByIdResponses, PutUserByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getUserById2Fa<ThrowOnError extends boolean = true>(options: Options<GetUserById2FaData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserById2FaResponses, GetUserById2FaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/2fa',
            ...options
        });
    }
    
    public static deleteUserById2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<DeleteUserById2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserById2FaByProviderNameResponses, DeleteUserById2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',
            ...options
        });
    }
    
    public static getUserByIdCalculateStartNodes<ThrowOnError extends boolean = true>(options: Options<GetUserByIdCalculateStartNodesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdCalculateStartNodesResponses, GetUserByIdCalculateStartNodesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/calculate-start-nodes',
            ...options
        });
    }
    
    public static postUserByIdChangePassword<ThrowOnError extends boolean = true>(options: Options<PostUserByIdChangePasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserByIdChangePasswordResponses, PostUserByIdChangePasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/change-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getUserByIdClientCredentials<ThrowOnError extends boolean = true>(options: Options<GetUserByIdClientCredentialsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdClientCredentialsResponses, GetUserByIdClientCredentialsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            ...options
        });
    }
    
    public static postUserByIdClientCredentials<ThrowOnError extends boolean = true>(options: Options<PostUserByIdClientCredentialsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserByIdClientCredentialsResponses, PostUserByIdClientCredentialsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteUserByIdClientCredentialsByClientId<ThrowOnError extends boolean = true>(options: Options<DeleteUserByIdClientCredentialsByClientIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserByIdClientCredentialsByClientIdResponses, DeleteUserByIdClientCredentialsByClientIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials/{clientId}',
            ...options
        });
    }
    
    public static postUserByIdResetPassword<ThrowOnError extends boolean = true>(options: Options<PostUserByIdResetPasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserByIdResetPasswordResponses, PostUserByIdResetPasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/reset-password',
            ...options
        });
    }
    
    public static deleteUserAvatarById<ThrowOnError extends boolean = true>(options: Options<DeleteUserAvatarByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserAvatarByIdResponses, DeleteUserAvatarByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            ...options
        });
    }
    
    public static postUserAvatarById<ThrowOnError extends boolean = true>(options: Options<PostUserAvatarByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserAvatarByIdResponses, PostUserAvatarByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getUserConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetUserConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserConfigurationResponses, GetUserConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/configuration',
            ...options
        });
    }
    
    public static getUserCurrent<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentResponses, GetUserCurrentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current',
            ...options
        });
    }
    
    public static getUserCurrent2Fa<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrent2FaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrent2FaResponses, GetUserCurrent2FaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa',
            ...options
        });
    }
    
    public static deleteUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<DeleteUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteUserCurrent2FaByProviderNameResponses, DeleteUserCurrent2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options
        });
    }
    
    public static getUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<GetUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserCurrent2FaByProviderNameResponses, GetUserCurrent2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options
        });
    }
    
    public static postUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<PostUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserCurrent2FaByProviderNameResponses, PostUserCurrent2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postUserCurrentAvatar<ThrowOnError extends boolean = true>(options?: Options<PostUserCurrentAvatarData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserCurrentAvatarResponses, PostUserCurrentAvatarErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/avatar',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserCurrentChangePassword<ThrowOnError extends boolean = true>(options?: Options<PostUserCurrentChangePasswordData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserCurrentChangePasswordResponses, PostUserCurrentChangePasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/change-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserCurrentConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentConfigurationResponses, GetUserCurrentConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/configuration',
            ...options
        });
    }
    
    public static getUserCurrentLoginProviders<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentLoginProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentLoginProvidersResponses, GetUserCurrentLoginProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/login-providers',
            ...options
        });
    }
    
    public static getUserCurrentPermissions<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsResponses, GetUserCurrentPermissionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions',
            ...options
        });
    }
    
    public static getUserCurrentPermissionsDocument<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsDocumentResponses, GetUserCurrentPermissionsDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions/document',
            ...options
        });
    }
    
    public static getUserCurrentPermissionsMedia<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsMediaResponses, GetUserCurrentPermissionsMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions/media',
            ...options
        });
    }
    
    public static postUserDisable<ThrowOnError extends boolean = true>(options?: Options<PostUserDisableData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserDisableResponses, PostUserDisableErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/disable',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserEnable<ThrowOnError extends boolean = true>(options?: Options<PostUserEnableData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserEnableResponses, PostUserEnableErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/enable',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInvite<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserInviteResponses, PostUserInviteErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/invite',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteCreatePassword<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteCreatePasswordData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserInviteCreatePasswordResponses, PostUserInviteCreatePasswordErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/user/invite/create-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteResend<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteResendData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserInviteResendResponses, PostUserInviteResendErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/invite/resend',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteVerify<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteVerifyData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserInviteVerifyResponses, PostUserInviteVerifyErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/user/invite/verify',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserSetUserGroups<ThrowOnError extends boolean = true>(options?: Options<PostUserSetUserGroupsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserSetUserGroupsResponses, PostUserSetUserGroupsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/set-user-groups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserUnlock<ThrowOnError extends boolean = true>(options?: Options<PostUserUnlockData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserUnlockResponses, PostUserUnlockErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/unlock',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class WebhookService {
    public static getItemWebhook<ThrowOnError extends boolean = true>(options?: Options<GetItemWebhookData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemWebhookResponses, GetItemWebhookErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/webhook',
            ...options
        });
    }
    
    public static getWebhook<ThrowOnError extends boolean = true>(options?: Options<GetWebhookData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetWebhookResponses, GetWebhookErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook',
            ...options
        });
    }
    
    public static postWebhook<ThrowOnError extends boolean = true>(options?: Options<PostWebhookData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostWebhookResponses, PostWebhookErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteWebhookById<ThrowOnError extends boolean = true>(options: Options<DeleteWebhookByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteWebhookByIdResponses, DeleteWebhookByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options
        });
    }
    
    public static getWebhookById<ThrowOnError extends boolean = true>(options: Options<GetWebhookByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetWebhookByIdResponses, GetWebhookByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options
        });
    }
    
    public static putWebhookById<ThrowOnError extends boolean = true>(options: Options<PutWebhookByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutWebhookByIdResponses, PutWebhookByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getWebhookByIdLogs<ThrowOnError extends boolean = true>(options: Options<GetWebhookByIdLogsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetWebhookByIdLogsResponses, GetWebhookByIdLogsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}/logs',
            ...options
        });
    }
    
    public static getWebhookEvents<ThrowOnError extends boolean = true>(options?: Options<GetWebhookEventsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetWebhookEventsResponses, GetWebhookEventsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/events',
            ...options
        });
    }
    
    public static getWebhookLogs<ThrowOnError extends boolean = true>(options?: Options<GetWebhookLogsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetWebhookLogsResponses, GetWebhookLogsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/logs',
            ...options
        });
    }
}