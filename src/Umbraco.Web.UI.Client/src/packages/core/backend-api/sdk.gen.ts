// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteDataTypeByIdData, DeleteDataTypeByIdErrors, DeleteDataTypeByIdResponses, DeleteDataTypeFolderByIdData, DeleteDataTypeFolderByIdErrors, DeleteDataTypeFolderByIdResponses, DeleteDictionaryByIdData, DeleteDictionaryByIdErrors, DeleteDictionaryByIdResponses, DeleteDocumentBlueprintByIdData, DeleteDocumentBlueprintByIdErrors, DeleteDocumentBlueprintByIdResponses, DeleteDocumentBlueprintFolderByIdData, DeleteDocumentBlueprintFolderByIdErrors, DeleteDocumentBlueprintFolderByIdResponses, DeleteDocumentByIdData, DeleteDocumentByIdErrors, DeleteDocumentByIdPublicAccessData, DeleteDocumentByIdPublicAccessErrors, DeleteDocumentByIdPublicAccessResponses, DeleteDocumentByIdResponses, DeleteDocumentTypeByIdData, DeleteDocumentTypeByIdErrors, DeleteDocumentTypeByIdResponses, DeleteDocumentTypeFolderByIdData, DeleteDocumentTypeFolderByIdErrors, DeleteDocumentTypeFolderByIdResponses, DeleteLanguageByIsoCodeData, DeleteLanguageByIsoCodeErrors, DeleteLanguageByIsoCodeResponses, DeleteLogViewerSavedSearchByNameData, DeleteLogViewerSavedSearchByNameErrors, DeleteLogViewerSavedSearchByNameResponses, DeleteMediaByIdData, DeleteMediaByIdErrors, DeleteMediaByIdResponses, DeleteMediaTypeByIdData, DeleteMediaTypeByIdErrors, DeleteMediaTypeByIdResponses, DeleteMediaTypeFolderByIdData, DeleteMediaTypeFolderByIdErrors, DeleteMediaTypeFolderByIdResponses, DeleteMemberByIdData, DeleteMemberByIdErrors, DeleteMemberByIdResponses, DeleteMemberGroupByIdData, DeleteMemberGroupByIdErrors, DeleteMemberGroupByIdResponses, DeleteMemberTypeByIdData, DeleteMemberTypeByIdErrors, DeleteMemberTypeByIdResponses, DeletePackageCreatedByIdData, DeletePackageCreatedByIdErrors, DeletePackageCreatedByIdResponses, DeletePartialViewByPathData, DeletePartialViewByPathErrors, DeletePartialViewByPathResponses, DeletePartialViewFolderByPathData, DeletePartialViewFolderByPathErrors, DeletePartialViewFolderByPathResponses, DeletePreviewData, DeletePreviewResponses, DeleteRecycleBinDocumentByIdData, DeleteRecycleBinDocumentByIdErrors, DeleteRecycleBinDocumentByIdResponses, DeleteRecycleBinDocumentData, DeleteRecycleBinDocumentErrors, DeleteRecycleBinDocumentResponses, DeleteRecycleBinMediaByIdData, DeleteRecycleBinMediaByIdErrors, DeleteRecycleBinMediaByIdResponses, DeleteRecycleBinMediaData, DeleteRecycleBinMediaErrors, DeleteRecycleBinMediaResponses, DeleteRedirectManagementByIdData, DeleteRedirectManagementByIdErrors, DeleteRedirectManagementByIdResponses, DeleteScriptByPathData, DeleteScriptByPathErrors, DeleteScriptByPathResponses, DeleteScriptFolderByPathData, DeleteScriptFolderByPathErrors, DeleteScriptFolderByPathResponses, DeleteStylesheetByPathData, DeleteStylesheetByPathErrors, DeleteStylesheetByPathResponses, DeleteStylesheetFolderByPathData, DeleteStylesheetFolderByPathErrors, DeleteStylesheetFolderByPathResponses, DeleteTemplateByIdData, DeleteTemplateByIdErrors, DeleteTemplateByIdResponses, DeleteTemporaryFileByIdData, DeleteTemporaryFileByIdErrors, DeleteTemporaryFileByIdResponses, DeleteUserAvatarByIdData, DeleteUserAvatarByIdErrors, DeleteUserAvatarByIdResponses, DeleteUserById2FaByProviderNameData, DeleteUserById2FaByProviderNameErrors, DeleteUserById2FaByProviderNameResponses, DeleteUserByIdClientCredentialsByClientIdData, DeleteUserByIdClientCredentialsByClientIdErrors, DeleteUserByIdClientCredentialsByClientIdResponses, DeleteUserByIdData, DeleteUserByIdErrors, DeleteUserByIdResponses, DeleteUserCurrent2FaByProviderNameData, DeleteUserCurrent2FaByProviderNameErrors, DeleteUserCurrent2FaByProviderNameResponses, DeleteUserData, DeleteUserDataByIdData, DeleteUserDataByIdErrors, DeleteUserDataByIdResponses, DeleteUserErrors, DeleteUserGroupByIdData, DeleteUserGroupByIdErrors, DeleteUserGroupByIdResponses, DeleteUserGroupByIdUsersData, DeleteUserGroupByIdUsersErrors, DeleteUserGroupByIdUsersResponses, DeleteUserGroupData, DeleteUserGroupErrors, DeleteUserGroupResponses, DeleteUserResponses, DeleteWebhookByIdData, DeleteWebhookByIdErrors, DeleteWebhookByIdResponses, GetCollectionDocumentByIdData, GetCollectionDocumentByIdErrors, GetCollectionDocumentByIdResponses, GetCollectionMediaData, GetCollectionMediaErrors, GetCollectionMediaResponses, GetCultureData, GetCultureErrors, GetCultureResponses, GetDataTypeByIdData, GetDataTypeByIdErrors, GetDataTypeByIdIsUsedData, GetDataTypeByIdIsUsedErrors, GetDataTypeByIdIsUsedResponses, GetDataTypeByIdReferencedByData, GetDataTypeByIdReferencedByErrors, GetDataTypeByIdReferencedByResponses, GetDataTypeByIdResponses, GetDataTypeConfigurationData, GetDataTypeConfigurationErrors, GetDataTypeConfigurationResponses, GetDataTypeFolderByIdData, GetDataTypeFolderByIdErrors, GetDataTypeFolderByIdResponses, GetDictionaryByIdData, GetDictionaryByIdErrors, GetDictionaryByIdExportData, GetDictionaryByIdExportErrors, GetDictionaryByIdExportResponses, GetDictionaryByIdResponses, GetDictionaryData, GetDictionaryErrors, GetDictionaryResponses, GetDocumentAreReferencedData, GetDocumentAreReferencedErrors, GetDocumentAreReferencedResponses, GetDocumentBlueprintByIdData, GetDocumentBlueprintByIdErrors, GetDocumentBlueprintByIdResponses, GetDocumentBlueprintByIdScaffoldData, GetDocumentBlueprintByIdScaffoldErrors, GetDocumentBlueprintByIdScaffoldResponses, GetDocumentBlueprintFolderByIdData, GetDocumentBlueprintFolderByIdErrors, GetDocumentBlueprintFolderByIdResponses, GetDocumentByIdAuditLogData, GetDocumentByIdAuditLogErrors, GetDocumentByIdAuditLogResponses, GetDocumentByIdAvailableSegmentOptionsData, GetDocumentByIdAvailableSegmentOptionsErrors, GetDocumentByIdAvailableSegmentOptionsResponses, GetDocumentByIdData, GetDocumentByIdDomainsData, GetDocumentByIdDomainsErrors, GetDocumentByIdDomainsResponses, GetDocumentByIdErrors, GetDocumentByIdNotificationsData, GetDocumentByIdNotificationsErrors, GetDocumentByIdNotificationsResponses, GetDocumentByIdPublicAccessData, GetDocumentByIdPublicAccessErrors, GetDocumentByIdPublicAccessResponses, GetDocumentByIdPublishedData, GetDocumentByIdPublishedErrors, GetDocumentByIdPublishedResponses, GetDocumentByIdPublishWithDescendantsResultByTaskIdData, GetDocumentByIdPublishWithDescendantsResultByTaskIdErrors, GetDocumentByIdPublishWithDescendantsResultByTaskIdResponses, GetDocumentByIdReferencedByData, GetDocumentByIdReferencedByErrors, GetDocumentByIdReferencedByResponses, GetDocumentByIdReferencedDescendantsData, GetDocumentByIdReferencedDescendantsErrors, GetDocumentByIdReferencedDescendantsResponses, GetDocumentByIdResponses, GetDocumentConfigurationData, GetDocumentConfigurationErrors, GetDocumentConfigurationResponses, GetDocumentTypeAllowedAtRootData, GetDocumentTypeAllowedAtRootErrors, GetDocumentTypeAllowedAtRootResponses, GetDocumentTypeByIdAllowedChildrenData, GetDocumentTypeByIdAllowedChildrenErrors, GetDocumentTypeByIdAllowedChildrenResponses, GetDocumentTypeByIdBlueprintData, GetDocumentTypeByIdBlueprintErrors, GetDocumentTypeByIdBlueprintResponses, GetDocumentTypeByIdCompositionReferencesData, GetDocumentTypeByIdCompositionReferencesErrors, GetDocumentTypeByIdCompositionReferencesResponses, GetDocumentTypeByIdData, GetDocumentTypeByIdErrors, GetDocumentTypeByIdExportData, GetDocumentTypeByIdExportErrors, GetDocumentTypeByIdExportResponses, GetDocumentTypeByIdResponses, GetDocumentTypeConfigurationData, GetDocumentTypeConfigurationErrors, GetDocumentTypeConfigurationResponses, GetDocumentTypeFolderByIdData, GetDocumentTypeFolderByIdErrors, GetDocumentTypeFolderByIdResponses, GetDocumentUrlsData, GetDocumentUrlsErrors, GetDocumentUrlsResponses, GetDocumentVersionByIdData, GetDocumentVersionByIdErrors, GetDocumentVersionByIdResponses, GetDocumentVersionData, GetDocumentVersionErrors, GetDocumentVersionResponses, GetDynamicRootStepsData, GetDynamicRootStepsErrors, GetDynamicRootStepsResponses, GetFilterDataTypeData, GetFilterDataTypeErrors, GetFilterDataTypeResponses, GetFilterMemberData, GetFilterMemberErrors, GetFilterMemberResponses, GetFilterUserData, GetFilterUserErrors, GetFilterUserGroupData, GetFilterUserGroupErrors, GetFilterUserGroupResponses, GetFilterUserResponses, GetHealthCheckGroupByNameData, GetHealthCheckGroupByNameErrors, GetHealthCheckGroupByNameResponses, GetHealthCheckGroupData, GetHealthCheckGroupErrors, GetHealthCheckGroupResponses, GetHelpData, GetHelpErrors, GetHelpResponses, GetImagingResizeUrlsData, GetImagingResizeUrlsErrors, GetImagingResizeUrlsResponses, GetImportAnalyzeData, GetImportAnalyzeErrors, GetImportAnalyzeResponses, GetIndexerByIndexNameData, GetIndexerByIndexNameErrors, GetIndexerByIndexNameResponses, GetIndexerData, GetIndexerErrors, GetIndexerResponses, GetInstallSettingsData, GetInstallSettingsErrors, GetInstallSettingsResponses, GetItemDataTypeData, GetItemDataTypeErrors, GetItemDataTypeResponses, GetItemDataTypeSearchData, GetItemDataTypeSearchErrors, GetItemDataTypeSearchResponses, GetItemDictionaryData, GetItemDictionaryErrors, GetItemDictionaryResponses, GetItemDocumentBlueprintData, GetItemDocumentBlueprintErrors, GetItemDocumentBlueprintResponses, GetItemDocumentData, GetItemDocumentErrors, GetItemDocumentResponses, GetItemDocumentSearchData, GetItemDocumentSearchErrors, GetItemDocumentSearchResponses, GetItemDocumentTypeData, GetItemDocumentTypeErrors, GetItemDocumentTypeResponses, GetItemDocumentTypeSearchData, GetItemDocumentTypeSearchErrors, GetItemDocumentTypeSearchResponses, GetItemLanguageData, GetItemLanguageDefaultData, GetItemLanguageDefaultErrors, GetItemLanguageDefaultResponses, GetItemLanguageErrors, GetItemLanguageResponses, GetItemMediaData, GetItemMediaErrors, GetItemMediaResponses, GetItemMediaSearchData, GetItemMediaSearchErrors, GetItemMediaSearchResponses, GetItemMediaTypeAllowedData, GetItemMediaTypeAllowedErrors, GetItemMediaTypeAllowedResponses, GetItemMediaTypeData, GetItemMediaTypeErrors, GetItemMediaTypeFoldersData, GetItemMediaTypeFoldersErrors, GetItemMediaTypeFoldersResponses, GetItemMediaTypeResponses, GetItemMediaTypeSearchData, GetItemMediaTypeSearchErrors, GetItemMediaTypeSearchResponses, GetItemMemberData, GetItemMemberErrors, GetItemMemberGroupData, GetItemMemberGroupErrors, GetItemMemberGroupResponses, GetItemMemberResponses, GetItemMemberSearchData, GetItemMemberSearchErrors, GetItemMemberSearchResponses, GetItemMemberTypeData, GetItemMemberTypeErrors, GetItemMemberTypeResponses, GetItemMemberTypeSearchData, GetItemMemberTypeSearchErrors, GetItemMemberTypeSearchResponses, GetItemPartialViewData, GetItemPartialViewErrors, GetItemPartialViewResponses, GetItemRelationTypeData, GetItemRelationTypeErrors, GetItemRelationTypeResponses, GetItemScriptData, GetItemScriptErrors, GetItemScriptResponses, GetItemStaticFileData, GetItemStaticFileErrors, GetItemStaticFileResponses, GetItemStylesheetData, GetItemStylesheetErrors, GetItemStylesheetResponses, GetItemTemplateData, GetItemTemplateErrors, GetItemTemplateResponses, GetItemTemplateSearchData, GetItemTemplateSearchErrors, GetItemTemplateSearchResponses, GetItemUserData, GetItemUserErrors, GetItemUserGroupData, GetItemUserGroupErrors, GetItemUserGroupResponses, GetItemUserResponses, GetItemWebhookData, GetItemWebhookErrors, GetItemWebhookResponses, GetLanguageByIsoCodeData, GetLanguageByIsoCodeErrors, GetLanguageByIsoCodeResponses, GetLanguageData, GetLanguageErrors, GetLanguageResponses, GetLogViewerLevelCountData, GetLogViewerLevelCountErrors, GetLogViewerLevelCountResponses, GetLogViewerLevelData, GetLogViewerLevelErrors, GetLogViewerLevelResponses, GetLogViewerLogData, GetLogViewerLogErrors, GetLogViewerLogResponses, GetLogViewerMessageTemplateData, GetLogViewerMessageTemplateErrors, GetLogViewerMessageTemplateResponses, GetLogViewerSavedSearchByNameData, GetLogViewerSavedSearchByNameErrors, GetLogViewerSavedSearchByNameResponses, GetLogViewerSavedSearchData, GetLogViewerSavedSearchErrors, GetLogViewerSavedSearchResponses, GetLogViewerValidateLogsSizeData, GetLogViewerValidateLogsSizeErrors, GetLogViewerValidateLogsSizeResponses, GetManifestManifestData, GetManifestManifestErrors, GetManifestManifestPrivateData, GetManifestManifestPrivateErrors, GetManifestManifestPrivateResponses, GetManifestManifestPublicData, GetManifestManifestPublicResponses, GetManifestManifestResponses, GetMediaAreReferencedData, GetMediaAreReferencedErrors, GetMediaAreReferencedResponses, GetMediaByIdAuditLogData, GetMediaByIdAuditLogErrors, GetMediaByIdAuditLogResponses, GetMediaByIdData, GetMediaByIdErrors, GetMediaByIdReferencedByData, GetMediaByIdReferencedByErrors, GetMediaByIdReferencedByResponses, GetMediaByIdReferencedDescendantsData, GetMediaByIdReferencedDescendantsErrors, GetMediaByIdReferencedDescendantsResponses, GetMediaByIdResponses, GetMediaConfigurationData, GetMediaConfigurationErrors, GetMediaConfigurationResponses, GetMediaTypeAllowedAtRootData, GetMediaTypeAllowedAtRootErrors, GetMediaTypeAllowedAtRootResponses, GetMediaTypeByIdAllowedChildrenData, GetMediaTypeByIdAllowedChildrenErrors, GetMediaTypeByIdAllowedChildrenResponses, GetMediaTypeByIdCompositionReferencesData, GetMediaTypeByIdCompositionReferencesErrors, GetMediaTypeByIdCompositionReferencesResponses, GetMediaTypeByIdData, GetMediaTypeByIdErrors, GetMediaTypeByIdExportData, GetMediaTypeByIdExportErrors, GetMediaTypeByIdExportResponses, GetMediaTypeByIdResponses, GetMediaTypeConfigurationData, GetMediaTypeConfigurationErrors, GetMediaTypeConfigurationResponses, GetMediaTypeFolderByIdData, GetMediaTypeFolderByIdErrors, GetMediaTypeFolderByIdResponses, GetMediaUrlsData, GetMediaUrlsErrors, GetMediaUrlsResponses, GetMemberAreReferencedData, GetMemberAreReferencedErrors, GetMemberAreReferencedResponses, GetMemberByIdData, GetMemberByIdErrors, GetMemberByIdReferencedByData, GetMemberByIdReferencedByErrors, GetMemberByIdReferencedByResponses, GetMemberByIdReferencedDescendantsData, GetMemberByIdReferencedDescendantsErrors, GetMemberByIdReferencedDescendantsResponses, GetMemberByIdResponses, GetMemberConfigurationData, GetMemberConfigurationErrors, GetMemberConfigurationResponses, GetMemberGroupByIdData, GetMemberGroupByIdErrors, GetMemberGroupByIdResponses, GetMemberGroupData, GetMemberGroupErrors, GetMemberGroupResponses, GetMemberTypeByIdCompositionReferencesData, GetMemberTypeByIdCompositionReferencesErrors, GetMemberTypeByIdCompositionReferencesResponses, GetMemberTypeByIdData, GetMemberTypeByIdErrors, GetMemberTypeByIdResponses, GetMemberTypeConfigurationData, GetMemberTypeConfigurationErrors, GetMemberTypeConfigurationResponses, GetModelsBuilderDashboardData, GetModelsBuilderDashboardErrors, GetModelsBuilderDashboardResponses, GetModelsBuilderStatusData, GetModelsBuilderStatusErrors, GetModelsBuilderStatusResponses, GetObjectTypesData, GetObjectTypesErrors, GetObjectTypesResponses, GetOembedQueryData, GetOembedQueryErrors, GetOembedQueryResponses, GetPackageConfigurationData, GetPackageConfigurationErrors, GetPackageConfigurationResponses, GetPackageCreatedByIdData, GetPackageCreatedByIdDownloadData, GetPackageCreatedByIdDownloadErrors, GetPackageCreatedByIdDownloadResponses, GetPackageCreatedByIdErrors, GetPackageCreatedByIdResponses, GetPackageCreatedData, GetPackageCreatedErrors, GetPackageCreatedResponses, GetPackageMigrationStatusData, GetPackageMigrationStatusErrors, GetPackageMigrationStatusResponses, GetPartialViewByPathData, GetPartialViewByPathErrors, GetPartialViewByPathResponses, GetPartialViewFolderByPathData, GetPartialViewFolderByPathErrors, GetPartialViewFolderByPathResponses, GetPartialViewSnippetByIdData, GetPartialViewSnippetByIdErrors, GetPartialViewSnippetByIdResponses, GetPartialViewSnippetData, GetPartialViewSnippetErrors, GetPartialViewSnippetResponses, GetProfilingStatusData, GetProfilingStatusErrors, GetProfilingStatusResponses, GetPropertyTypeIsUsedData, GetPropertyTypeIsUsedErrors, GetPropertyTypeIsUsedResponses, GetPublishedCacheRebuildStatusData, GetPublishedCacheRebuildStatusErrors, GetPublishedCacheRebuildStatusResponses, GetRecycleBinDocumentByIdOriginalParentData, GetRecycleBinDocumentByIdOriginalParentErrors, GetRecycleBinDocumentByIdOriginalParentResponses, GetRecycleBinDocumentChildrenData, GetRecycleBinDocumentChildrenErrors, GetRecycleBinDocumentChildrenResponses, GetRecycleBinDocumentReferencedByData, GetRecycleBinDocumentReferencedByErrors, GetRecycleBinDocumentReferencedByResponses, GetRecycleBinDocumentRootData, GetRecycleBinDocumentRootErrors, GetRecycleBinDocumentRootResponses, GetRecycleBinDocumentSiblingsData, GetRecycleBinDocumentSiblingsErrors, GetRecycleBinDocumentSiblingsResponses, GetRecycleBinMediaByIdOriginalParentData, GetRecycleBinMediaByIdOriginalParentErrors, GetRecycleBinMediaByIdOriginalParentResponses, GetRecycleBinMediaChildrenData, GetRecycleBinMediaChildrenErrors, GetRecycleBinMediaChildrenResponses, GetRecycleBinMediaReferencedByData, GetRecycleBinMediaReferencedByErrors, GetRecycleBinMediaReferencedByResponses, GetRecycleBinMediaRootData, GetRecycleBinMediaRootErrors, GetRecycleBinMediaRootResponses, GetRecycleBinMediaSiblingsData, GetRecycleBinMediaSiblingsErrors, GetRecycleBinMediaSiblingsResponses, GetRedirectManagementByIdData, GetRedirectManagementByIdErrors, GetRedirectManagementByIdResponses, GetRedirectManagementData, GetRedirectManagementErrors, GetRedirectManagementResponses, GetRedirectManagementStatusData, GetRedirectManagementStatusErrors, GetRedirectManagementStatusResponses, GetRelationByRelationTypeIdData, GetRelationByRelationTypeIdErrors, GetRelationByRelationTypeIdResponses, GetRelationTypeByIdData, GetRelationTypeByIdErrors, GetRelationTypeByIdResponses, GetRelationTypeData, GetRelationTypeErrors, GetRelationTypeResponses, GetScriptByPathData, GetScriptByPathErrors, GetScriptByPathResponses, GetScriptFolderByPathData, GetScriptFolderByPathErrors, GetScriptFolderByPathResponses, GetSearcherBySearcherNameQueryData, GetSearcherBySearcherNameQueryErrors, GetSearcherBySearcherNameQueryResponses, GetSearcherData, GetSearcherErrors, GetSearcherResponses, GetSecurityConfigurationData, GetSecurityConfigurationErrors, GetSecurityConfigurationResponses, GetSegmentData, GetSegmentErrors, GetSegmentResponses, GetServerConfigurationData, GetServerConfigurationResponses, GetServerInformationData, GetServerInformationErrors, GetServerInformationResponses, GetServerStatusData, GetServerStatusErrors, GetServerStatusResponses, GetServerTroubleshootingData, GetServerTroubleshootingErrors, GetServerTroubleshootingResponses, GetServerUpgradeCheckData, GetServerUpgradeCheckErrors, GetServerUpgradeCheckResponses, GetStylesheetByPathData, GetStylesheetByPathErrors, GetStylesheetByPathResponses, GetStylesheetFolderByPathData, GetStylesheetFolderByPathErrors, GetStylesheetFolderByPathResponses, GetTagData, GetTagErrors, GetTagResponses, GetTelemetryData, GetTelemetryErrors, GetTelemetryLevelData, GetTelemetryLevelErrors, GetTelemetryLevelResponses, GetTelemetryResponses, GetTemplateByIdData, GetTemplateByIdErrors, GetTemplateByIdResponses, GetTemplateConfigurationData, GetTemplateConfigurationErrors, GetTemplateConfigurationResponses, GetTemplateQuerySettingsData, GetTemplateQuerySettingsErrors, GetTemplateQuerySettingsResponses, GetTemporaryFileByIdData, GetTemporaryFileByIdErrors, GetTemporaryFileByIdResponses, GetTemporaryFileConfigurationData, GetTemporaryFileConfigurationErrors, GetTemporaryFileConfigurationResponses, GetTreeDataTypeAncestorsData, GetTreeDataTypeAncestorsErrors, GetTreeDataTypeAncestorsResponses, GetTreeDataTypeChildrenData, GetTreeDataTypeChildrenErrors, GetTreeDataTypeChildrenResponses, GetTreeDataTypeRootData, GetTreeDataTypeRootErrors, GetTreeDataTypeRootResponses, GetTreeDataTypeSiblingsData, GetTreeDataTypeSiblingsErrors, GetTreeDataTypeSiblingsResponses, GetTreeDictionaryAncestorsData, GetTreeDictionaryAncestorsErrors, GetTreeDictionaryAncestorsResponses, GetTreeDictionaryChildrenData, GetTreeDictionaryChildrenErrors, GetTreeDictionaryChildrenResponses, GetTreeDictionaryRootData, GetTreeDictionaryRootErrors, GetTreeDictionaryRootResponses, GetTreeDocumentAncestorsData, GetTreeDocumentAncestorsErrors, GetTreeDocumentAncestorsResponses, GetTreeDocumentBlueprintAncestorsData, GetTreeDocumentBlueprintAncestorsErrors, GetTreeDocumentBlueprintAncestorsResponses, GetTreeDocumentBlueprintChildrenData, GetTreeDocumentBlueprintChildrenErrors, GetTreeDocumentBlueprintChildrenResponses, GetTreeDocumentBlueprintRootData, GetTreeDocumentBlueprintRootErrors, GetTreeDocumentBlueprintRootResponses, GetTreeDocumentBlueprintSiblingsData, GetTreeDocumentBlueprintSiblingsErrors, GetTreeDocumentBlueprintSiblingsResponses, GetTreeDocumentChildrenData, GetTreeDocumentChildrenErrors, GetTreeDocumentChildrenResponses, GetTreeDocumentRootData, GetTreeDocumentRootErrors, GetTreeDocumentRootResponses, GetTreeDocumentSiblingsData, GetTreeDocumentSiblingsErrors, GetTreeDocumentSiblingsResponses, GetTreeDocumentTypeAncestorsData, GetTreeDocumentTypeAncestorsErrors, GetTreeDocumentTypeAncestorsResponses, GetTreeDocumentTypeChildrenData, GetTreeDocumentTypeChildrenErrors, GetTreeDocumentTypeChildrenResponses, GetTreeDocumentTypeRootData, GetTreeDocumentTypeRootErrors, GetTreeDocumentTypeRootResponses, GetTreeDocumentTypeSiblingsData, GetTreeDocumentTypeSiblingsErrors, GetTreeDocumentTypeSiblingsResponses, GetTreeMediaAncestorsData, GetTreeMediaAncestorsErrors, GetTreeMediaAncestorsResponses, GetTreeMediaChildrenData, GetTreeMediaChildrenErrors, GetTreeMediaChildrenResponses, GetTreeMediaRootData, GetTreeMediaRootErrors, GetTreeMediaRootResponses, GetTreeMediaSiblingsData, GetTreeMediaSiblingsErrors, GetTreeMediaSiblingsResponses, GetTreeMediaTypeAncestorsData, GetTreeMediaTypeAncestorsErrors, GetTreeMediaTypeAncestorsResponses, GetTreeMediaTypeChildrenData, GetTreeMediaTypeChildrenErrors, GetTreeMediaTypeChildrenResponses, GetTreeMediaTypeRootData, GetTreeMediaTypeRootErrors, GetTreeMediaTypeRootResponses, GetTreeMediaTypeSiblingsData, GetTreeMediaTypeSiblingsErrors, GetTreeMediaTypeSiblingsResponses, GetTreeMemberGroupRootData, GetTreeMemberGroupRootErrors, GetTreeMemberGroupRootResponses, GetTreeMemberTypeRootData, GetTreeMemberTypeRootErrors, GetTreeMemberTypeRootResponses, GetTreeMemberTypeSiblingsData, GetTreeMemberTypeSiblingsErrors, GetTreeMemberTypeSiblingsResponses, GetTreePartialViewAncestorsData, GetTreePartialViewAncestorsErrors, GetTreePartialViewAncestorsResponses, GetTreePartialViewChildrenData, GetTreePartialViewChildrenErrors, GetTreePartialViewChildrenResponses, GetTreePartialViewRootData, GetTreePartialViewRootErrors, GetTreePartialViewRootResponses, GetTreePartialViewSiblingsData, GetTreePartialViewSiblingsErrors, GetTreePartialViewSiblingsResponses, GetTreeScriptAncestorsData, GetTreeScriptAncestorsErrors, GetTreeScriptAncestorsResponses, GetTreeScriptChildrenData, GetTreeScriptChildrenErrors, GetTreeScriptChildrenResponses, GetTreeScriptRootData, GetTreeScriptRootErrors, GetTreeScriptRootResponses, GetTreeScriptSiblingsData, GetTreeScriptSiblingsErrors, GetTreeScriptSiblingsResponses, GetTreeStaticFileAncestorsData, GetTreeStaticFileAncestorsErrors, GetTreeStaticFileAncestorsResponses, GetTreeStaticFileChildrenData, GetTreeStaticFileChildrenErrors, GetTreeStaticFileChildrenResponses, GetTreeStaticFileRootData, GetTreeStaticFileRootErrors, GetTreeStaticFileRootResponses, GetTreeStylesheetAncestorsData, GetTreeStylesheetAncestorsErrors, GetTreeStylesheetAncestorsResponses, GetTreeStylesheetChildrenData, GetTreeStylesheetChildrenErrors, GetTreeStylesheetChildrenResponses, GetTreeStylesheetRootData, GetTreeStylesheetRootErrors, GetTreeStylesheetRootResponses, GetTreeStylesheetSiblingsData, GetTreeStylesheetSiblingsErrors, GetTreeStylesheetSiblingsResponses, GetTreeTemplateAncestorsData, GetTreeTemplateAncestorsErrors, GetTreeTemplateAncestorsResponses, GetTreeTemplateChildrenData, GetTreeTemplateChildrenErrors, GetTreeTemplateChildrenResponses, GetTreeTemplateRootData, GetTreeTemplateRootErrors, GetTreeTemplateRootResponses, GetTreeTemplateSiblingsData, GetTreeTemplateSiblingsErrors, GetTreeTemplateSiblingsResponses, GetUpgradeSettingsData, GetUpgradeSettingsErrors, GetUpgradeSettingsResponses, GetUserById2FaData, GetUserById2FaErrors, GetUserById2FaResponses, GetUserByIdCalculateStartNodesData, GetUserByIdCalculateStartNodesErrors, GetUserByIdCalculateStartNodesResponses, GetUserByIdClientCredentialsData, GetUserByIdClientCredentialsErrors, GetUserByIdClientCredentialsResponses, GetUserByIdData, GetUserByIdErrors, GetUserByIdResponses, GetUserConfigurationData, GetUserConfigurationErrors, GetUserConfigurationResponses, GetUserCurrent2FaByProviderNameData, GetUserCurrent2FaByProviderNameErrors, GetUserCurrent2FaByProviderNameResponses, GetUserCurrent2FaData, GetUserCurrent2FaErrors, GetUserCurrent2FaResponses, GetUserCurrentConfigurationData, GetUserCurrentConfigurationErrors, GetUserCurrentConfigurationResponses, GetUserCurrentData, GetUserCurrentErrors, GetUserCurrentLoginProvidersData, GetUserCurrentLoginProvidersErrors, GetUserCurrentLoginProvidersResponses, GetUserCurrentPermissionsData, GetUserCurrentPermissionsDocumentData, GetUserCurrentPermissionsDocumentErrors, GetUserCurrentPermissionsDocumentResponses, GetUserCurrentPermissionsErrors, GetUserCurrentPermissionsMediaData, GetUserCurrentPermissionsMediaErrors, GetUserCurrentPermissionsMediaResponses, GetUserCurrentPermissionsResponses, GetUserCurrentResponses, GetUserData, GetUserDataByIdData, GetUserDataByIdErrors, GetUserDataByIdResponses, GetUserDataData, GetUserDataErrors, GetUserDataResponses, GetUserErrors, GetUserGroupByIdData, GetUserGroupByIdErrors, GetUserGroupByIdResponses, GetUserGroupData, GetUserGroupErrors, GetUserGroupResponses, GetUserResponses, GetWebhookByIdData, GetWebhookByIdErrors, GetWebhookByIdLogsData, GetWebhookByIdLogsErrors, GetWebhookByIdLogsResponses, GetWebhookByIdResponses, GetWebhookData, GetWebhookErrors, GetWebhookEventsData, GetWebhookEventsErrors, GetWebhookEventsResponses, GetWebhookLogsData, GetWebhookLogsErrors, GetWebhookLogsResponses, GetWebhookResponses, PostDataTypeByIdCopyData, PostDataTypeByIdCopyErrors, PostDataTypeByIdCopyResponses, PostDataTypeData, PostDataTypeErrors, PostDataTypeFolderData, PostDataTypeFolderErrors, PostDataTypeFolderResponses, PostDataTypeResponses, PostDictionaryData, PostDictionaryErrors, PostDictionaryImportData, PostDictionaryImportErrors, PostDictionaryImportResponses, PostDictionaryResponses, PostDocumentBlueprintData, PostDocumentBlueprintErrors, PostDocumentBlueprintFolderData, PostDocumentBlueprintFolderErrors, PostDocumentBlueprintFolderResponses, PostDocumentBlueprintFromDocumentData, PostDocumentBlueprintFromDocumentErrors, PostDocumentBlueprintFromDocumentResponses, PostDocumentBlueprintResponses, PostDocumentByIdCopyData, PostDocumentByIdCopyErrors, PostDocumentByIdCopyResponses, PostDocumentByIdPublicAccessData, PostDocumentByIdPublicAccessErrors, PostDocumentByIdPublicAccessResponses, PostDocumentData, PostDocumentErrors, PostDocumentResponses, PostDocumentTypeAvailableCompositionsData, PostDocumentTypeAvailableCompositionsErrors, PostDocumentTypeAvailableCompositionsResponses, PostDocumentTypeByIdCopyData, PostDocumentTypeByIdCopyErrors, PostDocumentTypeByIdCopyResponses, PostDocumentTypeData, PostDocumentTypeErrors, PostDocumentTypeFolderData, PostDocumentTypeFolderErrors, PostDocumentTypeFolderResponses, PostDocumentTypeImportData, PostDocumentTypeImportErrors, PostDocumentTypeImportResponses, PostDocumentTypeResponses, PostDocumentValidateData, PostDocumentValidateErrors, PostDocumentValidateResponses, PostDocumentVersionByIdRollbackData, PostDocumentVersionByIdRollbackErrors, PostDocumentVersionByIdRollbackResponses, PostDynamicRootQueryData, PostDynamicRootQueryErrors, PostDynamicRootQueryResponses, PostHealthCheckExecuteActionData, PostHealthCheckExecuteActionErrors, PostHealthCheckExecuteActionResponses, PostHealthCheckGroupByNameCheckData, PostHealthCheckGroupByNameCheckErrors, PostHealthCheckGroupByNameCheckResponses, PostIndexerByIndexNameRebuildData, PostIndexerByIndexNameRebuildErrors, PostIndexerByIndexNameRebuildResponses, PostInstallSetupData, PostInstallSetupErrors, PostInstallSetupResponses, PostInstallValidateDatabaseData, PostInstallValidateDatabaseErrors, PostInstallValidateDatabaseResponses, PostLanguageData, PostLanguageErrors, PostLanguageResponses, PostLogViewerSavedSearchData, PostLogViewerSavedSearchErrors, PostLogViewerSavedSearchResponses, PostMediaData, PostMediaErrors, PostMediaResponses, PostMediaTypeAvailableCompositionsData, PostMediaTypeAvailableCompositionsErrors, PostMediaTypeAvailableCompositionsResponses, PostMediaTypeByIdCopyData, PostMediaTypeByIdCopyErrors, PostMediaTypeByIdCopyResponses, PostMediaTypeData, PostMediaTypeErrors, PostMediaTypeFolderData, PostMediaTypeFolderErrors, PostMediaTypeFolderResponses, PostMediaTypeImportData, PostMediaTypeImportErrors, PostMediaTypeImportResponses, PostMediaTypeResponses, PostMediaValidateData, PostMediaValidateErrors, PostMediaValidateResponses, PostMemberData, PostMemberErrors, PostMemberGroupData, PostMemberGroupErrors, PostMemberGroupResponses, PostMemberResponses, PostMemberTypeAvailableCompositionsData, PostMemberTypeAvailableCompositionsErrors, PostMemberTypeAvailableCompositionsResponses, PostMemberTypeByIdCopyData, PostMemberTypeByIdCopyErrors, PostMemberTypeByIdCopyResponses, PostMemberTypeData, PostMemberTypeErrors, PostMemberTypeResponses, PostMemberValidateData, PostMemberValidateErrors, PostMemberValidateResponses, PostModelsBuilderBuildData, PostModelsBuilderBuildErrors, PostModelsBuilderBuildResponses, PostPackageByNameRunMigrationData, PostPackageByNameRunMigrationErrors, PostPackageByNameRunMigrationResponses, PostPackageCreatedData, PostPackageCreatedErrors, PostPackageCreatedResponses, PostPartialViewData, PostPartialViewErrors, PostPartialViewFolderData, PostPartialViewFolderErrors, PostPartialViewFolderResponses, PostPartialViewResponses, PostPreviewData, PostPreviewErrors, PostPreviewResponses, PostPublishedCacheRebuildData, PostPublishedCacheRebuildErrors, PostPublishedCacheRebuildResponses, PostPublishedCacheReloadData, PostPublishedCacheReloadErrors, PostPublishedCacheReloadResponses, PostRedirectManagementStatusData, PostRedirectManagementStatusErrors, PostRedirectManagementStatusResponses, PostScriptData, PostScriptErrors, PostScriptFolderData, PostScriptFolderErrors, PostScriptFolderResponses, PostScriptResponses, PostSecurityForgotPasswordData, PostSecurityForgotPasswordErrors, PostSecurityForgotPasswordResetData, PostSecurityForgotPasswordResetErrors, PostSecurityForgotPasswordResetResponses, PostSecurityForgotPasswordResponses, PostSecurityForgotPasswordVerifyData, PostSecurityForgotPasswordVerifyErrors, PostSecurityForgotPasswordVerifyResponses, PostStylesheetData, PostStylesheetErrors, PostStylesheetFolderData, PostStylesheetFolderErrors, PostStylesheetFolderResponses, PostStylesheetResponses, PostTelemetryLevelData, PostTelemetryLevelErrors, PostTelemetryLevelResponses, PostTemplateData, PostTemplateErrors, PostTemplateQueryExecuteData, PostTemplateQueryExecuteErrors, PostTemplateQueryExecuteResponses, PostTemplateResponses, PostTemporaryFileData, PostTemporaryFileErrors, PostTemporaryFileResponses, PostUpgradeAuthorizeData, PostUpgradeAuthorizeErrors, PostUpgradeAuthorizeResponses, PostUserAvatarByIdData, PostUserAvatarByIdErrors, PostUserAvatarByIdResponses, PostUserByIdChangePasswordData, PostUserByIdChangePasswordErrors, PostUserByIdChangePasswordResponses, PostUserByIdClientCredentialsData, PostUserByIdClientCredentialsErrors, PostUserByIdClientCredentialsResponses, PostUserByIdResetPasswordData, PostUserByIdResetPasswordErrors, PostUserByIdResetPasswordResponses, PostUserCurrent2FaByProviderNameData, PostUserCurrent2FaByProviderNameErrors, PostUserCurrent2FaByProviderNameResponses, PostUserCurrentAvatarData, PostUserCurrentAvatarErrors, PostUserCurrentAvatarResponses, PostUserCurrentChangePasswordData, PostUserCurrentChangePasswordErrors, PostUserCurrentChangePasswordResponses, PostUserData, PostUserDataData, PostUserDataErrors, PostUserDataResponses, PostUserDisableData, PostUserDisableErrors, PostUserDisableResponses, PostUserEnableData, PostUserEnableErrors, PostUserEnableResponses, PostUserErrors, PostUserGroupByIdUsersData, PostUserGroupByIdUsersErrors, PostUserGroupByIdUsersResponses, PostUserGroupData, PostUserGroupErrors, PostUserGroupResponses, PostUserInviteCreatePasswordData, PostUserInviteCreatePasswordErrors, PostUserInviteCreatePasswordResponses, PostUserInviteData, PostUserInviteErrors, PostUserInviteResendData, PostUserInviteResendErrors, PostUserInviteResendResponses, PostUserInviteResponses, PostUserInviteVerifyData, PostUserInviteVerifyErrors, PostUserInviteVerifyResponses, PostUserResponses, PostUserSetUserGroupsData, PostUserSetUserGroupsErrors, PostUserSetUserGroupsResponses, PostUserUnlockData, PostUserUnlockErrors, PostUserUnlockResponses, PostWebhookData, PostWebhookErrors, PostWebhookResponses, PutDataTypeByIdData, PutDataTypeByIdErrors, PutDataTypeByIdMoveData, PutDataTypeByIdMoveErrors, PutDataTypeByIdMoveResponses, PutDataTypeByIdResponses, PutDataTypeFolderByIdData, PutDataTypeFolderByIdErrors, PutDataTypeFolderByIdResponses, PutDictionaryByIdData, PutDictionaryByIdErrors, PutDictionaryByIdMoveData, PutDictionaryByIdMoveErrors, PutDictionaryByIdMoveResponses, PutDictionaryByIdResponses, PutDocumentBlueprintByIdData, PutDocumentBlueprintByIdErrors, PutDocumentBlueprintByIdMoveData, PutDocumentBlueprintByIdMoveErrors, PutDocumentBlueprintByIdMoveResponses, PutDocumentBlueprintByIdResponses, PutDocumentBlueprintFolderByIdData, PutDocumentBlueprintFolderByIdErrors, PutDocumentBlueprintFolderByIdResponses, PutDocumentByIdData, PutDocumentByIdDomainsData, PutDocumentByIdDomainsErrors, PutDocumentByIdDomainsResponses, PutDocumentByIdErrors, PutDocumentByIdMoveData, PutDocumentByIdMoveErrors, PutDocumentByIdMoveResponses, PutDocumentByIdMoveToRecycleBinData, PutDocumentByIdMoveToRecycleBinErrors, PutDocumentByIdMoveToRecycleBinResponses, PutDocumentByIdNotificationsData, PutDocumentByIdNotificationsErrors, PutDocumentByIdNotificationsResponses, PutDocumentByIdPublicAccessData, PutDocumentByIdPublicAccessErrors, PutDocumentByIdPublicAccessResponses, PutDocumentByIdPublishData, PutDocumentByIdPublishErrors, PutDocumentByIdPublishResponses, PutDocumentByIdPublishWithDescendantsData, PutDocumentByIdPublishWithDescendantsErrors, PutDocumentByIdPublishWithDescendantsResponses, PutDocumentByIdResponses, PutDocumentByIdUnpublishData, PutDocumentByIdUnpublishErrors, PutDocumentByIdUnpublishResponses, PutDocumentSortData, PutDocumentSortErrors, PutDocumentSortResponses, PutDocumentTypeByIdData, PutDocumentTypeByIdErrors, PutDocumentTypeByIdImportData, PutDocumentTypeByIdImportErrors, PutDocumentTypeByIdImportResponses, PutDocumentTypeByIdMoveData, PutDocumentTypeByIdMoveErrors, PutDocumentTypeByIdMoveResponses, PutDocumentTypeByIdResponses, PutDocumentTypeFolderByIdData, PutDocumentTypeFolderByIdErrors, PutDocumentTypeFolderByIdResponses, PutDocumentVersionByIdPreventCleanupData, PutDocumentVersionByIdPreventCleanupErrors, PutDocumentVersionByIdPreventCleanupResponses, PutLanguageByIsoCodeData, PutLanguageByIsoCodeErrors, PutLanguageByIsoCodeResponses, PutMediaByIdData, PutMediaByIdErrors, PutMediaByIdMoveData, PutMediaByIdMoveErrors, PutMediaByIdMoveResponses, PutMediaByIdMoveToRecycleBinData, PutMediaByIdMoveToRecycleBinErrors, PutMediaByIdMoveToRecycleBinResponses, PutMediaByIdResponses, PutMediaByIdValidateData, PutMediaByIdValidateErrors, PutMediaByIdValidateResponses, PutMediaSortData, PutMediaSortErrors, PutMediaSortResponses, PutMediaTypeByIdData, PutMediaTypeByIdErrors, PutMediaTypeByIdImportData, PutMediaTypeByIdImportErrors, PutMediaTypeByIdImportResponses, PutMediaTypeByIdMoveData, PutMediaTypeByIdMoveErrors, PutMediaTypeByIdMoveResponses, PutMediaTypeByIdResponses, PutMediaTypeFolderByIdData, PutMediaTypeFolderByIdErrors, PutMediaTypeFolderByIdResponses, PutMemberByIdData, PutMemberByIdErrors, PutMemberByIdResponses, PutMemberByIdValidateData, PutMemberByIdValidateErrors, PutMemberByIdValidateResponses, PutMemberGroupByIdData, PutMemberGroupByIdErrors, PutMemberGroupByIdResponses, PutMemberTypeByIdData, PutMemberTypeByIdErrors, PutMemberTypeByIdResponses, PutPackageCreatedByIdData, PutPackageCreatedByIdErrors, PutPackageCreatedByIdResponses, PutPartialViewByPathData, PutPartialViewByPathErrors, PutPartialViewByPathRenameData, PutPartialViewByPathRenameErrors, PutPartialViewByPathRenameResponses, PutPartialViewByPathResponses, PutProfilingStatusData, PutProfilingStatusErrors, PutProfilingStatusResponses, PutRecycleBinDocumentByIdRestoreData, PutRecycleBinDocumentByIdRestoreErrors, PutRecycleBinDocumentByIdRestoreResponses, PutRecycleBinMediaByIdRestoreData, PutRecycleBinMediaByIdRestoreErrors, PutRecycleBinMediaByIdRestoreResponses, PutScriptByPathData, PutScriptByPathErrors, PutScriptByPathRenameData, PutScriptByPathRenameErrors, PutScriptByPathRenameResponses, PutScriptByPathResponses, PutStylesheetByPathData, PutStylesheetByPathErrors, PutStylesheetByPathRenameData, PutStylesheetByPathRenameErrors, PutStylesheetByPathRenameResponses, PutStylesheetByPathResponses, PutTemplateByIdData, PutTemplateByIdErrors, PutTemplateByIdResponses, PutUmbracoManagementApiV11DocumentByIdValidate11Data, PutUmbracoManagementApiV11DocumentByIdValidate11Errors, PutUmbracoManagementApiV11DocumentByIdValidate11Responses, PutUserByIdData, PutUserByIdErrors, PutUserByIdResponses, PutUserDataData, PutUserDataErrors, PutUserDataResponses, PutUserGroupByIdData, PutUserGroupByIdErrors, PutUserGroupByIdResponses, PutWebhookByIdData, PutWebhookByIdErrors, PutWebhookByIdResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class CultureService {
    public static getCulture<ThrowOnError extends boolean = true>(options?: Options<GetCultureData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCultureResponses, GetCultureErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/culture',
            ...options
        });
    }
}

export class DataTypeService {
    public static postDataType<ThrowOnError extends boolean = true>(options?: Options<PostDataTypeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDataTypeResponses, PostDataTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDataTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDataTypeByIdResponses, DeleteDataTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options
        });
    }
    
    public static getDataTypeById<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDataTypeByIdResponses, GetDataTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options
        });
    }
    
    public static putDataTypeById<ThrowOnError extends boolean = true>(options: Options<PutDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDataTypeByIdResponses, PutDataTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDataTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDataTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? client).post<PostDataTypeByIdCopyResponses, PostDataTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDataTypeByIdIsUsed<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdIsUsedData, ThrowOnError>) {
        return (options.client ?? client).get<GetDataTypeByIdIsUsedResponses, GetDataTypeByIdIsUsedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/is-used',
            ...options
        });
    }
    
    public static putDataTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDataTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? client).put<PutDataTypeByIdMoveResponses, PutDataTypeByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDataTypeByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? client).get<GetDataTypeByIdReferencedByResponses, GetDataTypeByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/referenced-by',
            ...options
        });
    }
    
    public static getDataTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDataTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDataTypeConfigurationResponses, GetDataTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/configuration',
            ...options
        });
    }
    
    public static postDataTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostDataTypeFolderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDataTypeFolderResponses, PostDataTypeFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDataTypeFolderByIdResponses, DeleteDataTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options
        });
    }
    
    public static getDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDataTypeFolderByIdResponses, GetDataTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options
        });
    }
    
    public static putDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDataTypeFolderByIdResponses, PutDataTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getFilterDataType<ThrowOnError extends boolean = true>(options?: Options<GetFilterDataTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFilterDataTypeResponses, GetFilterDataTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/data-type',
            ...options
        });
    }
    
    public static getItemDataType<ThrowOnError extends boolean = true>(options?: Options<GetItemDataTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDataTypeResponses, GetItemDataTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/data-type',
            ...options
        });
    }
    
    public static getItemDataTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDataTypeSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDataTypeSearchResponses, GetItemDataTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/data-type/search',
            ...options
        });
    }
    
    public static getTreeDataTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDataTypeAncestorsResponses, GetTreeDataTypeAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/ancestors',
            ...options
        });
    }
    
    public static getTreeDataTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDataTypeChildrenResponses, GetTreeDataTypeChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/children',
            ...options
        });
    }
    
    public static getTreeDataTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDataTypeRootResponses, GetTreeDataTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/root',
            ...options
        });
    }
    
    public static getTreeDataTypeSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDataTypeSiblingsResponses, GetTreeDataTypeSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/siblings',
            ...options
        });
    }
}

export class DictionaryService {
    public static getDictionary<ThrowOnError extends boolean = true>(options?: Options<GetDictionaryData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDictionaryResponses, GetDictionaryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary',
            ...options
        });
    }
    
    public static postDictionary<ThrowOnError extends boolean = true>(options?: Options<PostDictionaryData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDictionaryResponses, PostDictionaryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDictionaryById<ThrowOnError extends boolean = true>(options: Options<DeleteDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDictionaryByIdResponses, DeleteDictionaryByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options
        });
    }
    
    public static getDictionaryById<ThrowOnError extends boolean = true>(options: Options<GetDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDictionaryByIdResponses, GetDictionaryByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options
        });
    }
    
    public static putDictionaryById<ThrowOnError extends boolean = true>(options: Options<PutDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDictionaryByIdResponses, PutDictionaryByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDictionaryByIdExport<ThrowOnError extends boolean = true>(options: Options<GetDictionaryByIdExportData, ThrowOnError>) {
        return (options.client ?? client).get<GetDictionaryByIdExportResponses, GetDictionaryByIdExportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}/export',
            ...options
        });
    }
    
    public static putDictionaryByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDictionaryByIdMoveData, ThrowOnError>) {
        return (options.client ?? client).put<PutDictionaryByIdMoveResponses, PutDictionaryByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDictionaryImport<ThrowOnError extends boolean = true>(options?: Options<PostDictionaryImportData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDictionaryImportResponses, PostDictionaryImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDictionary<ThrowOnError extends boolean = true>(options?: Options<GetItemDictionaryData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDictionaryResponses, GetItemDictionaryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/dictionary',
            ...options
        });
    }
    
    public static getTreeDictionaryAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDictionaryAncestorsResponses, GetTreeDictionaryAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',
            ...options
        });
    }
    
    public static getTreeDictionaryChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDictionaryChildrenResponses, GetTreeDictionaryChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/children',
            ...options
        });
    }
    
    public static getTreeDictionaryRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDictionaryRootResponses, GetTreeDictionaryRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/root',
            ...options
        });
    }
}

export class DocumentBlueprintService {
    public static postDocumentBlueprint<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentBlueprintResponses, PostDocumentBlueprintErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDocumentBlueprintByIdResponses, DeleteDocumentBlueprintByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options
        });
    }
    
    public static getDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentBlueprintByIdResponses, GetDocumentBlueprintByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options
        });
    }
    
    public static putDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentBlueprintByIdResponses, PutDocumentBlueprintByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentBlueprintByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintByIdMoveData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentBlueprintByIdMoveResponses, PutDocumentBlueprintByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentBlueprintByIdScaffold<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintByIdScaffoldData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentBlueprintByIdScaffoldResponses, GetDocumentBlueprintByIdScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}/scaffold',
            ...options
        });
    }
    
    public static postDocumentBlueprintFolder<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintFolderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentBlueprintFolderResponses, PostDocumentBlueprintFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDocumentBlueprintFolderByIdResponses, DeleteDocumentBlueprintFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options
        });
    }
    
    public static getDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentBlueprintFolderByIdResponses, GetDocumentBlueprintFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options
        });
    }
    
    public static putDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentBlueprintFolderByIdResponses, PutDocumentBlueprintFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDocumentBlueprintFromDocument<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintFromDocumentData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentBlueprintFromDocumentResponses, PostDocumentBlueprintFromDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/from-document',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocumentBlueprint<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentBlueprintData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDocumentBlueprintResponses, GetItemDocumentBlueprintErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-blueprint',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentBlueprintAncestorsResponses, GetTreeDocumentBlueprintAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentBlueprintChildrenResponses, GetTreeDocumentBlueprintChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/children',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentBlueprintRootResponses, GetTreeDocumentBlueprintRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/root',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentBlueprintSiblingsResponses, GetTreeDocumentBlueprintSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/siblings',
            ...options
        });
    }
}

export class DocumentTypeService {
    public static postDocumentType<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentTypeResponses, PostDocumentTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDocumentTypeByIdResponses, DeleteDocumentTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options
        });
    }
    
    public static getDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentTypeByIdResponses, GetDocumentTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options
        });
    }
    
    public static putDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentTypeByIdResponses, PutDocumentTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentTypeByIdAllowedChildren<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdAllowedChildrenData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentTypeByIdAllowedChildrenResponses, GetDocumentTypeByIdAllowedChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',
            ...options
        });
    }
    
    public static getDocumentTypeByIdBlueprint<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdBlueprintData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentTypeByIdBlueprintResponses, GetDocumentTypeByIdBlueprintErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',
            ...options
        });
    }
    
    public static getDocumentTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentTypeByIdCompositionReferencesResponses, GetDocumentTypeByIdCompositionReferencesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postDocumentTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDocumentTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? client).post<PostDocumentTypeByIdCopyResponses, PostDocumentTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentTypeByIdExport<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdExportData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentTypeByIdExportResponses, GetDocumentTypeByIdExportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/export',
            ...options
        });
    }
    
    public static putDocumentTypeByIdImport<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdImportData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentTypeByIdImportResponses, PutDocumentTypeByIdImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentTypeByIdMoveResponses, PutDocumentTypeByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentTypeAllowedAtRoot<ThrowOnError extends boolean = true>(options?: Options<GetDocumentTypeAllowedAtRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDocumentTypeAllowedAtRootResponses, GetDocumentTypeAllowedAtRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/allowed-at-root',
            ...options
        });
    }
    
    public static postDocumentTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentTypeAvailableCompositionsResponses, PostDocumentTypeAvailableCompositionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDocumentTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDocumentTypeConfigurationResponses, GetDocumentTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/configuration',
            ...options
        });
    }
    
    public static postDocumentTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeFolderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentTypeFolderResponses, PostDocumentTypeFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDocumentTypeFolderByIdResponses, DeleteDocumentTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options
        });
    }
    
    public static getDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentTypeFolderByIdResponses, GetDocumentTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options
        });
    }
    
    public static putDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentTypeFolderByIdResponses, PutDocumentTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postDocumentTypeImport<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeImportData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentTypeImportResponses, PostDocumentTypeImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocumentType<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDocumentTypeResponses, GetItemDocumentTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-type',
            ...options
        });
    }
    
    public static getItemDocumentTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentTypeSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDocumentTypeSearchResponses, GetItemDocumentTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-type/search',
            ...options
        });
    }
    
    public static getTreeDocumentTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentTypeAncestorsResponses, GetTreeDocumentTypeAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentTypeChildrenResponses, GetTreeDocumentTypeChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/children',
            ...options
        });
    }
    
    public static getTreeDocumentTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentTypeRootResponses, GetTreeDocumentTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/root',
            ...options
        });
    }
    
    public static getTreeDocumentTypeSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentTypeSiblingsResponses, GetTreeDocumentTypeSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/siblings',
            ...options
        });
    }
}

export class DocumentVersionService {
    public static getDocumentVersion<ThrowOnError extends boolean = true>(options: Options<GetDocumentVersionData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentVersionResponses, GetDocumentVersionErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version',
            ...options
        });
    }
    
    public static getDocumentVersionById<ThrowOnError extends boolean = true>(options: Options<GetDocumentVersionByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentVersionByIdResponses, GetDocumentVersionByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}',
            ...options
        });
    }
    
    public static putDocumentVersionByIdPreventCleanup<ThrowOnError extends boolean = true>(options: Options<PutDocumentVersionByIdPreventCleanupData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentVersionByIdPreventCleanupResponses, PutDocumentVersionByIdPreventCleanupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',
            ...options
        });
    }
    
    public static postDocumentVersionByIdRollback<ThrowOnError extends boolean = true>(options: Options<PostDocumentVersionByIdRollbackData, ThrowOnError>) {
        return (options.client ?? client).post<PostDocumentVersionByIdRollbackResponses, PostDocumentVersionByIdRollbackErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}/rollback',
            ...options
        });
    }
}

export class DocumentByIdValidate1Service {
    public static putUmbracoManagementApiV11DocumentByIdValidate11<ThrowOnError extends boolean = true>(options: Options<PutUmbracoManagementApiV11DocumentByIdValidate11Data, ThrowOnError>) {
        return (options.client ?? client).put<PutUmbracoManagementApiV11DocumentByIdValidate11Responses, PutUmbracoManagementApiV11DocumentByIdValidate11Errors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1.1/document/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class PutUmbracoManagementApiV1Service {
    static documentByIdValidate1Service = DocumentByIdValidate1Service;
}

export class DocumentService {
    public static getCollectionDocumentById<ThrowOnError extends boolean = true>(options: Options<GetCollectionDocumentByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetCollectionDocumentByIdResponses, GetCollectionDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/collection/document/{id}',
            ...options
        });
    }
    
    public static postDocument<ThrowOnError extends boolean = true>(options?: Options<PostDocumentData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentResponses, PostDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDocumentByIdResponses, DeleteDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options
        });
    }
    
    public static getDocumentById<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdResponses, GetDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options
        });
    }
    
    public static putDocumentById<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdResponses, PutDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentByIdAuditLog<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdAuditLogData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdAuditLogResponses, GetDocumentByIdAuditLogErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/audit-log',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static getDocumentByIdAvailableSegmentOptions<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdAvailableSegmentOptionsData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdAvailableSegmentOptionsResponses, GetDocumentByIdAvailableSegmentOptionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/available-segment-options',
            ...options
        });
    }
    
    public static postDocumentByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDocumentByIdCopyData, ThrowOnError>) {
        return (options.client ?? client).post<PostDocumentByIdCopyResponses, PostDocumentByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentByIdDomains<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdDomainsData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdDomainsResponses, GetDocumentByIdDomainsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/domains',
            ...options
        });
    }
    
    public static putDocumentByIdDomains<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdDomainsData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdDomainsResponses, PutDocumentByIdDomainsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/domains',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdMoveData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdMoveResponses, PutDocumentByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdMoveToRecycleBin<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdMoveToRecycleBinData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdMoveToRecycleBinResponses, PutDocumentByIdMoveToRecycleBinErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',
            ...options
        });
    }
    
    public static getDocumentByIdNotifications<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdNotificationsData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdNotificationsResponses, GetDocumentByIdNotificationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            ...options
        });
    }
    
    public static putDocumentByIdNotifications<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdNotificationsData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdNotificationsResponses, PutDocumentByIdNotificationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteDocumentByIdPublicAccessResponses, DeleteDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options
        });
    }
    
    public static getDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdPublicAccessResponses, GetDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options
        });
    }
    
    public static postDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<PostDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? client).post<PostDocumentByIdPublicAccessResponses, PostDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdPublicAccessResponses, PutDocumentByIdPublicAccessErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdPublish<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublishData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdPublishResponses, PutDocumentByIdPublishErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putDocumentByIdPublishWithDescendants<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublishWithDescendantsData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdPublishWithDescendantsResponses, PutDocumentByIdPublishWithDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentByIdPublishWithDescendantsResultByTaskId<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublishWithDescendantsResultByTaskIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdPublishWithDescendantsResultByTaskIdResponses, GetDocumentByIdPublishWithDescendantsResultByTaskIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants/result/{taskId}',
            ...options
        });
    }
    
    public static getDocumentByIdPublished<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublishedData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdPublishedResponses, GetDocumentByIdPublishedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/published',
            ...options
        });
    }
    
    public static getDocumentByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdReferencedByResponses, GetDocumentByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/referenced-by',
            ...options
        });
    }
    
    public static getDocumentByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? client).get<GetDocumentByIdReferencedDescendantsResponses, GetDocumentByIdReferencedDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putDocumentByIdUnpublish<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdUnpublishData, ThrowOnError>) {
        return (options.client ?? client).put<PutDocumentByIdUnpublishResponses, PutDocumentByIdUnpublishErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/unpublish',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDocumentAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetDocumentAreReferencedData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDocumentAreReferencedResponses, GetDocumentAreReferencedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/are-referenced',
            ...options
        });
    }
    
    public static getDocumentConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDocumentConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDocumentConfigurationResponses, GetDocumentConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/configuration',
            ...options
        });
    }
    
    public static putDocumentSort<ThrowOnError extends boolean = true>(options?: Options<PutDocumentSortData, ThrowOnError>) {
        return (options?.client ?? client).put<PutDocumentSortResponses, PutDocumentSortErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentUrls<ThrowOnError extends boolean = true>(options?: Options<GetDocumentUrlsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDocumentUrlsResponses, GetDocumentUrlsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/urls',
            ...options
        });
    }
    
    public static postDocumentValidate<ThrowOnError extends boolean = true>(options?: Options<PostDocumentValidateData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDocumentValidateResponses, PostDocumentValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocument<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDocumentResponses, GetItemDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document',
            ...options
        });
    }
    
    public static getItemDocumentSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemDocumentSearchResponses, GetItemDocumentSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document/search',
            ...options
        });
    }
    
    public static deleteRecycleBinDocument<ThrowOnError extends boolean = true>(options?: Options<DeleteRecycleBinDocumentData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteRecycleBinDocumentResponses, DeleteRecycleBinDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document',
            ...options
        });
    }
    
    public static deleteRecycleBinDocumentById<ThrowOnError extends boolean = true>(options: Options<DeleteRecycleBinDocumentByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteRecycleBinDocumentByIdResponses, DeleteRecycleBinDocumentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',
            ...options
        });
    }
    
    public static getRecycleBinDocumentByIdOriginalParent<ThrowOnError extends boolean = true>(options: Options<GetRecycleBinDocumentByIdOriginalParentData, ThrowOnError>) {
        return (options.client ?? client).get<GetRecycleBinDocumentByIdOriginalParentResponses, GetRecycleBinDocumentByIdOriginalParentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',
            ...options
        });
    }
    
    public static putRecycleBinDocumentByIdRestore<ThrowOnError extends boolean = true>(options: Options<PutRecycleBinDocumentByIdRestoreData, ThrowOnError>) {
        return (options.client ?? client).put<PutRecycleBinDocumentByIdRestoreResponses, PutRecycleBinDocumentByIdRestoreErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getRecycleBinDocumentChildren<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinDocumentChildrenResponses, GetRecycleBinDocumentChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/children',
            ...options
        });
    }
    
    public static getRecycleBinDocumentReferencedBy<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentReferencedByData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinDocumentReferencedByResponses, GetRecycleBinDocumentReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/referenced-by',
            ...options
        });
    }
    
    public static getRecycleBinDocumentRoot<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinDocumentRootResponses, GetRecycleBinDocumentRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/root',
            ...options
        });
    }
    
    public static getRecycleBinDocumentSiblings<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinDocumentSiblingsResponses, GetRecycleBinDocumentSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/siblings',
            ...options
        });
    }
    
    public static getTreeDocumentAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentAncestorsResponses, GetTreeDocumentAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentChildrenResponses, GetTreeDocumentChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/children',
            ...options
        });
    }
    
    public static getTreeDocumentRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentRootResponses, GetTreeDocumentRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/root',
            ...options
        });
    }
    
    public static getTreeDocumentSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeDocumentSiblingsResponses, GetTreeDocumentSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/siblings',
            ...options
        });
    }
    static putUmbracoManagementApiV1Service = PutUmbracoManagementApiV1Service;
}

export class DynamicRootService {
    public static postDynamicRootQuery<ThrowOnError extends boolean = true>(options?: Options<PostDynamicRootQueryData, ThrowOnError>) {
        return (options?.client ?? client).post<PostDynamicRootQueryResponses, PostDynamicRootQueryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dynamic-root/query',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDynamicRootSteps<ThrowOnError extends boolean = true>(options?: Options<GetDynamicRootStepsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDynamicRootStepsResponses, GetDynamicRootStepsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dynamic-root/steps',
            ...options
        });
    }
}

export class HealthCheckService {
    public static getHealthCheckGroup<ThrowOnError extends boolean = true>(options?: Options<GetHealthCheckGroupData, ThrowOnError>) {
        return (options?.client ?? client).get<GetHealthCheckGroupResponses, GetHealthCheckGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group',
            ...options
        });
    }
    
    public static getHealthCheckGroupByName<ThrowOnError extends boolean = true>(options: Options<GetHealthCheckGroupByNameData, ThrowOnError>) {
        return (options.client ?? client).get<GetHealthCheckGroupByNameResponses, GetHealthCheckGroupByNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group/{name}',
            ...options
        });
    }
    
    public static postHealthCheckGroupByNameCheck<ThrowOnError extends boolean = true>(options: Options<PostHealthCheckGroupByNameCheckData, ThrowOnError>) {
        return (options.client ?? client).post<PostHealthCheckGroupByNameCheckResponses, PostHealthCheckGroupByNameCheckErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group/{name}/check',
            ...options
        });
    }
    
    public static postHealthCheckExecuteAction<ThrowOnError extends boolean = true>(options?: Options<PostHealthCheckExecuteActionData, ThrowOnError>) {
        return (options?.client ?? client).post<PostHealthCheckExecuteActionResponses, PostHealthCheckExecuteActionErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check/execute-action',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class HelpService {
    public static getHelp<ThrowOnError extends boolean = true>(options?: Options<GetHelpData, ThrowOnError>) {
        return (options?.client ?? client).get<GetHelpResponses, GetHelpErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/help',
            ...options
        });
    }
}

export class ImagingService {
    public static getImagingResizeUrls<ThrowOnError extends boolean = true>(options?: Options<GetImagingResizeUrlsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetImagingResizeUrlsResponses, GetImagingResizeUrlsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/imaging/resize/urls',
            ...options
        });
    }
}

export class ImportService {
    public static getImportAnalyze<ThrowOnError extends boolean = true>(options?: Options<GetImportAnalyzeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetImportAnalyzeResponses, GetImportAnalyzeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/import/analyze',
            ...options
        });
    }
}

export class IndexerService {
    public static getIndexer<ThrowOnError extends boolean = true>(options?: Options<GetIndexerData, ThrowOnError>) {
        return (options?.client ?? client).get<GetIndexerResponses, GetIndexerErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer',
            ...options
        });
    }
    
    public static getIndexerByIndexName<ThrowOnError extends boolean = true>(options: Options<GetIndexerByIndexNameData, ThrowOnError>) {
        return (options.client ?? client).get<GetIndexerByIndexNameResponses, GetIndexerByIndexNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer/{indexName}',
            ...options
        });
    }
    
    public static postIndexerByIndexNameRebuild<ThrowOnError extends boolean = true>(options: Options<PostIndexerByIndexNameRebuildData, ThrowOnError>) {
        return (options.client ?? client).post<PostIndexerByIndexNameRebuildResponses, PostIndexerByIndexNameRebuildErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',
            ...options
        });
    }
}

export class InstallService {
    public static getInstallSettings<ThrowOnError extends boolean = true>(options?: Options<GetInstallSettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetInstallSettingsResponses, GetInstallSettingsErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/settings',
            ...options
        });
    }
    
    public static postInstallSetup<ThrowOnError extends boolean = true>(options?: Options<PostInstallSetupData, ThrowOnError>) {
        return (options?.client ?? client).post<PostInstallSetupResponses, PostInstallSetupErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/setup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postInstallValidateDatabase<ThrowOnError extends boolean = true>(options?: Options<PostInstallValidateDatabaseData, ThrowOnError>) {
        return (options?.client ?? client).post<PostInstallValidateDatabaseResponses, PostInstallValidateDatabaseErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/validate-database',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class LanguageService {
    public static getItemLanguage<ThrowOnError extends boolean = true>(options?: Options<GetItemLanguageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemLanguageResponses, GetItemLanguageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/language',
            ...options
        });
    }
    
    public static getItemLanguageDefault<ThrowOnError extends boolean = true>(options?: Options<GetItemLanguageDefaultData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemLanguageDefaultResponses, GetItemLanguageDefaultErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/language/default',
            ...options
        });
    }
    
    public static getLanguage<ThrowOnError extends boolean = true>(options?: Options<GetLanguageData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLanguageResponses, GetLanguageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language',
            ...options
        });
    }
    
    public static postLanguage<ThrowOnError extends boolean = true>(options?: Options<PostLanguageData, ThrowOnError>) {
        return (options?.client ?? client).post<PostLanguageResponses, PostLanguageErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<DeleteLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteLanguageByIsoCodeResponses, DeleteLanguageByIsoCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options
        });
    }
    
    public static getLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<GetLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? client).get<GetLanguageByIsoCodeResponses, GetLanguageByIsoCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options
        });
    }
    
    public static putLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<PutLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? client).put<PutLanguageByIsoCodeResponses, PutLanguageByIsoCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class LogViewerService {
    public static getLogViewerLevel<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLevelData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLogViewerLevelResponses, GetLogViewerLevelErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/level',
            ...options
        });
    }
    
    public static getLogViewerLevelCount<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLevelCountData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLogViewerLevelCountResponses, GetLogViewerLevelCountErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/level-count',
            ...options
        });
    }
    
    public static getLogViewerLog<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLogData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLogViewerLogResponses, GetLogViewerLogErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/log',
            ...options
        });
    }
    
    public static getLogViewerMessageTemplate<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerMessageTemplateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLogViewerMessageTemplateResponses, GetLogViewerMessageTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/message-template',
            ...options
        });
    }
    
    public static getLogViewerSavedSearch<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerSavedSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLogViewerSavedSearchResponses, GetLogViewerSavedSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            ...options
        });
    }
    
    public static postLogViewerSavedSearch<ThrowOnError extends boolean = true>(options?: Options<PostLogViewerSavedSearchData, ThrowOnError>) {
        return (options?.client ?? client).post<PostLogViewerSavedSearchResponses, PostLogViewerSavedSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteLogViewerSavedSearchByName<ThrowOnError extends boolean = true>(options: Options<DeleteLogViewerSavedSearchByNameData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteLogViewerSavedSearchByNameResponses, DeleteLogViewerSavedSearchByNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            ...options
        });
    }
    
    public static getLogViewerSavedSearchByName<ThrowOnError extends boolean = true>(options: Options<GetLogViewerSavedSearchByNameData, ThrowOnError>) {
        return (options.client ?? client).get<GetLogViewerSavedSearchByNameResponses, GetLogViewerSavedSearchByNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            ...options
        });
    }
    
    public static getLogViewerValidateLogsSize<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerValidateLogsSizeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetLogViewerValidateLogsSizeResponses, GetLogViewerValidateLogsSizeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',
            ...options
        });
    }
}

export class ManifestService {
    public static getManifestManifest<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManifestManifestResponses, GetManifestManifestErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/manifest/manifest',
            ...options
        });
    }
    
    public static getManifestManifestPrivate<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestPrivateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManifestManifestPrivateResponses, GetManifestManifestPrivateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/manifest/manifest/private',
            ...options
        });
    }
    
    public static getManifestManifestPublic<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestPublicData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManifestManifestPublicResponses, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/manifest/manifest/public',
            ...options
        });
    }
}

export class MediaTypeService {
    public static getItemMediaType<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMediaTypeResponses, GetItemMediaTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type',
            ...options
        });
    }
    
    public static getItemMediaTypeAllowed<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeAllowedData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMediaTypeAllowedResponses, GetItemMediaTypeAllowedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/allowed',
            ...options
        });
    }
    
    public static getItemMediaTypeFolders<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeFoldersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMediaTypeFoldersResponses, GetItemMediaTypeFoldersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/folders',
            ...options
        });
    }
    
    public static getItemMediaTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMediaTypeSearchResponses, GetItemMediaTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/search',
            ...options
        });
    }
    
    public static postMediaType<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMediaTypeResponses, PostMediaTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMediaTypeByIdResponses, DeleteMediaTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options
        });
    }
    
    public static getMediaTypeById<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaTypeByIdResponses, GetMediaTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options
        });
    }
    
    public static putMediaTypeById<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaTypeByIdResponses, PutMediaTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaTypeByIdAllowedChildren<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdAllowedChildrenData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaTypeByIdAllowedChildrenResponses, GetMediaTypeByIdAllowedChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',
            ...options
        });
    }
    
    public static getMediaTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaTypeByIdCompositionReferencesResponses, GetMediaTypeByIdCompositionReferencesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postMediaTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostMediaTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? client).post<PostMediaTypeByIdCopyResponses, PostMediaTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaTypeByIdExport<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdExportData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaTypeByIdExportResponses, GetMediaTypeByIdExportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/export',
            ...options
        });
    }
    
    public static putMediaTypeByIdImport<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdImportData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaTypeByIdImportResponses, PutMediaTypeByIdImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putMediaTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaTypeByIdMoveResponses, PutMediaTypeByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaTypeAllowedAtRoot<ThrowOnError extends boolean = true>(options?: Options<GetMediaTypeAllowedAtRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMediaTypeAllowedAtRootResponses, GetMediaTypeAllowedAtRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/allowed-at-root',
            ...options
        });
    }
    
    public static postMediaTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMediaTypeAvailableCompositionsResponses, PostMediaTypeAvailableCompositionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMediaTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMediaTypeConfigurationResponses, GetMediaTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/configuration',
            ...options
        });
    }
    
    public static postMediaTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeFolderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMediaTypeFolderResponses, PostMediaTypeFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMediaTypeFolderByIdResponses, DeleteMediaTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options
        });
    }
    
    public static getMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaTypeFolderByIdResponses, GetMediaTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options
        });
    }
    
    public static putMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaTypeFolderByIdResponses, PutMediaTypeFolderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postMediaTypeImport<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeImportData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMediaTypeImportResponses, PostMediaTypeImportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTreeMediaTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaTypeAncestorsResponses, GetTreeMediaTypeAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/ancestors',
            ...options
        });
    }
    
    public static getTreeMediaTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaTypeChildrenResponses, GetTreeMediaTypeChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/children',
            ...options
        });
    }
    
    public static getTreeMediaTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaTypeRootResponses, GetTreeMediaTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/root',
            ...options
        });
    }
    
    public static getTreeMediaTypeSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaTypeSiblingsResponses, GetTreeMediaTypeSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/siblings',
            ...options
        });
    }
}

export class MediaService {
    public static getCollectionMedia<ThrowOnError extends boolean = true>(options?: Options<GetCollectionMediaData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCollectionMediaResponses, GetCollectionMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/collection/media',
            ...options
        });
    }
    
    public static getItemMedia<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMediaResponses, GetItemMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media',
            ...options
        });
    }
    
    public static getItemMediaSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMediaSearchResponses, GetItemMediaSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media/search',
            ...options
        });
    }
    
    public static postMedia<ThrowOnError extends boolean = true>(options?: Options<PostMediaData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMediaResponses, PostMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMediaByIdResponses, DeleteMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options
        });
    }
    
    public static getMediaById<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaByIdResponses, GetMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options
        });
    }
    
    public static putMediaById<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaByIdResponses, PutMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaByIdAuditLog<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdAuditLogData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaByIdAuditLogResponses, GetMediaByIdAuditLogErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/audit-log',
            ...options
        });
    }
    
    public static putMediaByIdMove<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdMoveData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaByIdMoveResponses, PutMediaByIdMoveErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putMediaByIdMoveToRecycleBin<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdMoveToRecycleBinData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaByIdMoveToRecycleBinResponses, PutMediaByIdMoveToRecycleBinErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',
            ...options
        });
    }
    
    public static getMediaByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaByIdReferencedByResponses, GetMediaByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/referenced-by',
            ...options
        });
    }
    
    public static getMediaByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? client).get<GetMediaByIdReferencedDescendantsResponses, GetMediaByIdReferencedDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putMediaByIdValidate<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdValidateData, ThrowOnError>) {
        return (options.client ?? client).put<PutMediaByIdValidateResponses, PutMediaByIdValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMediaAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetMediaAreReferencedData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMediaAreReferencedResponses, GetMediaAreReferencedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/are-referenced',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static getMediaConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMediaConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMediaConfigurationResponses, GetMediaConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/configuration',
            ...options
        });
    }
    
    public static putMediaSort<ThrowOnError extends boolean = true>(options?: Options<PutMediaSortData, ThrowOnError>) {
        return (options?.client ?? client).put<PutMediaSortResponses, PutMediaSortErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaUrls<ThrowOnError extends boolean = true>(options?: Options<GetMediaUrlsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMediaUrlsResponses, GetMediaUrlsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/urls',
            ...options
        });
    }
    
    public static postMediaValidate<ThrowOnError extends boolean = true>(options?: Options<PostMediaValidateData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMediaValidateResponses, PostMediaValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteRecycleBinMedia<ThrowOnError extends boolean = true>(options?: Options<DeleteRecycleBinMediaData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteRecycleBinMediaResponses, DeleteRecycleBinMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media',
            ...options
        });
    }
    
    public static deleteRecycleBinMediaById<ThrowOnError extends boolean = true>(options: Options<DeleteRecycleBinMediaByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteRecycleBinMediaByIdResponses, DeleteRecycleBinMediaByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',
            ...options
        });
    }
    
    public static getRecycleBinMediaByIdOriginalParent<ThrowOnError extends boolean = true>(options: Options<GetRecycleBinMediaByIdOriginalParentData, ThrowOnError>) {
        return (options.client ?? client).get<GetRecycleBinMediaByIdOriginalParentResponses, GetRecycleBinMediaByIdOriginalParentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',
            ...options
        });
    }
    
    public static putRecycleBinMediaByIdRestore<ThrowOnError extends boolean = true>(options: Options<PutRecycleBinMediaByIdRestoreData, ThrowOnError>) {
        return (options.client ?? client).put<PutRecycleBinMediaByIdRestoreResponses, PutRecycleBinMediaByIdRestoreErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getRecycleBinMediaChildren<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinMediaChildrenResponses, GetRecycleBinMediaChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/children',
            ...options
        });
    }
    
    public static getRecycleBinMediaReferencedBy<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaReferencedByData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinMediaReferencedByResponses, GetRecycleBinMediaReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/referenced-by',
            ...options
        });
    }
    
    public static getRecycleBinMediaRoot<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinMediaRootResponses, GetRecycleBinMediaRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/root',
            ...options
        });
    }
    
    public static getRecycleBinMediaSiblings<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecycleBinMediaSiblingsResponses, GetRecycleBinMediaSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/siblings',
            ...options
        });
    }
    
    public static getTreeMediaAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaAncestorsResponses, GetTreeMediaAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/ancestors',
            ...options
        });
    }
    
    public static getTreeMediaChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaChildrenResponses, GetTreeMediaChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/children',
            ...options
        });
    }
    
    public static getTreeMediaRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaRootResponses, GetTreeMediaRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/root',
            ...options
        });
    }
    
    public static getTreeMediaSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMediaSiblingsResponses, GetTreeMediaSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/siblings',
            ...options
        });
    }
}

export class MemberGroupService {
    public static getItemMemberGroup<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberGroupData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMemberGroupResponses, GetItemMemberGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-group',
            ...options
        });
    }
    
    public static getMemberGroup<ThrowOnError extends boolean = true>(options?: Options<GetMemberGroupData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMemberGroupResponses, GetMemberGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group',
            ...options
        });
    }
    
    public static postMemberGroup<ThrowOnError extends boolean = true>(options?: Options<PostMemberGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMemberGroupResponses, PostMemberGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberGroupById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMemberGroupByIdResponses, DeleteMemberGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options
        });
    }
    
    public static getMemberGroupById<ThrowOnError extends boolean = true>(options: Options<GetMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetMemberGroupByIdResponses, GetMemberGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options
        });
    }
    
    public static putMemberGroupById<ThrowOnError extends boolean = true>(options: Options<PutMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutMemberGroupByIdResponses, PutMemberGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getTreeMemberGroupRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMemberGroupRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMemberGroupRootResponses, GetTreeMemberGroupRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/member-group/root',
            ...options
        });
    }
}

export class MemberTypeService {
    public static getItemMemberType<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMemberTypeResponses, GetItemMemberTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-type',
            ...options
        });
    }
    
    public static getItemMemberTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberTypeSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMemberTypeSearchResponses, GetItemMemberTypeSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-type/search',
            ...options
        });
    }
    
    public static postMemberType<ThrowOnError extends boolean = true>(options?: Options<PostMemberTypeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMemberTypeResponses, PostMemberTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMemberTypeByIdResponses, DeleteMemberTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options
        });
    }
    
    public static getMemberTypeById<ThrowOnError extends boolean = true>(options: Options<GetMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetMemberTypeByIdResponses, GetMemberTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options
        });
    }
    
    public static putMemberTypeById<ThrowOnError extends boolean = true>(options: Options<PutMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutMemberTypeByIdResponses, PutMemberTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMemberTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetMemberTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? client).get<GetMemberTypeByIdCompositionReferencesResponses, GetMemberTypeByIdCompositionReferencesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postMemberTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostMemberTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? client).post<PostMemberTypeByIdCopyResponses, PostMemberTypeByIdCopyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}/copy',
            ...options
        });
    }
    
    public static postMemberTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostMemberTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMemberTypeAvailableCompositionsResponses, PostMemberTypeAvailableCompositionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMemberTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMemberTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMemberTypeConfigurationResponses, GetMemberTypeConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/configuration',
            ...options
        });
    }
    
    public static getTreeMemberTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMemberTypeRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMemberTypeRootResponses, GetTreeMemberTypeRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/member-type/root',
            ...options
        });
    }
    
    public static getTreeMemberTypeSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeMemberTypeSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeMemberTypeSiblingsResponses, GetTreeMemberTypeSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/member-type/siblings',
            ...options
        });
    }
}

export class MemberService {
    public static getFilterMember<ThrowOnError extends boolean = true>(options?: Options<GetFilterMemberData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFilterMemberResponses, GetFilterMemberErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/member',
            ...options
        });
    }
    
    public static getItemMember<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMemberResponses, GetItemMemberErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member',
            ...options
        });
    }
    
    public static getItemMemberSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemMemberSearchResponses, GetItemMemberSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member/search',
            ...options
        });
    }
    
    public static postMember<ThrowOnError extends boolean = true>(options?: Options<PostMemberData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMemberResponses, PostMemberErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteMemberByIdResponses, DeleteMemberByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options
        });
    }
    
    public static getMemberById<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetMemberByIdResponses, GetMemberByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options
        });
    }
    
    public static putMemberById<ThrowOnError extends boolean = true>(options: Options<PutMemberByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutMemberByIdResponses, PutMemberByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMemberByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? client).get<GetMemberByIdReferencedByResponses, GetMemberByIdReferencedByErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/referenced-by',
            ...options
        });
    }
    
    public static getMemberByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? client).get<GetMemberByIdReferencedDescendantsResponses, GetMemberByIdReferencedDescendantsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putMemberByIdValidate<ThrowOnError extends boolean = true>(options: Options<PutMemberByIdValidateData, ThrowOnError>) {
        return (options.client ?? client).put<PutMemberByIdValidateResponses, PutMemberByIdValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getMemberAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetMemberAreReferencedData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMemberAreReferencedResponses, GetMemberAreReferencedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/are-referenced',
            ...options
        });
    }
    
    public static getMemberConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMemberConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetMemberConfigurationResponses, GetMemberConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/configuration',
            ...options
        });
    }
    
    public static postMemberValidate<ThrowOnError extends boolean = true>(options?: Options<PostMemberValidateData, ThrowOnError>) {
        return (options?.client ?? client).post<PostMemberValidateResponses, PostMemberValidateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class ModelsBuilderService {
    public static postModelsBuilderBuild<ThrowOnError extends boolean = true>(options?: Options<PostModelsBuilderBuildData, ThrowOnError>) {
        return (options?.client ?? client).post<PostModelsBuilderBuildResponses, PostModelsBuilderBuildErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/build',
            ...options
        });
    }
    
    public static getModelsBuilderDashboard<ThrowOnError extends boolean = true>(options?: Options<GetModelsBuilderDashboardData, ThrowOnError>) {
        return (options?.client ?? client).get<GetModelsBuilderDashboardResponses, GetModelsBuilderDashboardErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/dashboard',
            ...options
        });
    }
    
    public static getModelsBuilderStatus<ThrowOnError extends boolean = true>(options?: Options<GetModelsBuilderStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<GetModelsBuilderStatusResponses, GetModelsBuilderStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/status',
            ...options
        });
    }
}

export class ObjectTypesService {
    public static getObjectTypes<ThrowOnError extends boolean = true>(options?: Options<GetObjectTypesData, ThrowOnError>) {
        return (options?.client ?? client).get<GetObjectTypesResponses, GetObjectTypesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/object-types',
            ...options
        });
    }
}

export class OEmbedService {
    public static getOembedQuery<ThrowOnError extends boolean = true>(options?: Options<GetOembedQueryData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOembedQueryResponses, GetOembedQueryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/oembed/query',
            ...options
        });
    }
}

export class PackageService {
    public static postPackageByNameRunMigration<ThrowOnError extends boolean = true>(options: Options<PostPackageByNameRunMigrationData, ThrowOnError>) {
        return (options.client ?? client).post<PostPackageByNameRunMigrationResponses, PostPackageByNameRunMigrationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/{name}/run-migration',
            ...options
        });
    }
    
    public static getPackageConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetPackageConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPackageConfigurationResponses, GetPackageConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/configuration',
            ...options
        });
    }
    
    public static getPackageCreated<ThrowOnError extends boolean = true>(options?: Options<GetPackageCreatedData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPackageCreatedResponses, GetPackageCreatedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created',
            ...options
        });
    }
    
    public static postPackageCreated<ThrowOnError extends boolean = true>(options?: Options<PostPackageCreatedData, ThrowOnError>) {
        return (options?.client ?? client).post<PostPackageCreatedResponses, PostPackageCreatedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePackageCreatedById<ThrowOnError extends boolean = true>(options: Options<DeletePackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeletePackageCreatedByIdResponses, DeletePackageCreatedByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options
        });
    }
    
    public static getPackageCreatedById<ThrowOnError extends boolean = true>(options: Options<GetPackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetPackageCreatedByIdResponses, GetPackageCreatedByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options
        });
    }
    
    public static putPackageCreatedById<ThrowOnError extends boolean = true>(options: Options<PutPackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutPackageCreatedByIdResponses, PutPackageCreatedByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getPackageCreatedByIdDownload<ThrowOnError extends boolean = true>(options: Options<GetPackageCreatedByIdDownloadData, ThrowOnError>) {
        return (options.client ?? client).get<GetPackageCreatedByIdDownloadResponses, GetPackageCreatedByIdDownloadErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}/download',
            ...options
        });
    }
    
    public static getPackageMigrationStatus<ThrowOnError extends boolean = true>(options?: Options<GetPackageMigrationStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPackageMigrationStatusResponses, GetPackageMigrationStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/migration-status',
            ...options
        });
    }
}

export class PartialViewService {
    public static getItemPartialView<ThrowOnError extends boolean = true>(options?: Options<GetItemPartialViewData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemPartialViewResponses, GetItemPartialViewErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/partial-view',
            ...options
        });
    }
    
    public static postPartialView<ThrowOnError extends boolean = true>(options?: Options<PostPartialViewData, ThrowOnError>) {
        return (options?.client ?? client).post<PostPartialViewResponses, PostPartialViewErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePartialViewByPath<ThrowOnError extends boolean = true>(options: Options<DeletePartialViewByPathData, ThrowOnError>) {
        return (options.client ?? client).delete<DeletePartialViewByPathResponses, DeletePartialViewByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options
        });
    }
    
    public static getPartialViewByPath<ThrowOnError extends boolean = true>(options: Options<GetPartialViewByPathData, ThrowOnError>) {
        return (options.client ?? client).get<GetPartialViewByPathResponses, GetPartialViewByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options
        });
    }
    
    public static putPartialViewByPath<ThrowOnError extends boolean = true>(options: Options<PutPartialViewByPathData, ThrowOnError>) {
        return (options.client ?? client).put<PutPartialViewByPathResponses, PutPartialViewByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putPartialViewByPathRename<ThrowOnError extends boolean = true>(options: Options<PutPartialViewByPathRenameData, ThrowOnError>) {
        return (options.client ?? client).put<PutPartialViewByPathRenameResponses, PutPartialViewByPathRenameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postPartialViewFolder<ThrowOnError extends boolean = true>(options?: Options<PostPartialViewFolderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostPartialViewFolderResponses, PostPartialViewFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePartialViewFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeletePartialViewFolderByPathData, ThrowOnError>) {
        return (options.client ?? client).delete<DeletePartialViewFolderByPathResponses, DeletePartialViewFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            ...options
        });
    }
    
    public static getPartialViewFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetPartialViewFolderByPathData, ThrowOnError>) {
        return (options.client ?? client).get<GetPartialViewFolderByPathResponses, GetPartialViewFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            ...options
        });
    }
    
    public static getPartialViewSnippet<ThrowOnError extends boolean = true>(options?: Options<GetPartialViewSnippetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPartialViewSnippetResponses, GetPartialViewSnippetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/snippet',
            ...options
        });
    }
    
    public static getPartialViewSnippetById<ThrowOnError extends boolean = true>(options: Options<GetPartialViewSnippetByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetPartialViewSnippetByIdResponses, GetPartialViewSnippetByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',
            ...options
        });
    }
    
    public static getTreePartialViewAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreePartialViewAncestorsResponses, GetTreePartialViewAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',
            ...options
        });
    }
    
    public static getTreePartialViewChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreePartialViewChildrenResponses, GetTreePartialViewChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/children',
            ...options
        });
    }
    
    public static getTreePartialViewRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreePartialViewRootResponses, GetTreePartialViewRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/root',
            ...options
        });
    }
    
    public static getTreePartialViewSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreePartialViewSiblingsResponses, GetTreePartialViewSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/siblings',
            ...options
        });
    }
}

export class PreviewService {
    public static deletePreview<ThrowOnError extends boolean = true>(options?: Options<DeletePreviewData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePreviewResponses, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/preview',
            ...options
        });
    }
    
    public static postPreview<ThrowOnError extends boolean = true>(options?: Options<PostPreviewData, ThrowOnError>) {
        return (options?.client ?? client).post<PostPreviewResponses, PostPreviewErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/preview',
            ...options
        });
    }
}

export class ProfilingService {
    public static getProfilingStatus<ThrowOnError extends boolean = true>(options?: Options<GetProfilingStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<GetProfilingStatusResponses, GetProfilingStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/profiling/status',
            ...options
        });
    }
    
    public static putProfilingStatus<ThrowOnError extends boolean = true>(options?: Options<PutProfilingStatusData, ThrowOnError>) {
        return (options?.client ?? client).put<PutProfilingStatusResponses, PutProfilingStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/profiling/status',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class PropertyTypeService {
    public static getPropertyTypeIsUsed<ThrowOnError extends boolean = true>(options?: Options<GetPropertyTypeIsUsedData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPropertyTypeIsUsedResponses, GetPropertyTypeIsUsedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/property-type/is-used',
            ...options
        });
    }
}

export class PublishedCacheService {
    public static postPublishedCacheRebuild<ThrowOnError extends boolean = true>(options?: Options<PostPublishedCacheRebuildData, ThrowOnError>) {
        return (options?.client ?? client).post<PostPublishedCacheRebuildResponses, PostPublishedCacheRebuildErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/rebuild',
            ...options
        });
    }
    
    public static getPublishedCacheRebuildStatus<ThrowOnError extends boolean = true>(options?: Options<GetPublishedCacheRebuildStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPublishedCacheRebuildStatusResponses, GetPublishedCacheRebuildStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/rebuild/status',
            ...options
        });
    }
    
    public static postPublishedCacheReload<ThrowOnError extends boolean = true>(options?: Options<PostPublishedCacheReloadData, ThrowOnError>) {
        return (options?.client ?? client).post<PostPublishedCacheReloadResponses, PostPublishedCacheReloadErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/reload',
            ...options
        });
    }
}

export class RedirectManagementService {
    public static getRedirectManagement<ThrowOnError extends boolean = true>(options?: Options<GetRedirectManagementData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRedirectManagementResponses, GetRedirectManagementErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management',
            ...options
        });
    }
    
    public static deleteRedirectManagementById<ThrowOnError extends boolean = true>(options: Options<DeleteRedirectManagementByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteRedirectManagementByIdResponses, DeleteRedirectManagementByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            ...options
        });
    }
    
    public static getRedirectManagementById<ThrowOnError extends boolean = true>(options: Options<GetRedirectManagementByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetRedirectManagementByIdResponses, GetRedirectManagementByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            ...options
        });
    }
    
    public static getRedirectManagementStatus<ThrowOnError extends boolean = true>(options?: Options<GetRedirectManagementStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRedirectManagementStatusResponses, GetRedirectManagementStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/status',
            ...options
        });
    }
    
    public static postRedirectManagementStatus<ThrowOnError extends boolean = true>(options?: Options<PostRedirectManagementStatusData, ThrowOnError>) {
        return (options?.client ?? client).post<PostRedirectManagementStatusResponses, PostRedirectManagementStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/status',
            ...options
        });
    }
}

export class RelationTypeService {
    public static getItemRelationType<ThrowOnError extends boolean = true>(options?: Options<GetItemRelationTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemRelationTypeResponses, GetItemRelationTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/relation-type',
            ...options
        });
    }
    
    public static getRelationType<ThrowOnError extends boolean = true>(options?: Options<GetRelationTypeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetRelationTypeResponses, GetRelationTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation-type',
            ...options
        });
    }
    
    public static getRelationTypeById<ThrowOnError extends boolean = true>(options: Options<GetRelationTypeByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetRelationTypeByIdResponses, GetRelationTypeByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation-type/{id}',
            ...options
        });
    }
}

export class RelationService {
    public static getRelationByRelationTypeId<ThrowOnError extends boolean = true>(options: Options<GetRelationByRelationTypeIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetRelationByRelationTypeIdResponses, GetRelationByRelationTypeIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation/type/{id}',
            ...options
        });
    }
}

export class ScriptService {
    public static getItemScript<ThrowOnError extends boolean = true>(options?: Options<GetItemScriptData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemScriptResponses, GetItemScriptErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/script',
            ...options
        });
    }
    
    public static postScript<ThrowOnError extends boolean = true>(options?: Options<PostScriptData, ThrowOnError>) {
        return (options?.client ?? client).post<PostScriptResponses, PostScriptErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteScriptByPath<ThrowOnError extends boolean = true>(options: Options<DeleteScriptByPathData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteScriptByPathResponses, DeleteScriptByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options
        });
    }
    
    public static getScriptByPath<ThrowOnError extends boolean = true>(options: Options<GetScriptByPathData, ThrowOnError>) {
        return (options.client ?? client).get<GetScriptByPathResponses, GetScriptByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options
        });
    }
    
    public static putScriptByPath<ThrowOnError extends boolean = true>(options: Options<PutScriptByPathData, ThrowOnError>) {
        return (options.client ?? client).put<PutScriptByPathResponses, PutScriptByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putScriptByPathRename<ThrowOnError extends boolean = true>(options: Options<PutScriptByPathRenameData, ThrowOnError>) {
        return (options.client ?? client).put<PutScriptByPathRenameResponses, PutScriptByPathRenameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postScriptFolder<ThrowOnError extends boolean = true>(options?: Options<PostScriptFolderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostScriptFolderResponses, PostScriptFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteScriptFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeleteScriptFolderByPathData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteScriptFolderByPathResponses, DeleteScriptFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder/{path}',
            ...options
        });
    }
    
    public static getScriptFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetScriptFolderByPathData, ThrowOnError>) {
        return (options.client ?? client).get<GetScriptFolderByPathResponses, GetScriptFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder/{path}',
            ...options
        });
    }
    
    public static getTreeScriptAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeScriptAncestorsResponses, GetTreeScriptAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/ancestors',
            ...options
        });
    }
    
    public static getTreeScriptChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeScriptChildrenResponses, GetTreeScriptChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/children',
            ...options
        });
    }
    
    public static getTreeScriptRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeScriptRootResponses, GetTreeScriptRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/root',
            ...options
        });
    }
    
    public static getTreeScriptSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeScriptSiblingsResponses, GetTreeScriptSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/siblings',
            ...options
        });
    }
}

export class SearcherService {
    public static getSearcher<ThrowOnError extends boolean = true>(options?: Options<GetSearcherData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSearcherResponses, GetSearcherErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/searcher',
            ...options
        });
    }
    
    public static getSearcherBySearcherNameQuery<ThrowOnError extends boolean = true>(options: Options<GetSearcherBySearcherNameQueryData, ThrowOnError>) {
        return (options.client ?? client).get<GetSearcherBySearcherNameQueryResponses, GetSearcherBySearcherNameQueryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',
            ...options
        });
    }
}

export class SecurityService {
    public static getSecurityConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetSecurityConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSecurityConfigurationResponses, GetSecurityConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/configuration',
            ...options
        });
    }
    
    public static postSecurityForgotPassword<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<PostSecurityForgotPasswordResponses, PostSecurityForgotPasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/forgot-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postSecurityForgotPasswordReset<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordResetData, ThrowOnError>) {
        return (options?.client ?? client).post<PostSecurityForgotPasswordResetResponses, PostSecurityForgotPasswordResetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/forgot-password/reset',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postSecurityForgotPasswordVerify<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordVerifyData, ThrowOnError>) {
        return (options?.client ?? client).post<PostSecurityForgotPasswordVerifyResponses, PostSecurityForgotPasswordVerifyErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/security/forgot-password/verify',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class SegmentService {
    public static getSegment<ThrowOnError extends boolean = true>(options?: Options<GetSegmentData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSegmentResponses, GetSegmentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/segment',
            ...options
        });
    }
}

export class ServerService {
    public static getServerConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetServerConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetServerConfigurationResponses, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/server/configuration',
            ...options
        });
    }
    
    public static getServerInformation<ThrowOnError extends boolean = true>(options?: Options<GetServerInformationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetServerInformationResponses, GetServerInformationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/information',
            ...options
        });
    }
    
    public static getServerStatus<ThrowOnError extends boolean = true>(options?: Options<GetServerStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<GetServerStatusResponses, GetServerStatusErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/server/status',
            ...options
        });
    }
    
    public static getServerTroubleshooting<ThrowOnError extends boolean = true>(options?: Options<GetServerTroubleshootingData, ThrowOnError>) {
        return (options?.client ?? client).get<GetServerTroubleshootingResponses, GetServerTroubleshootingErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/troubleshooting',
            ...options
        });
    }
    
    public static getServerUpgradeCheck<ThrowOnError extends boolean = true>(options?: Options<GetServerUpgradeCheckData, ThrowOnError>) {
        return (options?.client ?? client).get<GetServerUpgradeCheckResponses, GetServerUpgradeCheckErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/upgrade-check',
            ...options
        });
    }
}

export class StaticFileService {
    public static getItemStaticFile<ThrowOnError extends boolean = true>(options?: Options<GetItemStaticFileData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemStaticFileResponses, GetItemStaticFileErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/static-file',
            ...options
        });
    }
    
    public static getTreeStaticFileAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeStaticFileAncestorsResponses, GetTreeStaticFileAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/ancestors',
            ...options
        });
    }
    
    public static getTreeStaticFileChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeStaticFileChildrenResponses, GetTreeStaticFileChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/children',
            ...options
        });
    }
    
    public static getTreeStaticFileRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeStaticFileRootResponses, GetTreeStaticFileRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/root',
            ...options
        });
    }
}

export class StylesheetService {
    public static getItemStylesheet<ThrowOnError extends boolean = true>(options?: Options<GetItemStylesheetData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemStylesheetResponses, GetItemStylesheetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/stylesheet',
            ...options
        });
    }
    
    public static postStylesheet<ThrowOnError extends boolean = true>(options?: Options<PostStylesheetData, ThrowOnError>) {
        return (options?.client ?? client).post<PostStylesheetResponses, PostStylesheetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<DeleteStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteStylesheetByPathResponses, DeleteStylesheetByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options
        });
    }
    
    public static getStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<GetStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? client).get<GetStylesheetByPathResponses, GetStylesheetByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options
        });
    }
    
    public static putStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<PutStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? client).put<PutStylesheetByPathResponses, PutStylesheetByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static putStylesheetByPathRename<ThrowOnError extends boolean = true>(options: Options<PutStylesheetByPathRenameData, ThrowOnError>) {
        return (options.client ?? client).put<PutStylesheetByPathRenameResponses, PutStylesheetByPathRenameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postStylesheetFolder<ThrowOnError extends boolean = true>(options?: Options<PostStylesheetFolderData, ThrowOnError>) {
        return (options?.client ?? client).post<PostStylesheetFolderResponses, PostStylesheetFolderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteStylesheetFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeleteStylesheetFolderByPathData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteStylesheetFolderByPathResponses, DeleteStylesheetFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            ...options
        });
    }
    
    public static getStylesheetFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetStylesheetFolderByPathData, ThrowOnError>) {
        return (options.client ?? client).get<GetStylesheetFolderByPathResponses, GetStylesheetFolderByPathErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            ...options
        });
    }
    
    public static getTreeStylesheetAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeStylesheetAncestorsResponses, GetTreeStylesheetAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',
            ...options
        });
    }
    
    public static getTreeStylesheetChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeStylesheetChildrenResponses, GetTreeStylesheetChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/children',
            ...options
        });
    }
    
    public static getTreeStylesheetRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeStylesheetRootResponses, GetTreeStylesheetRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/root',
            ...options
        });
    }
    
    public static getTreeStylesheetSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeStylesheetSiblingsResponses, GetTreeStylesheetSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/siblings',
            ...options
        });
    }
}

export class TagService {
    public static getTag<ThrowOnError extends boolean = true>(options?: Options<GetTagData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTagResponses, GetTagErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tag',
            ...options
        });
    }
}

export class TelemetryService {
    public static getTelemetry<ThrowOnError extends boolean = true>(options?: Options<GetTelemetryData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTelemetryResponses, GetTelemetryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry',
            ...options
        });
    }
    
    public static getTelemetryLevel<ThrowOnError extends boolean = true>(options?: Options<GetTelemetryLevelData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTelemetryLevelResponses, GetTelemetryLevelErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry/level',
            ...options
        });
    }
    
    public static postTelemetryLevel<ThrowOnError extends boolean = true>(options?: Options<PostTelemetryLevelData, ThrowOnError>) {
        return (options?.client ?? client).post<PostTelemetryLevelResponses, PostTelemetryLevelErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry/level',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class TemplateService {
    public static getItemTemplate<ThrowOnError extends boolean = true>(options?: Options<GetItemTemplateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemTemplateResponses, GetItemTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/template',
            ...options
        });
    }
    
    public static getItemTemplateSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemTemplateSearchData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemTemplateSearchResponses, GetItemTemplateSearchErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/template/search',
            ...options
        });
    }
    
    public static postTemplate<ThrowOnError extends boolean = true>(options?: Options<PostTemplateData, ThrowOnError>) {
        return (options?.client ?? client).post<PostTemplateResponses, PostTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteTemplateById<ThrowOnError extends boolean = true>(options: Options<DeleteTemplateByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTemplateByIdResponses, DeleteTemplateByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options
        });
    }
    
    public static getTemplateById<ThrowOnError extends boolean = true>(options: Options<GetTemplateByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetTemplateByIdResponses, GetTemplateByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options
        });
    }
    
    public static putTemplateById<ThrowOnError extends boolean = true>(options: Options<PutTemplateByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutTemplateByIdResponses, PutTemplateByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getTemplateConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetTemplateConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTemplateConfigurationResponses, GetTemplateConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/configuration',
            ...options
        });
    }
    
    public static postTemplateQueryExecute<ThrowOnError extends boolean = true>(options?: Options<PostTemplateQueryExecuteData, ThrowOnError>) {
        return (options?.client ?? client).post<PostTemplateQueryExecuteResponses, PostTemplateQueryExecuteErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/query/execute',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTemplateQuerySettings<ThrowOnError extends boolean = true>(options?: Options<GetTemplateQuerySettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTemplateQuerySettingsResponses, GetTemplateQuerySettingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/query/settings',
            ...options
        });
    }
    
    public static getTreeTemplateAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateAncestorsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeTemplateAncestorsResponses, GetTreeTemplateAncestorsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/ancestors',
            ...options
        });
    }
    
    public static getTreeTemplateChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateChildrenData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeTemplateChildrenResponses, GetTreeTemplateChildrenErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/children',
            ...options
        });
    }
    
    public static getTreeTemplateRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateRootData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeTemplateRootResponses, GetTreeTemplateRootErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/root',
            ...options
        });
    }
    
    public static getTreeTemplateSiblings<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateSiblingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTreeTemplateSiblingsResponses, GetTreeTemplateSiblingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/siblings',
            ...options
        });
    }
}

export class TemporaryFileService {
    public static postTemporaryFile<ThrowOnError extends boolean = true>(options?: Options<PostTemporaryFileData, ThrowOnError>) {
        return (options?.client ?? client).post<PostTemporaryFileResponses, PostTemporaryFileErrors, ThrowOnError>({
            ...formDataBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file',
            ...options,
            headers: {
                'Content-Type': null,
                ...options?.headers
            }
        });
    }
    
    public static deleteTemporaryFileById<ThrowOnError extends boolean = true>(options: Options<DeleteTemporaryFileByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteTemporaryFileByIdResponses, DeleteTemporaryFileByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            ...options
        });
    }
    
    public static getTemporaryFileById<ThrowOnError extends boolean = true>(options: Options<GetTemporaryFileByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetTemporaryFileByIdResponses, GetTemporaryFileByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            ...options
        });
    }
    
    public static getTemporaryFileConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetTemporaryFileConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetTemporaryFileConfigurationResponses, GetTemporaryFileConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/configuration',
            ...options
        });
    }
}

export class UpgradeService {
    public static postUpgradeAuthorize<ThrowOnError extends boolean = true>(options?: Options<PostUpgradeAuthorizeData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUpgradeAuthorizeResponses, PostUpgradeAuthorizeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/upgrade/authorize',
            ...options
        });
    }
    
    public static getUpgradeSettings<ThrowOnError extends boolean = true>(options?: Options<GetUpgradeSettingsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUpgradeSettingsResponses, GetUpgradeSettingsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/upgrade/settings',
            ...options
        });
    }
}

export class UserDataService {
    public static getUserData<ThrowOnError extends boolean = true>(options?: Options<GetUserDataData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserDataResponses, GetUserDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options
        });
    }
    
    public static postUserData<ThrowOnError extends boolean = true>(options?: Options<PostUserDataData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserDataResponses, PostUserDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putUserData<ThrowOnError extends boolean = true>(options?: Options<PutUserDataData, ThrowOnError>) {
        return (options?.client ?? client).put<PutUserDataResponses, PutUserDataErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserDataById<ThrowOnError extends boolean = true>(options: Options<DeleteUserDataByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserDataByIdResponses, DeleteUserDataByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data/{id}',
            ...options
        });
    }
    
    public static getUserDataById<ThrowOnError extends boolean = true>(options: Options<GetUserDataByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserDataByIdResponses, GetUserDataByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data/{id}',
            ...options
        });
    }
}

export class UserGroupService {
    public static getFilterUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetFilterUserGroupData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFilterUserGroupResponses, GetFilterUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/user-group',
            ...options
        });
    }
    
    public static getItemUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetItemUserGroupData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemUserGroupResponses, GetItemUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/user-group',
            ...options
        });
    }
    
    public static deleteUserGroup<ThrowOnError extends boolean = true>(options?: Options<DeleteUserGroupData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteUserGroupResponses, DeleteUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetUserGroupData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserGroupResponses, GetUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options
        });
    }
    
    public static postUserGroup<ThrowOnError extends boolean = true>(options?: Options<PostUserGroupData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserGroupResponses, PostUserGroupErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserGroupById<ThrowOnError extends boolean = true>(options: Options<DeleteUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserGroupByIdResponses, DeleteUserGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options
        });
    }
    
    public static getUserGroupById<ThrowOnError extends boolean = true>(options: Options<GetUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserGroupByIdResponses, GetUserGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options
        });
    }
    
    public static putUserGroupById<ThrowOnError extends boolean = true>(options: Options<PutUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutUserGroupByIdResponses, PutUserGroupByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteUserGroupByIdUsers<ThrowOnError extends boolean = true>(options: Options<DeleteUserGroupByIdUsersData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserGroupByIdUsersResponses, DeleteUserGroupByIdUsersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postUserGroupByIdUsers<ThrowOnError extends boolean = true>(options: Options<PostUserGroupByIdUsersData, ThrowOnError>) {
        return (options.client ?? client).post<PostUserGroupByIdUsersResponses, PostUserGroupByIdUsersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class UserService {
    public static getFilterUser<ThrowOnError extends boolean = true>(options?: Options<GetFilterUserData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFilterUserResponses, GetFilterUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/user',
            ...options
        });
    }
    
    public static getItemUser<ThrowOnError extends boolean = true>(options?: Options<GetItemUserData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemUserResponses, GetItemUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/user',
            ...options
        });
    }
    
    public static deleteUser<ThrowOnError extends boolean = true>(options?: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUser<ThrowOnError extends boolean = true>(options?: Options<GetUserData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserResponses, GetUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options
        });
    }
    
    public static postUser<ThrowOnError extends boolean = true>(options?: Options<PostUserData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserResponses, PostUserErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserById<ThrowOnError extends boolean = true>(options: Options<DeleteUserByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserByIdResponses, DeleteUserByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options
        });
    }
    
    public static getUserById<ThrowOnError extends boolean = true>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options
        });
    }
    
    public static putUserById<ThrowOnError extends boolean = true>(options: Options<PutUserByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutUserByIdResponses, PutUserByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getUserById2Fa<ThrowOnError extends boolean = true>(options: Options<GetUserById2FaData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserById2FaResponses, GetUserById2FaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/2fa',
            ...options
        });
    }
    
    public static deleteUserById2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<DeleteUserById2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserById2FaByProviderNameResponses, DeleteUserById2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',
            ...options
        });
    }
    
    public static getUserByIdCalculateStartNodes<ThrowOnError extends boolean = true>(options: Options<GetUserByIdCalculateStartNodesData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserByIdCalculateStartNodesResponses, GetUserByIdCalculateStartNodesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/calculate-start-nodes',
            ...options
        });
    }
    
    public static postUserByIdChangePassword<ThrowOnError extends boolean = true>(options: Options<PostUserByIdChangePasswordData, ThrowOnError>) {
        return (options.client ?? client).post<PostUserByIdChangePasswordResponses, PostUserByIdChangePasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/change-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getUserByIdClientCredentials<ThrowOnError extends boolean = true>(options: Options<GetUserByIdClientCredentialsData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserByIdClientCredentialsResponses, GetUserByIdClientCredentialsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            ...options
        });
    }
    
    public static postUserByIdClientCredentials<ThrowOnError extends boolean = true>(options: Options<PostUserByIdClientCredentialsData, ThrowOnError>) {
        return (options.client ?? client).post<PostUserByIdClientCredentialsResponses, PostUserByIdClientCredentialsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteUserByIdClientCredentialsByClientId<ThrowOnError extends boolean = true>(options: Options<DeleteUserByIdClientCredentialsByClientIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserByIdClientCredentialsByClientIdResponses, DeleteUserByIdClientCredentialsByClientIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials/{clientId}',
            ...options
        });
    }
    
    public static postUserByIdResetPassword<ThrowOnError extends boolean = true>(options: Options<PostUserByIdResetPasswordData, ThrowOnError>) {
        return (options.client ?? client).post<PostUserByIdResetPasswordResponses, PostUserByIdResetPasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/reset-password',
            ...options
        });
    }
    
    public static deleteUserAvatarById<ThrowOnError extends boolean = true>(options: Options<DeleteUserAvatarByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserAvatarByIdResponses, DeleteUserAvatarByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            ...options
        });
    }
    
    public static postUserAvatarById<ThrowOnError extends boolean = true>(options: Options<PostUserAvatarByIdData, ThrowOnError>) {
        return (options.client ?? client).post<PostUserAvatarByIdResponses, PostUserAvatarByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getUserConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetUserConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserConfigurationResponses, GetUserConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/configuration',
            ...options
        });
    }
    
    public static getUserCurrent<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserCurrentResponses, GetUserCurrentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current',
            ...options
        });
    }
    
    public static getUserCurrent2Fa<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrent2FaData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserCurrent2FaResponses, GetUserCurrent2FaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa',
            ...options
        });
    }
    
    public static deleteUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<DeleteUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteUserCurrent2FaByProviderNameResponses, DeleteUserCurrent2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options
        });
    }
    
    public static getUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<GetUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? client).get<GetUserCurrent2FaByProviderNameResponses, GetUserCurrent2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options
        });
    }
    
    public static postUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<PostUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? client).post<PostUserCurrent2FaByProviderNameResponses, PostUserCurrent2FaByProviderNameErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static postUserCurrentAvatar<ThrowOnError extends boolean = true>(options?: Options<PostUserCurrentAvatarData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserCurrentAvatarResponses, PostUserCurrentAvatarErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/avatar',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserCurrentChangePassword<ThrowOnError extends boolean = true>(options?: Options<PostUserCurrentChangePasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserCurrentChangePasswordResponses, PostUserCurrentChangePasswordErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/change-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserCurrentConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentConfigurationData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserCurrentConfigurationResponses, GetUserCurrentConfigurationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/configuration',
            ...options
        });
    }
    
    public static getUserCurrentLoginProviders<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentLoginProvidersData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserCurrentLoginProvidersResponses, GetUserCurrentLoginProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/login-providers',
            ...options
        });
    }
    
    public static getUserCurrentPermissions<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserCurrentPermissionsResponses, GetUserCurrentPermissionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions',
            ...options
        });
    }
    
    public static getUserCurrentPermissionsDocument<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsDocumentData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserCurrentPermissionsDocumentResponses, GetUserCurrentPermissionsDocumentErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions/document',
            ...options
        });
    }
    
    public static getUserCurrentPermissionsMedia<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsMediaData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserCurrentPermissionsMediaResponses, GetUserCurrentPermissionsMediaErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions/media',
            ...options
        });
    }
    
    public static postUserDisable<ThrowOnError extends boolean = true>(options?: Options<PostUserDisableData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserDisableResponses, PostUserDisableErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/disable',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserEnable<ThrowOnError extends boolean = true>(options?: Options<PostUserEnableData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserEnableResponses, PostUserEnableErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/enable',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInvite<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserInviteResponses, PostUserInviteErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/invite',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteCreatePassword<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteCreatePasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserInviteCreatePasswordResponses, PostUserInviteCreatePasswordErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/user/invite/create-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteResend<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteResendData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserInviteResendResponses, PostUserInviteResendErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/invite/resend',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteVerify<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteVerifyData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserInviteVerifyResponses, PostUserInviteVerifyErrors, ThrowOnError>({
            url: '/umbraco/management/api/v1/user/invite/verify',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserSetUserGroups<ThrowOnError extends boolean = true>(options?: Options<PostUserSetUserGroupsData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserSetUserGroupsResponses, PostUserSetUserGroupsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/set-user-groups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserUnlock<ThrowOnError extends boolean = true>(options?: Options<PostUserUnlockData, ThrowOnError>) {
        return (options?.client ?? client).post<PostUserUnlockResponses, PostUserUnlockErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/unlock',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class WebhookService {
    public static getItemWebhook<ThrowOnError extends boolean = true>(options?: Options<GetItemWebhookData, ThrowOnError>) {
        return (options?.client ?? client).get<GetItemWebhookResponses, GetItemWebhookErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/webhook',
            ...options
        });
    }
    
    public static getWebhook<ThrowOnError extends boolean = true>(options?: Options<GetWebhookData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWebhookResponses, GetWebhookErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook',
            ...options
        });
    }
    
    public static postWebhook<ThrowOnError extends boolean = true>(options?: Options<PostWebhookData, ThrowOnError>) {
        return (options?.client ?? client).post<PostWebhookResponses, PostWebhookErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteWebhookById<ThrowOnError extends boolean = true>(options: Options<DeleteWebhookByIdData, ThrowOnError>) {
        return (options.client ?? client).delete<DeleteWebhookByIdResponses, DeleteWebhookByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options
        });
    }
    
    public static getWebhookById<ThrowOnError extends boolean = true>(options: Options<GetWebhookByIdData, ThrowOnError>) {
        return (options.client ?? client).get<GetWebhookByIdResponses, GetWebhookByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options
        });
    }
    
    public static putWebhookById<ThrowOnError extends boolean = true>(options: Options<PutWebhookByIdData, ThrowOnError>) {
        return (options.client ?? client).put<PutWebhookByIdResponses, PutWebhookByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getWebhookByIdLogs<ThrowOnError extends boolean = true>(options: Options<GetWebhookByIdLogsData, ThrowOnError>) {
        return (options.client ?? client).get<GetWebhookByIdLogsResponses, GetWebhookByIdLogsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}/logs',
            ...options
        });
    }
    
    public static getWebhookEvents<ThrowOnError extends boolean = true>(options?: Options<GetWebhookEventsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWebhookEventsResponses, GetWebhookEventsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/events',
            ...options
        });
    }
    
    public static getWebhookLogs<ThrowOnError extends boolean = true>(options?: Options<GetWebhookLogsData, ThrowOnError>) {
        return (options?.client ?? client).get<GetWebhookLogsResponses, GetWebhookLogsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/logs',
            ...options
        });
    }
}
