// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetCultureData, GetCultureResponse, PostDataTypeData, PostDataTypeError, DeleteDataTypeByIdData, DeleteDataTypeByIdError, GetDataTypeByIdData, GetDataTypeByIdResponse, GetDataTypeByIdError, PutDataTypeByIdData, PutDataTypeByIdError, PostDataTypeByIdCopyData, PostDataTypeByIdCopyError, GetDataTypeByIdIsUsedData, GetDataTypeByIdIsUsedResponse, GetDataTypeByIdIsUsedError, PutDataTypeByIdMoveData, PutDataTypeByIdMoveError, GetDataTypeByIdReferencedByData, GetDataTypeByIdReferencedByResponse, GetDataTypeByIdReferencesData, GetDataTypeByIdReferencesResponse, GetDataTypeByIdReferencesError, GetDataTypeConfigurationData, GetDataTypeConfigurationResponse, PostDataTypeFolderData, PostDataTypeFolderError, DeleteDataTypeFolderByIdData, DeleteDataTypeFolderByIdError, GetDataTypeFolderByIdData, GetDataTypeFolderByIdResponse, GetDataTypeFolderByIdError, PutDataTypeFolderByIdData, PutDataTypeFolderByIdError, GetFilterDataTypeData, GetFilterDataTypeResponse, GetItemDataTypeData, GetItemDataTypeResponse, GetItemDataTypeSearchData, GetItemDataTypeSearchResponse, GetTreeDataTypeAncestorsData, GetTreeDataTypeAncestorsResponse, GetTreeDataTypeChildrenData, GetTreeDataTypeChildrenResponse, GetTreeDataTypeRootData, GetTreeDataTypeRootResponse, GetDictionaryData, GetDictionaryResponse, PostDictionaryData, PostDictionaryError, DeleteDictionaryByIdData, DeleteDictionaryByIdError, GetDictionaryByIdData, GetDictionaryByIdResponse, GetDictionaryByIdError, PutDictionaryByIdData, PutDictionaryByIdError, GetDictionaryByIdExportData, GetDictionaryByIdExportResponse, GetDictionaryByIdExportError, PutDictionaryByIdMoveData, PutDictionaryByIdMoveError, PostDictionaryImportData, PostDictionaryImportError, GetItemDictionaryData, GetItemDictionaryResponse, GetTreeDictionaryAncestorsData, GetTreeDictionaryAncestorsResponse, GetTreeDictionaryChildrenData, GetTreeDictionaryChildrenResponse, GetTreeDictionaryRootData, GetTreeDictionaryRootResponse, PostDocumentBlueprintData, PostDocumentBlueprintError, DeleteDocumentBlueprintByIdData, DeleteDocumentBlueprintByIdError, GetDocumentBlueprintByIdData, GetDocumentBlueprintByIdResponse, GetDocumentBlueprintByIdError, PutDocumentBlueprintByIdData, PutDocumentBlueprintByIdError, PutDocumentBlueprintByIdMoveData, PutDocumentBlueprintByIdMoveError, GetDocumentBlueprintByIdScaffoldData, GetDocumentBlueprintByIdScaffoldResponse, GetDocumentBlueprintByIdScaffoldError, PostDocumentBlueprintFolderData, PostDocumentBlueprintFolderError, DeleteDocumentBlueprintFolderByIdData, DeleteDocumentBlueprintFolderByIdError, GetDocumentBlueprintFolderByIdData, GetDocumentBlueprintFolderByIdResponse, GetDocumentBlueprintFolderByIdError, PutDocumentBlueprintFolderByIdData, PutDocumentBlueprintFolderByIdError, PostDocumentBlueprintFromDocumentData, PostDocumentBlueprintFromDocumentError, GetItemDocumentBlueprintData, GetItemDocumentBlueprintResponse, GetTreeDocumentBlueprintAncestorsData, GetTreeDocumentBlueprintAncestorsResponse, GetTreeDocumentBlueprintChildrenData, GetTreeDocumentBlueprintChildrenResponse, GetTreeDocumentBlueprintRootData, GetTreeDocumentBlueprintRootResponse, PostDocumentTypeData, PostDocumentTypeError, DeleteDocumentTypeByIdData, DeleteDocumentTypeByIdError, GetDocumentTypeByIdData, GetDocumentTypeByIdResponse, GetDocumentTypeByIdError, PutDocumentTypeByIdData, PutDocumentTypeByIdError, GetDocumentTypeByIdAllowedChildrenData, GetDocumentTypeByIdAllowedChildrenResponse, GetDocumentTypeByIdAllowedChildrenError, GetDocumentTypeByIdBlueprintData, GetDocumentTypeByIdBlueprintResponse, GetDocumentTypeByIdBlueprintError, GetDocumentTypeByIdCompositionReferencesData, GetDocumentTypeByIdCompositionReferencesResponse, GetDocumentTypeByIdCompositionReferencesError, PostDocumentTypeByIdCopyData, PostDocumentTypeByIdCopyError, GetDocumentTypeByIdExportData, GetDocumentTypeByIdExportResponse, GetDocumentTypeByIdExportError, PutDocumentTypeByIdImportData, PutDocumentTypeByIdImportError, PutDocumentTypeByIdMoveData, PutDocumentTypeByIdMoveError, GetDocumentTypeAllowedAtRootData, GetDocumentTypeAllowedAtRootResponse, PostDocumentTypeAvailableCompositionsData, PostDocumentTypeAvailableCompositionsResponse, GetDocumentTypeConfigurationData, GetDocumentTypeConfigurationResponse, PostDocumentTypeFolderData, PostDocumentTypeFolderError, DeleteDocumentTypeFolderByIdData, DeleteDocumentTypeFolderByIdError, GetDocumentTypeFolderByIdData, GetDocumentTypeFolderByIdResponse, GetDocumentTypeFolderByIdError, PutDocumentTypeFolderByIdData, PutDocumentTypeFolderByIdError, PostDocumentTypeImportData, PostDocumentTypeImportError, GetItemDocumentTypeData, GetItemDocumentTypeResponse, GetItemDocumentTypeSearchData, GetItemDocumentTypeSearchResponse, GetTreeDocumentTypeAncestorsData, GetTreeDocumentTypeAncestorsResponse, GetTreeDocumentTypeChildrenData, GetTreeDocumentTypeChildrenResponse, GetTreeDocumentTypeRootData, GetTreeDocumentTypeRootResponse, GetDocumentVersionData, GetDocumentVersionResponse, GetDocumentVersionError, GetDocumentVersionByIdData, GetDocumentVersionByIdResponse, GetDocumentVersionByIdError, PutDocumentVersionByIdPreventCleanupData, PutDocumentVersionByIdPreventCleanupError, PostDocumentVersionByIdRollbackData, PostDocumentVersionByIdRollbackError, GetCollectionDocumentByIdData, GetCollectionDocumentByIdResponse, GetCollectionDocumentByIdError, PostDocumentData, PostDocumentError, DeleteDocumentByIdData, DeleteDocumentByIdError, GetDocumentByIdData, GetDocumentByIdResponse, GetDocumentByIdError, PutDocumentByIdData, PutDocumentByIdError, GetDocumentByIdAuditLogData, GetDocumentByIdAuditLogResponse, PostDocumentByIdCopyData, PostDocumentByIdCopyError, GetDocumentByIdDomainsData, GetDocumentByIdDomainsResponse, GetDocumentByIdDomainsError, PutDocumentByIdDomainsData, PutDocumentByIdDomainsError, PutDocumentByIdMoveData, PutDocumentByIdMoveError, PutDocumentByIdMoveToRecycleBinData, PutDocumentByIdMoveToRecycleBinError, GetDocumentByIdNotificationsData, GetDocumentByIdNotificationsResponse, GetDocumentByIdNotificationsError, PutDocumentByIdNotificationsData, PutDocumentByIdNotificationsError, DeleteDocumentByIdPublicAccessData, DeleteDocumentByIdPublicAccessError, GetDocumentByIdPublicAccessData, GetDocumentByIdPublicAccessResponse, GetDocumentByIdPublicAccessError, PostDocumentByIdPublicAccessData, PostDocumentByIdPublicAccessError, PutDocumentByIdPublicAccessData, PutDocumentByIdPublicAccessError, PutDocumentByIdPublishData, PutDocumentByIdPublishError, PutDocumentByIdPublishWithDescendantsData, PutDocumentByIdPublishWithDescendantsResponse, PutDocumentByIdPublishWithDescendantsError, GetDocumentByIdPublishWithDescendantsResultByTaskIdData, GetDocumentByIdPublishWithDescendantsResultByTaskIdResponse, GetDocumentByIdPublishWithDescendantsResultByTaskIdError, GetDocumentByIdPublishedData, GetDocumentByIdPublishedResponse, GetDocumentByIdPublishedError, GetDocumentByIdReferencedByData, GetDocumentByIdReferencedByResponse, GetDocumentByIdReferencedDescendantsData, GetDocumentByIdReferencedDescendantsResponse, PutDocumentByIdUnpublishData, PutDocumentByIdUnpublishError, PutUmbracoManagementApiV11DocumentByIdValidate11Data, PutUmbracoManagementApiV11DocumentByIdValidate11Error, GetDocumentAreReferencedData, GetDocumentAreReferencedResponse, GetDocumentConfigurationData, GetDocumentConfigurationResponse, PutDocumentSortData, PutDocumentSortError, GetDocumentUrlsData, GetDocumentUrlsResponse, PostDocumentValidateData, PostDocumentValidateError, GetItemDocumentData, GetItemDocumentResponse, GetItemDocumentSearchData, GetItemDocumentSearchResponse, DeleteRecycleBinDocumentData, DeleteRecycleBinDocumentError, DeleteRecycleBinDocumentByIdData, DeleteRecycleBinDocumentByIdError, GetRecycleBinDocumentByIdOriginalParentData, GetRecycleBinDocumentByIdOriginalParentResponse, GetRecycleBinDocumentByIdOriginalParentError, PutRecycleBinDocumentByIdRestoreData, PutRecycleBinDocumentByIdRestoreError, GetRecycleBinDocumentChildrenData, GetRecycleBinDocumentChildrenResponse, GetRecycleBinDocumentReferencedByData, GetRecycleBinDocumentReferencedByResponse, GetRecycleBinDocumentRootData, GetRecycleBinDocumentRootResponse, GetTreeDocumentAncestorsData, GetTreeDocumentAncestorsResponse, GetTreeDocumentChildrenData, GetTreeDocumentChildrenResponse, GetTreeDocumentRootData, GetTreeDocumentRootResponse, PostDynamicRootQueryData, PostDynamicRootQueryResponse, GetDynamicRootStepsData, GetDynamicRootStepsResponse, GetHealthCheckGroupData, GetHealthCheckGroupResponse, GetHealthCheckGroupByNameData, GetHealthCheckGroupByNameResponse, GetHealthCheckGroupByNameError, PostHealthCheckGroupByNameCheckData, PostHealthCheckGroupByNameCheckResponse, PostHealthCheckGroupByNameCheckError, PostHealthCheckExecuteActionData, PostHealthCheckExecuteActionResponse, PostHealthCheckExecuteActionError, GetHelpData, GetHelpResponse, GetHelpError, GetImagingResizeUrlsData, GetImagingResizeUrlsResponse, GetImportAnalyzeData, GetImportAnalyzeResponse, GetImportAnalyzeError, GetIndexerData, GetIndexerResponse, GetIndexerByIndexNameData, GetIndexerByIndexNameResponse, GetIndexerByIndexNameError, PostIndexerByIndexNameRebuildData, PostIndexerByIndexNameRebuildError, GetInstallSettingsData, GetInstallSettingsResponse, GetInstallSettingsError, PostInstallSetupData, PostInstallSetupError, PostInstallValidateDatabaseData, PostInstallValidateDatabaseError, GetItemLanguageData, GetItemLanguageResponse, GetItemLanguageDefaultData, GetItemLanguageDefaultResponse, GetLanguageData, GetLanguageResponse, PostLanguageData, PostLanguageError, DeleteLanguageByIsoCodeData, DeleteLanguageByIsoCodeError, GetLanguageByIsoCodeData, GetLanguageByIsoCodeResponse, GetLanguageByIsoCodeError, PutLanguageByIsoCodeData, PutLanguageByIsoCodeError, GetLogViewerLevelData, GetLogViewerLevelResponse, GetLogViewerLevelCountData, GetLogViewerLevelCountResponse, GetLogViewerLevelCountError, GetLogViewerLogData, GetLogViewerLogResponse, GetLogViewerMessageTemplateData, GetLogViewerMessageTemplateResponse, GetLogViewerMessageTemplateError, GetLogViewerSavedSearchData, GetLogViewerSavedSearchResponse, PostLogViewerSavedSearchData, PostLogViewerSavedSearchError, DeleteLogViewerSavedSearchByNameData, DeleteLogViewerSavedSearchByNameError, GetLogViewerSavedSearchByNameData, GetLogViewerSavedSearchByNameResponse, GetLogViewerSavedSearchByNameError, GetLogViewerValidateLogsSizeData, GetLogViewerValidateLogsSizeError, GetManifestManifestData, GetManifestManifestResponse, GetManifestManifestPrivateData, GetManifestManifestPrivateResponse, GetManifestManifestPublicData, GetManifestManifestPublicResponse, GetItemMediaTypeData, GetItemMediaTypeResponse, GetItemMediaTypeAllowedData, GetItemMediaTypeAllowedResponse, GetItemMediaTypeFoldersData, GetItemMediaTypeFoldersResponse, GetItemMediaTypeSearchData, GetItemMediaTypeSearchResponse, PostMediaTypeData, PostMediaTypeError, DeleteMediaTypeByIdData, DeleteMediaTypeByIdError, GetMediaTypeByIdData, GetMediaTypeByIdResponse, GetMediaTypeByIdError, PutMediaTypeByIdData, PutMediaTypeByIdError, GetMediaTypeByIdAllowedChildrenData, GetMediaTypeByIdAllowedChildrenResponse, GetMediaTypeByIdAllowedChildrenError, GetMediaTypeByIdCompositionReferencesData, GetMediaTypeByIdCompositionReferencesResponse, GetMediaTypeByIdCompositionReferencesError, PostMediaTypeByIdCopyData, PostMediaTypeByIdCopyError, GetMediaTypeByIdExportData, GetMediaTypeByIdExportResponse, GetMediaTypeByIdExportError, PutMediaTypeByIdImportData, PutMediaTypeByIdImportError, PutMediaTypeByIdMoveData, PutMediaTypeByIdMoveError, GetMediaTypeAllowedAtRootData, GetMediaTypeAllowedAtRootResponse, PostMediaTypeAvailableCompositionsData, PostMediaTypeAvailableCompositionsResponse, GetMediaTypeConfigurationData, GetMediaTypeConfigurationResponse, PostMediaTypeFolderData, PostMediaTypeFolderError, DeleteMediaTypeFolderByIdData, DeleteMediaTypeFolderByIdError, GetMediaTypeFolderByIdData, GetMediaTypeFolderByIdResponse, GetMediaTypeFolderByIdError, PutMediaTypeFolderByIdData, PutMediaTypeFolderByIdError, PostMediaTypeImportData, PostMediaTypeImportError, GetTreeMediaTypeAncestorsData, GetTreeMediaTypeAncestorsResponse, GetTreeMediaTypeChildrenData, GetTreeMediaTypeChildrenResponse, GetTreeMediaTypeRootData, GetTreeMediaTypeRootResponse, GetCollectionMediaData, GetCollectionMediaResponse, GetCollectionMediaError, GetItemMediaData, GetItemMediaResponse, GetItemMediaSearchData, GetItemMediaSearchResponse, PostMediaData, PostMediaError, DeleteMediaByIdData, DeleteMediaByIdError, GetMediaByIdData, GetMediaByIdResponse, GetMediaByIdError, PutMediaByIdData, PutMediaByIdError, GetMediaByIdAuditLogData, GetMediaByIdAuditLogResponse, PutMediaByIdMoveData, PutMediaByIdMoveError, PutMediaByIdMoveToRecycleBinData, PutMediaByIdMoveToRecycleBinError, GetMediaByIdReferencedByData, GetMediaByIdReferencedByResponse, GetMediaByIdReferencedDescendantsData, GetMediaByIdReferencedDescendantsResponse, PutMediaByIdValidateData, PutMediaByIdValidateError, GetMediaAreReferencedData, GetMediaAreReferencedResponse, GetMediaConfigurationData, GetMediaConfigurationResponse, PutMediaSortData, PutMediaSortError, GetMediaUrlsData, GetMediaUrlsResponse, PostMediaValidateData, PostMediaValidateError, DeleteRecycleBinMediaData, DeleteRecycleBinMediaError, DeleteRecycleBinMediaByIdData, DeleteRecycleBinMediaByIdError, GetRecycleBinMediaByIdOriginalParentData, GetRecycleBinMediaByIdOriginalParentResponse, GetRecycleBinMediaByIdOriginalParentError, PutRecycleBinMediaByIdRestoreData, PutRecycleBinMediaByIdRestoreError, GetRecycleBinMediaChildrenData, GetRecycleBinMediaChildrenResponse, GetRecycleBinMediaReferencedByData, GetRecycleBinMediaReferencedByResponse, GetRecycleBinMediaRootData, GetRecycleBinMediaRootResponse, GetTreeMediaAncestorsData, GetTreeMediaAncestorsResponse, GetTreeMediaChildrenData, GetTreeMediaChildrenResponse, GetTreeMediaRootData, GetTreeMediaRootResponse, GetItemMemberGroupData, GetItemMemberGroupResponse, GetMemberGroupData, GetMemberGroupResponse, PostMemberGroupData, PostMemberGroupError, DeleteMemberGroupByIdData, DeleteMemberGroupByIdError, GetMemberGroupByIdData, GetMemberGroupByIdResponse, PutMemberGroupByIdData, PutMemberGroupByIdError, GetTreeMemberGroupRootData, GetTreeMemberGroupRootResponse, GetItemMemberTypeData, GetItemMemberTypeResponse, GetItemMemberTypeSearchData, GetItemMemberTypeSearchResponse, PostMemberTypeData, PostMemberTypeError, DeleteMemberTypeByIdData, DeleteMemberTypeByIdError, GetMemberTypeByIdData, GetMemberTypeByIdResponse, GetMemberTypeByIdError, PutMemberTypeByIdData, PutMemberTypeByIdError, GetMemberTypeByIdCompositionReferencesData, GetMemberTypeByIdCompositionReferencesResponse, GetMemberTypeByIdCompositionReferencesError, PostMemberTypeByIdCopyData, PostMemberTypeByIdCopyError, PostMemberTypeAvailableCompositionsData, PostMemberTypeAvailableCompositionsResponse, GetMemberTypeConfigurationData, GetMemberTypeConfigurationResponse, GetTreeMemberTypeRootData, GetTreeMemberTypeRootResponse, GetFilterMemberData, GetFilterMemberResponse, GetFilterMemberError, GetItemMemberData, GetItemMemberResponse, GetItemMemberSearchData, GetItemMemberSearchResponse, PostMemberData, PostMemberError, DeleteMemberByIdData, DeleteMemberByIdError, GetMemberByIdData, GetMemberByIdResponse, GetMemberByIdError, PutMemberByIdData, PutMemberByIdError, GetMemberByIdReferencedByData, GetMemberByIdReferencedByResponse, GetMemberByIdReferencedDescendantsData, GetMemberByIdReferencedDescendantsResponse, PutMemberByIdValidateData, PutMemberByIdValidateError, GetMemberAreReferencedData, GetMemberAreReferencedResponse, GetMemberConfigurationData, GetMemberConfigurationResponse, PostMemberValidateData, PostMemberValidateError, PostModelsBuilderBuildData, PostModelsBuilderBuildError, GetModelsBuilderDashboardData, GetModelsBuilderDashboardResponse, GetModelsBuilderStatusData, GetModelsBuilderStatusResponse, GetObjectTypesData, GetObjectTypesResponse, GetOembedQueryData, GetOembedQueryResponse, PostPackageByNameRunMigrationData, PostPackageByNameRunMigrationError, GetPackageConfigurationData, GetPackageConfigurationResponse, GetPackageCreatedData, GetPackageCreatedResponse, PostPackageCreatedData, PostPackageCreatedError, DeletePackageCreatedByIdData, DeletePackageCreatedByIdError, GetPackageCreatedByIdData, GetPackageCreatedByIdResponse, GetPackageCreatedByIdError, PutPackageCreatedByIdData, PutPackageCreatedByIdError, GetPackageCreatedByIdDownloadData, GetPackageCreatedByIdDownloadResponse, GetPackageCreatedByIdDownloadError, GetPackageMigrationStatusData, GetPackageMigrationStatusResponse, GetItemPartialViewData, GetItemPartialViewResponse, PostPartialViewData, PostPartialViewError, DeletePartialViewByPathData, DeletePartialViewByPathError, GetPartialViewByPathData, GetPartialViewByPathResponse, GetPartialViewByPathError, PutPartialViewByPathData, PutPartialViewByPathError, PutPartialViewByPathRenameData, PutPartialViewByPathRenameError, PostPartialViewFolderData, PostPartialViewFolderError, DeletePartialViewFolderByPathData, DeletePartialViewFolderByPathError, GetPartialViewFolderByPathData, GetPartialViewFolderByPathResponse, GetPartialViewFolderByPathError, GetPartialViewSnippetData, GetPartialViewSnippetResponse, GetPartialViewSnippetByIdData, GetPartialViewSnippetByIdResponse, GetPartialViewSnippetByIdError, GetTreePartialViewAncestorsData, GetTreePartialViewAncestorsResponse, GetTreePartialViewChildrenData, GetTreePartialViewChildrenResponse, GetTreePartialViewRootData, GetTreePartialViewRootResponse, DeletePreviewData, PostPreviewData, GetProfilingStatusData, GetProfilingStatusResponse, PutProfilingStatusData, GetPropertyTypeIsUsedData, GetPropertyTypeIsUsedResponse, GetPropertyTypeIsUsedError, PostPublishedCacheRebuildData, GetPublishedCacheRebuildStatusData, GetPublishedCacheRebuildStatusResponse, PostPublishedCacheReloadData, GetRedirectManagementData, GetRedirectManagementResponse, GetRedirectManagementError, DeleteRedirectManagementByIdData, GetRedirectManagementByIdData, GetRedirectManagementByIdResponse, GetRedirectManagementStatusData, GetRedirectManagementStatusResponse, PostRedirectManagementStatusData, GetItemRelationTypeData, GetItemRelationTypeResponse, GetRelationTypeData, GetRelationTypeResponse, GetRelationTypeByIdData, GetRelationTypeByIdResponse, GetRelationTypeByIdError, GetRelationByRelationTypeIdData, GetRelationByRelationTypeIdResponse, GetRelationByRelationTypeIdError, GetItemScriptData, GetItemScriptResponse, PostScriptData, PostScriptError, DeleteScriptByPathData, DeleteScriptByPathError, GetScriptByPathData, GetScriptByPathResponse, GetScriptByPathError, PutScriptByPathData, PutScriptByPathError, PutScriptByPathRenameData, PutScriptByPathRenameError, PostScriptFolderData, PostScriptFolderError, DeleteScriptFolderByPathData, DeleteScriptFolderByPathError, GetScriptFolderByPathData, GetScriptFolderByPathResponse, GetScriptFolderByPathError, GetTreeScriptAncestorsData, GetTreeScriptAncestorsResponse, GetTreeScriptChildrenData, GetTreeScriptChildrenResponse, GetTreeScriptRootData, GetTreeScriptRootResponse, GetSearcherData, GetSearcherResponse, GetSearcherBySearcherNameQueryData, GetSearcherBySearcherNameQueryResponse, GetSearcherBySearcherNameQueryError, GetSecurityConfigurationData, GetSecurityConfigurationResponse, PostSecurityForgotPasswordData, PostSecurityForgotPasswordError, PostSecurityForgotPasswordResetData, PostSecurityForgotPasswordResetResponse, PostSecurityForgotPasswordResetError, PostSecurityForgotPasswordVerifyData, PostSecurityForgotPasswordVerifyResponse, PostSecurityForgotPasswordVerifyError, GetSegmentData, GetSegmentResponse, GetSegmentError, GetServerConfigurationData, GetServerConfigurationResponse, GetServerInformationData, GetServerInformationResponse, GetServerStatusData, GetServerStatusResponse, GetServerStatusError, GetServerTroubleshootingData, GetServerTroubleshootingResponse, GetServerUpgradeCheckData, GetServerUpgradeCheckResponse, GetItemStaticFileData, GetItemStaticFileResponse, GetTreeStaticFileAncestorsData, GetTreeStaticFileAncestorsResponse, GetTreeStaticFileChildrenData, GetTreeStaticFileChildrenResponse, GetTreeStaticFileRootData, GetTreeStaticFileRootResponse, GetItemStylesheetData, GetItemStylesheetResponse, PostStylesheetData, PostStylesheetError, DeleteStylesheetByPathData, DeleteStylesheetByPathError, GetStylesheetByPathData, GetStylesheetByPathResponse, GetStylesheetByPathError, PutStylesheetByPathData, PutStylesheetByPathError, PutStylesheetByPathRenameData, PutStylesheetByPathRenameError, PostStylesheetFolderData, PostStylesheetFolderError, DeleteStylesheetFolderByPathData, DeleteStylesheetFolderByPathError, GetStylesheetFolderByPathData, GetStylesheetFolderByPathResponse, GetStylesheetFolderByPathError, GetTreeStylesheetAncestorsData, GetTreeStylesheetAncestorsResponse, GetTreeStylesheetChildrenData, GetTreeStylesheetChildrenResponse, GetTreeStylesheetRootData, GetTreeStylesheetRootResponse, GetTagData, GetTagResponse, GetTelemetryData, GetTelemetryResponse, GetTelemetryLevelData, GetTelemetryLevelResponse, PostTelemetryLevelData, PostTelemetryLevelError, GetItemTemplateData, GetItemTemplateResponse, GetItemTemplateSearchData, GetItemTemplateSearchResponse, PostTemplateData, PostTemplateError, DeleteTemplateByIdData, DeleteTemplateByIdError, GetTemplateByIdData, GetTemplateByIdResponse, GetTemplateByIdError, PutTemplateByIdData, PutTemplateByIdError, GetTemplateConfigurationData, GetTemplateConfigurationResponse, PostTemplateQueryExecuteData, PostTemplateQueryExecuteResponse, GetTemplateQuerySettingsData, GetTemplateQuerySettingsResponse, GetTreeTemplateAncestorsData, GetTreeTemplateAncestorsResponse, GetTreeTemplateChildrenData, GetTreeTemplateChildrenResponse, GetTreeTemplateRootData, GetTreeTemplateRootResponse, PostTemporaryFileData, PostTemporaryFileError, DeleteTemporaryFileByIdData, DeleteTemporaryFileByIdError, GetTemporaryFileByIdData, GetTemporaryFileByIdResponse, GetTemporaryFileByIdError, GetTemporaryFileConfigurationData, GetTemporaryFileConfigurationResponse, PostUpgradeAuthorizeData, PostUpgradeAuthorizeError, GetUpgradeSettingsData, GetUpgradeSettingsResponse, GetUpgradeSettingsError, GetUserDataData, GetUserDataResponse, PostUserDataData, PostUserDataError, PutUserDataData, PutUserDataError, GetUserDataByIdData, GetUserDataByIdResponse, GetFilterUserGroupData, GetFilterUserGroupResponse, GetFilterUserGroupError, GetItemUserGroupData, GetItemUserGroupResponse, DeleteUserGroupData, DeleteUserGroupError, GetUserGroupData, GetUserGroupResponse, PostUserGroupData, PostUserGroupError, DeleteUserGroupByIdData, DeleteUserGroupByIdError, GetUserGroupByIdData, GetUserGroupByIdResponse, GetUserGroupByIdError, PutUserGroupByIdData, PutUserGroupByIdError, DeleteUserGroupByIdUsersData, DeleteUserGroupByIdUsersError, PostUserGroupByIdUsersData, PostUserGroupByIdUsersError, GetFilterUserData, GetFilterUserResponse, GetFilterUserError, GetItemUserData, GetItemUserResponse, DeleteUserData, DeleteUserError, GetUserData, GetUserResponse, GetUserError, PostUserData, PostUserError, DeleteUserByIdData, DeleteUserByIdError, GetUserByIdData, GetUserByIdResponse, GetUserByIdError, PutUserByIdData, PutUserByIdError, GetUserById2FaData, GetUserById2FaResponse, GetUserById2FaError, DeleteUserById2FaByProviderNameData, DeleteUserById2FaByProviderNameError, GetUserByIdCalculateStartNodesData, GetUserByIdCalculateStartNodesResponse, GetUserByIdCalculateStartNodesError, PostUserByIdChangePasswordData, PostUserByIdChangePasswordError, GetUserByIdClientCredentialsData, GetUserByIdClientCredentialsResponse, PostUserByIdClientCredentialsData, PostUserByIdClientCredentialsError, DeleteUserByIdClientCredentialsByClientIdData, DeleteUserByIdClientCredentialsByClientIdError, PostUserByIdResetPasswordData, PostUserByIdResetPasswordResponse, PostUserByIdResetPasswordError, DeleteUserAvatarByIdData, DeleteUserAvatarByIdError, PostUserAvatarByIdData, PostUserAvatarByIdError, GetUserConfigurationData, GetUserConfigurationResponse, GetUserCurrentData, GetUserCurrentResponse, GetUserCurrent2FaData, GetUserCurrent2FaResponse, DeleteUserCurrent2FaByProviderNameData, DeleteUserCurrent2FaByProviderNameError, GetUserCurrent2FaByProviderNameData, GetUserCurrent2FaByProviderNameResponse, GetUserCurrent2FaByProviderNameError, PostUserCurrent2FaByProviderNameData, PostUserCurrent2FaByProviderNameResponse, PostUserCurrent2FaByProviderNameError, PostUserCurrentAvatarData, PostUserCurrentAvatarError, PostUserCurrentChangePasswordData, PostUserCurrentChangePasswordError, GetUserCurrentConfigurationData, GetUserCurrentConfigurationResponse, GetUserCurrentLoginProvidersData, GetUserCurrentLoginProvidersResponse, GetUserCurrentPermissionsData, GetUserCurrentPermissionsResponse, GetUserCurrentPermissionsError, GetUserCurrentPermissionsDocumentData, GetUserCurrentPermissionsDocumentResponse, GetUserCurrentPermissionsDocumentError, GetUserCurrentPermissionsMediaData, GetUserCurrentPermissionsMediaResponse, GetUserCurrentPermissionsMediaError, PostUserDisableData, PostUserDisableError, PostUserEnableData, PostUserEnableError, PostUserInviteData, PostUserInviteError, PostUserInviteCreatePasswordData, PostUserInviteCreatePasswordError, PostUserInviteResendData, PostUserInviteResendError, PostUserInviteVerifyData, PostUserInviteVerifyResponse, PostUserInviteVerifyError, PostUserSetUserGroupsData, PostUserUnlockData, PostUserUnlockError, GetItemWebhookData, GetItemWebhookResponse, GetWebhookData, GetWebhookResponse, PostWebhookData, PostWebhookError, DeleteWebhookByIdData, DeleteWebhookByIdError, GetWebhookByIdData, GetWebhookByIdResponse, GetWebhookByIdError, PutWebhookByIdData, PutWebhookByIdError, GetWebhookByIdLogsData, GetWebhookByIdLogsResponse, GetWebhookEventsData, GetWebhookEventsResponse, GetWebhookLogsData, GetWebhookLogsResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class CultureService {
    public static getCulture<ThrowOnError extends boolean = true>(options?: Options<GetCultureData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCultureResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/culture',
            ...options
        });
    }
    
}

export class DataTypeService {
    public static postDataType<ThrowOnError extends boolean = true>(options?: Options<PostDataTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDataTypeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDataTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDataTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options
        });
    }
    
    public static getDataTypeById<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdResponse, GetDataTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options
        });
    }
    
    public static putDataTypeById<ThrowOnError extends boolean = true>(options: Options<PutDataTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDataTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postDataTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDataTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostDataTypeByIdCopyError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDataTypeByIdIsUsed<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdIsUsedData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdIsUsedResponse, GetDataTypeByIdIsUsedError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/is-used',
            ...options
        });
    }
    
    public static putDataTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDataTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDataTypeByIdMoveError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDataTypeByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdReferencedByResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/referenced-by',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static getDataTypeByIdReferences<ThrowOnError extends boolean = true>(options: Options<GetDataTypeByIdReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeByIdReferencesResponse, GetDataTypeByIdReferencesError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/{id}/references',
            ...options
        });
    }
    
    public static getDataTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDataTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDataTypeConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/configuration',
            ...options
        });
    }
    
    public static postDataTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostDataTypeFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDataTypeFolderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDataTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options
        });
    }
    
    public static getDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDataTypeFolderByIdResponse, GetDataTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options
        });
    }
    
    public static putDataTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutDataTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDataTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getFilterDataType<ThrowOnError extends boolean = true>(options?: Options<GetFilterDataTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterDataTypeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/data-type',
            ...options
        });
    }
    
    public static getItemDataType<ThrowOnError extends boolean = true>(options?: Options<GetItemDataTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDataTypeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/data-type',
            ...options
        });
    }
    
    public static getItemDataTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDataTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDataTypeSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/data-type/search',
            ...options
        });
    }
    
    public static getTreeDataTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDataTypeAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/ancestors',
            ...options
        });
    }
    
    public static getTreeDataTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDataTypeChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/children',
            ...options
        });
    }
    
    public static getTreeDataTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDataTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDataTypeRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/data-type/root',
            ...options
        });
    }
    
}

export class DictionaryService {
    public static getDictionary<ThrowOnError extends boolean = true>(options?: Options<GetDictionaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDictionaryResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary',
            ...options
        });
    }
    
    public static postDictionary<ThrowOnError extends boolean = true>(options?: Options<PostDictionaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDictionaryError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDictionaryById<ThrowOnError extends boolean = true>(options: Options<DeleteDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDictionaryByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options
        });
    }
    
    public static getDictionaryById<ThrowOnError extends boolean = true>(options: Options<GetDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDictionaryByIdResponse, GetDictionaryByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options
        });
    }
    
    public static putDictionaryById<ThrowOnError extends boolean = true>(options: Options<PutDictionaryByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDictionaryByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDictionaryByIdExport<ThrowOnError extends boolean = true>(options: Options<GetDictionaryByIdExportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDictionaryByIdExportResponse, GetDictionaryByIdExportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}/export',
            ...options
        });
    }
    
    public static putDictionaryByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDictionaryByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDictionaryByIdMoveError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postDictionaryImport<ThrowOnError extends boolean = true>(options?: Options<PostDictionaryImportData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDictionaryImportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dictionary/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDictionary<ThrowOnError extends boolean = true>(options?: Options<GetItemDictionaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDictionaryResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/dictionary',
            ...options
        });
    }
    
    public static getTreeDictionaryAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDictionaryAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',
            ...options
        });
    }
    
    public static getTreeDictionaryChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDictionaryChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/children',
            ...options
        });
    }
    
    public static getTreeDictionaryRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDictionaryRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDictionaryRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/dictionary/root',
            ...options
        });
    }
    
}

export class DocumentBlueprintService {
    public static postDocumentBlueprint<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentBlueprintError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDocumentBlueprintByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options
        });
    }
    
    public static getDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentBlueprintByIdResponse, GetDocumentBlueprintByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options
        });
    }
    
    public static putDocumentBlueprintById<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentBlueprintByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putDocumentBlueprintByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentBlueprintByIdMoveError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentBlueprintByIdScaffold<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintByIdScaffoldData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentBlueprintByIdScaffoldResponse, GetDocumentBlueprintByIdScaffoldError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/{id}/scaffold',
            ...options
        });
    }
    
    public static postDocumentBlueprintFolder<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentBlueprintFolderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDocumentBlueprintFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options
        });
    }
    
    public static getDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<GetDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentBlueprintFolderByIdResponse, GetDocumentBlueprintFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options
        });
    }
    
    public static putDocumentBlueprintFolderById<ThrowOnError extends boolean = true>(options: Options<PutDocumentBlueprintFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentBlueprintFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postDocumentBlueprintFromDocument<ThrowOnError extends boolean = true>(options?: Options<PostDocumentBlueprintFromDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentBlueprintFromDocumentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-blueprint/from-document',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocumentBlueprint<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentBlueprintData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentBlueprintResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-blueprint',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/children',
            ...options
        });
    }
    
    public static getTreeDocumentBlueprintRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentBlueprintRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentBlueprintRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-blueprint/root',
            ...options
        });
    }
    
}

export class DocumentTypeService {
    public static postDocumentType<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentTypeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDocumentTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options
        });
    }
    
    public static getDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdResponse, GetDocumentTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options
        });
    }
    
    public static putDocumentTypeById<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentTypeByIdAllowedChildren<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdAllowedChildrenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdAllowedChildrenResponse, GetDocumentTypeByIdAllowedChildrenError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',
            ...options
        });
    }
    
    public static getDocumentTypeByIdBlueprint<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdBlueprintData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdBlueprintResponse, GetDocumentTypeByIdBlueprintError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',
            ...options
        });
    }
    
    public static getDocumentTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdCompositionReferencesResponse, GetDocumentTypeByIdCompositionReferencesError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postDocumentTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDocumentTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostDocumentTypeByIdCopyError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentTypeByIdExport<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeByIdExportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeByIdExportResponse, GetDocumentTypeByIdExportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/export',
            ...options
        });
    }
    
    public static putDocumentTypeByIdImport<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdImportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentTypeByIdImportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putDocumentTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentTypeByIdMoveError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentTypeAllowedAtRoot<ThrowOnError extends boolean = true>(options?: Options<GetDocumentTypeAllowedAtRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentTypeAllowedAtRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/allowed-at-root',
            ...options
        });
    }
    
    public static postDocumentTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDocumentTypeAvailableCompositionsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDocumentTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentTypeConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/configuration',
            ...options
        });
    }
    
    public static postDocumentTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentTypeFolderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDocumentTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options
        });
    }
    
    public static getDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentTypeFolderByIdResponse, GetDocumentTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options
        });
    }
    
    public static putDocumentTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutDocumentTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postDocumentTypeImport<ThrowOnError extends boolean = true>(options?: Options<PostDocumentTypeImportData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentTypeImportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-type/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocumentType<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentTypeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-type',
            ...options
        });
    }
    
    public static getItemDocumentTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentTypeSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document-type/search',
            ...options
        });
    }
    
    public static getTreeDocumentTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/children',
            ...options
        });
    }
    
    public static getTreeDocumentTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentTypeRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document-type/root',
            ...options
        });
    }
    
}

export class DocumentVersionService {
    public static getDocumentVersion<ThrowOnError extends boolean = true>(options: Options<GetDocumentVersionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentVersionResponse, GetDocumentVersionError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version',
            ...options
        });
    }
    
    public static getDocumentVersionById<ThrowOnError extends boolean = true>(options: Options<GetDocumentVersionByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentVersionByIdResponse, GetDocumentVersionByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}',
            ...options
        });
    }
    
    public static putDocumentVersionByIdPreventCleanup<ThrowOnError extends boolean = true>(options: Options<PutDocumentVersionByIdPreventCleanupData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentVersionByIdPreventCleanupError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',
            ...options
        });
    }
    
    public static postDocumentVersionByIdRollback<ThrowOnError extends boolean = true>(options: Options<PostDocumentVersionByIdRollbackData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostDocumentVersionByIdRollbackError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document-version/{id}/rollback',
            ...options
        });
    }
    
}

export class DocumentService {
    public static getCollectionDocumentById<ThrowOnError extends boolean = true>(options: Options<GetCollectionDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCollectionDocumentByIdResponse, GetCollectionDocumentByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/collection/document/{id}',
            ...options
        });
    }
    
    public static postDocument<ThrowOnError extends boolean = true>(options?: Options<PostDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentById<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDocumentByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options
        });
    }
    
    public static getDocumentById<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdResponse, GetDocumentByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options
        });
    }
    
    public static putDocumentById<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentByIdAuditLog<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdAuditLogData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdAuditLogResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/audit-log',
            ...options
        });
    }
    
    public static postDocumentByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostDocumentByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostDocumentByIdCopyError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentByIdDomains<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdDomainsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdDomainsResponse, GetDocumentByIdDomainsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/domains',
            ...options
        });
    }
    
    public static putDocumentByIdDomains<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdDomainsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdDomainsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/domains',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putDocumentByIdMove<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdMoveError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putDocumentByIdMoveToRecycleBin<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdMoveToRecycleBinData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdMoveToRecycleBinError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',
            ...options
        });
    }
    
    public static getDocumentByIdNotifications<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdNotificationsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdNotificationsResponse, GetDocumentByIdNotificationsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            ...options
        });
    }
    
    public static putDocumentByIdNotifications<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdNotificationsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdNotificationsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<DeleteDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteDocumentByIdPublicAccessError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options
        });
    }
    
    public static getDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdPublicAccessResponse, GetDocumentByIdPublicAccessError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options
        });
    }
    
    public static postDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<PostDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostDocumentByIdPublicAccessError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putDocumentByIdPublicAccess<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublicAccessData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdPublicAccessError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putDocumentByIdPublish<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublishData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdPublishError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putDocumentByIdPublishWithDescendants<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdPublishWithDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<PutDocumentByIdPublishWithDescendantsResponse, PutDocumentByIdPublishWithDescendantsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentByIdPublishWithDescendantsResultByTaskId<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublishWithDescendantsResultByTaskIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdPublishWithDescendantsResultByTaskIdResponse, GetDocumentByIdPublishWithDescendantsResultByTaskIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants/result/{taskId}',
            ...options
        });
    }
    
    public static getDocumentByIdPublished<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdPublishedData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdPublishedResponse, GetDocumentByIdPublishedError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/published',
            ...options
        });
    }
    
    public static getDocumentByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdReferencedByResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/referenced-by',
            ...options
        });
    }
    
    public static getDocumentByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetDocumentByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDocumentByIdReferencedDescendantsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putDocumentByIdUnpublish<ThrowOnError extends boolean = true>(options: Options<PutDocumentByIdUnpublishData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutDocumentByIdUnpublishError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/{id}/unpublish',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putUmbracoManagementApiV11DocumentByIdValidate11<ThrowOnError extends boolean = true>(options: Options<PutUmbracoManagementApiV11DocumentByIdValidate11Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutUmbracoManagementApiV11DocumentByIdValidate11Error, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1.1/document/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetDocumentAreReferencedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentAreReferencedResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/are-referenced',
            ...options
        });
    }
    
    public static getDocumentConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetDocumentConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/configuration',
            ...options
        });
    }
    
    public static putDocumentSort<ThrowOnError extends boolean = true>(options?: Options<PutDocumentSortData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<unknown, PutDocumentSortError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDocumentUrls<ThrowOnError extends boolean = true>(options?: Options<GetDocumentUrlsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDocumentUrlsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/urls',
            ...options
        });
    }
    
    public static postDocumentValidate<ThrowOnError extends boolean = true>(options?: Options<PostDocumentValidateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostDocumentValidateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/document/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getItemDocument<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document',
            ...options
        });
    }
    
    public static getItemDocumentSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemDocumentSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemDocumentSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/document/search',
            ...options
        });
    }
    
    public static deleteRecycleBinDocument<ThrowOnError extends boolean = true>(options?: Options<DeleteRecycleBinDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<unknown, DeleteRecycleBinDocumentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document',
            ...options
        });
    }
    
    public static deleteRecycleBinDocumentById<ThrowOnError extends boolean = true>(options: Options<DeleteRecycleBinDocumentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteRecycleBinDocumentByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',
            ...options
        });
    }
    
    public static getRecycleBinDocumentByIdOriginalParent<ThrowOnError extends boolean = true>(options: Options<GetRecycleBinDocumentByIdOriginalParentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRecycleBinDocumentByIdOriginalParentResponse, GetRecycleBinDocumentByIdOriginalParentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',
            ...options
        });
    }
    
    public static putRecycleBinDocumentByIdRestore<ThrowOnError extends boolean = true>(options: Options<PutRecycleBinDocumentByIdRestoreData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutRecycleBinDocumentByIdRestoreError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getRecycleBinDocumentChildren<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/children',
            ...options
        });
    }
    
    public static getRecycleBinDocumentReferencedBy<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentReferencedByData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentReferencedByResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/referenced-by',
            ...options
        });
    }
    
    public static getRecycleBinDocumentRoot<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinDocumentRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinDocumentRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/document/root',
            ...options
        });
    }
    
    public static getTreeDocumentAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/ancestors',
            ...options
        });
    }
    
    public static getTreeDocumentChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/children',
            ...options
        });
    }
    
    public static getTreeDocumentRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeDocumentRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeDocumentRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/document/root',
            ...options
        });
    }
    
}

export class DynamicRootService {
    public static postDynamicRootQuery<ThrowOnError extends boolean = true>(options?: Options<PostDynamicRootQueryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostDynamicRootQueryResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dynamic-root/query',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getDynamicRootSteps<ThrowOnError extends boolean = true>(options?: Options<GetDynamicRootStepsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDynamicRootStepsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/dynamic-root/steps',
            ...options
        });
    }
    
}

export class HealthCheckService {
    public static getHealthCheckGroup<ThrowOnError extends boolean = true>(options?: Options<GetHealthCheckGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetHealthCheckGroupResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group',
            ...options
        });
    }
    
    public static getHealthCheckGroupByName<ThrowOnError extends boolean = true>(options: Options<GetHealthCheckGroupByNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetHealthCheckGroupByNameResponse, GetHealthCheckGroupByNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group/{name}',
            ...options
        });
    }
    
    public static postHealthCheckGroupByNameCheck<ThrowOnError extends boolean = true>(options: Options<PostHealthCheckGroupByNameCheckData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostHealthCheckGroupByNameCheckResponse, PostHealthCheckGroupByNameCheckError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check-group/{name}/check',
            ...options
        });
    }
    
    public static postHealthCheckExecuteAction<ThrowOnError extends boolean = true>(options?: Options<PostHealthCheckExecuteActionData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostHealthCheckExecuteActionResponse, PostHealthCheckExecuteActionError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/health-check/execute-action',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class HelpService {
    public static getHelp<ThrowOnError extends boolean = true>(options?: Options<GetHelpData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetHelpResponse, GetHelpError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/help',
            ...options
        });
    }
    
}

export class ImagingService {
    public static getImagingResizeUrls<ThrowOnError extends boolean = true>(options?: Options<GetImagingResizeUrlsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetImagingResizeUrlsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/imaging/resize/urls',
            ...options
        });
    }
    
}

export class ImportService {
    public static getImportAnalyze<ThrowOnError extends boolean = true>(options?: Options<GetImportAnalyzeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetImportAnalyzeResponse, GetImportAnalyzeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/import/analyze',
            ...options
        });
    }
    
}

export class IndexerService {
    public static getIndexer<ThrowOnError extends boolean = true>(options?: Options<GetIndexerData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetIndexerResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer',
            ...options
        });
    }
    
    public static getIndexerByIndexName<ThrowOnError extends boolean = true>(options: Options<GetIndexerByIndexNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetIndexerByIndexNameResponse, GetIndexerByIndexNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer/{indexName}',
            ...options
        });
    }
    
    public static postIndexerByIndexNameRebuild<ThrowOnError extends boolean = true>(options: Options<PostIndexerByIndexNameRebuildData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostIndexerByIndexNameRebuildError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',
            ...options
        });
    }
    
}

export class InstallService {
    public static getInstallSettings<ThrowOnError extends boolean = true>(options?: Options<GetInstallSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetInstallSettingsResponse, GetInstallSettingsError, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/settings',
            ...options
        });
    }
    
    public static postInstallSetup<ThrowOnError extends boolean = true>(options?: Options<PostInstallSetupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostInstallSetupError, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/setup',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postInstallValidateDatabase<ThrowOnError extends boolean = true>(options?: Options<PostInstallValidateDatabaseData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostInstallValidateDatabaseError, ThrowOnError>({
            url: '/umbraco/management/api/v1/install/validate-database',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class LanguageService {
    public static getItemLanguage<ThrowOnError extends boolean = true>(options?: Options<GetItemLanguageData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemLanguageResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/language',
            ...options
        });
    }
    
    public static getItemLanguageDefault<ThrowOnError extends boolean = true>(options?: Options<GetItemLanguageDefaultData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemLanguageDefaultResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/language/default',
            ...options
        });
    }
    
    public static getLanguage<ThrowOnError extends boolean = true>(options?: Options<GetLanguageData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLanguageResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language',
            ...options
        });
    }
    
    public static postLanguage<ThrowOnError extends boolean = true>(options?: Options<PostLanguageData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostLanguageError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<DeleteLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteLanguageByIsoCodeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options
        });
    }
    
    public static getLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<GetLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetLanguageByIsoCodeResponse, GetLanguageByIsoCodeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options
        });
    }
    
    public static putLanguageByIsoCode<ThrowOnError extends boolean = true>(options: Options<PutLanguageByIsoCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutLanguageByIsoCodeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/language/{isoCode}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class LogViewerService {
    public static getLogViewerLevel<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLevelData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerLevelResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/level',
            ...options
        });
    }
    
    public static getLogViewerLevelCount<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLevelCountData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerLevelCountResponse, GetLogViewerLevelCountError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/level-count',
            ...options
        });
    }
    
    public static getLogViewerLog<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerLogData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerLogResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/log',
            ...options
        });
    }
    
    public static getLogViewerMessageTemplate<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerMessageTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerMessageTemplateResponse, GetLogViewerMessageTemplateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/message-template',
            ...options
        });
    }
    
    public static getLogViewerSavedSearch<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerSavedSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLogViewerSavedSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            ...options
        });
    }
    
    public static postLogViewerSavedSearch<ThrowOnError extends boolean = true>(options?: Options<PostLogViewerSavedSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostLogViewerSavedSearchError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteLogViewerSavedSearchByName<ThrowOnError extends boolean = true>(options: Options<DeleteLogViewerSavedSearchByNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteLogViewerSavedSearchByNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            ...options
        });
    }
    
    public static getLogViewerSavedSearchByName<ThrowOnError extends boolean = true>(options: Options<GetLogViewerSavedSearchByNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetLogViewerSavedSearchByNameResponse, GetLogViewerSavedSearchByNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            ...options
        });
    }
    
    public static getLogViewerValidateLogsSize<ThrowOnError extends boolean = true>(options?: Options<GetLogViewerValidateLogsSizeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<unknown, GetLogViewerValidateLogsSizeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',
            ...options
        });
    }
    
}

export class ManifestService {
    public static getManifestManifest<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetManifestManifestResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/manifest/manifest',
            ...options
        });
    }
    
    public static getManifestManifestPrivate<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestPrivateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetManifestManifestPrivateResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/manifest/manifest/private',
            ...options
        });
    }
    
    public static getManifestManifestPublic<ThrowOnError extends boolean = true>(options?: Options<GetManifestManifestPublicData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetManifestManifestPublicResponse, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/manifest/manifest/public',
            ...options
        });
    }
    
}

export class MediaTypeService {
    public static getItemMediaType<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type',
            ...options
        });
    }
    
    public static getItemMediaTypeAllowed<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeAllowedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeAllowedResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/allowed',
            ...options
        });
    }
    
    public static getItemMediaTypeFolders<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeFoldersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeFoldersResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/folders',
            ...options
        });
    }
    
    public static getItemMediaTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaTypeSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media-type/search',
            ...options
        });
    }
    
    public static postMediaType<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMediaTypeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteMediaTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options
        });
    }
    
    public static getMediaTypeById<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdResponse, GetMediaTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options
        });
    }
    
    public static putMediaTypeById<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaTypeByIdAllowedChildren<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdAllowedChildrenData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdAllowedChildrenResponse, GetMediaTypeByIdAllowedChildrenError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',
            ...options
        });
    }
    
    public static getMediaTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdCompositionReferencesResponse, GetMediaTypeByIdCompositionReferencesError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postMediaTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostMediaTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostMediaTypeByIdCopyError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/copy',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaTypeByIdExport<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeByIdExportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeByIdExportResponse, GetMediaTypeByIdExportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/export',
            ...options
        });
    }
    
    public static putMediaTypeByIdImport<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdImportData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaTypeByIdImportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putMediaTypeByIdMove<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaTypeByIdMoveError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaTypeAllowedAtRoot<ThrowOnError extends boolean = true>(options?: Options<GetMediaTypeAllowedAtRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaTypeAllowedAtRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/allowed-at-root',
            ...options
        });
    }
    
    public static postMediaTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMediaTypeAvailableCompositionsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMediaTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaTypeConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/configuration',
            ...options
        });
    }
    
    public static postMediaTypeFolder<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMediaTypeFolderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteMediaTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options
        });
    }
    
    public static getMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<GetMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaTypeFolderByIdResponse, GetMediaTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options
        });
    }
    
    public static putMediaTypeFolderById<ThrowOnError extends boolean = true>(options: Options<PutMediaTypeFolderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaTypeFolderByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postMediaTypeImport<ThrowOnError extends boolean = true>(options?: Options<PostMediaTypeImportData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMediaTypeImportError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media-type/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTreeMediaTypeAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/ancestors',
            ...options
        });
    }
    
    public static getTreeMediaTypeChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/children',
            ...options
        });
    }
    
    public static getTreeMediaTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaTypeRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media-type/root',
            ...options
        });
    }
    
}

export class MediaService {
    public static getCollectionMedia<ThrowOnError extends boolean = true>(options?: Options<GetCollectionMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCollectionMediaResponse, GetCollectionMediaError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/collection/media',
            ...options
        });
    }
    
    public static getItemMedia<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media',
            ...options
        });
    }
    
    public static getItemMediaSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMediaSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMediaSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/media/search',
            ...options
        });
    }
    
    public static postMedia<ThrowOnError extends boolean = true>(options?: Options<PostMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMediaError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMediaById<ThrowOnError extends boolean = true>(options: Options<DeleteMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteMediaByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options
        });
    }
    
    public static getMediaById<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdResponse, GetMediaByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options
        });
    }
    
    public static putMediaById<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaByIdAuditLog<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdAuditLogData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdAuditLogResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/audit-log',
            ...options
        });
    }
    
    public static putMediaByIdMove<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdMoveData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaByIdMoveError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/move',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putMediaByIdMoveToRecycleBin<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdMoveToRecycleBinData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaByIdMoveToRecycleBinError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',
            ...options
        });
    }
    
    public static getMediaByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdReferencedByResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/referenced-by',
            ...options
        });
    }
    
    public static getMediaByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetMediaByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMediaByIdReferencedDescendantsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putMediaByIdValidate<ThrowOnError extends boolean = true>(options: Options<PutMediaByIdValidateData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMediaByIdValidateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetMediaAreReferencedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaAreReferencedResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/are-referenced',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static getMediaConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMediaConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/configuration',
            ...options
        });
    }
    
    public static putMediaSort<ThrowOnError extends boolean = true>(options?: Options<PutMediaSortData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<unknown, PutMediaSortError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMediaUrls<ThrowOnError extends boolean = true>(options?: Options<GetMediaUrlsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaUrlsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/urls',
            ...options
        });
    }
    
    public static postMediaValidate<ThrowOnError extends boolean = true>(options?: Options<PostMediaValidateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMediaValidateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/media/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteRecycleBinMedia<ThrowOnError extends boolean = true>(options?: Options<DeleteRecycleBinMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<unknown, DeleteRecycleBinMediaError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media',
            ...options
        });
    }
    
    public static deleteRecycleBinMediaById<ThrowOnError extends boolean = true>(options: Options<DeleteRecycleBinMediaByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteRecycleBinMediaByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',
            ...options
        });
    }
    
    public static getRecycleBinMediaByIdOriginalParent<ThrowOnError extends boolean = true>(options: Options<GetRecycleBinMediaByIdOriginalParentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRecycleBinMediaByIdOriginalParentResponse, GetRecycleBinMediaByIdOriginalParentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',
            ...options
        });
    }
    
    public static putRecycleBinMediaByIdRestore<ThrowOnError extends boolean = true>(options: Options<PutRecycleBinMediaByIdRestoreData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutRecycleBinMediaByIdRestoreError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getRecycleBinMediaChildren<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/children',
            ...options
        });
    }
    
    public static getRecycleBinMediaReferencedBy<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaReferencedByData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaReferencedByResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/referenced-by',
            ...options
        });
    }
    
    public static getRecycleBinMediaRoot<ThrowOnError extends boolean = true>(options?: Options<GetRecycleBinMediaRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRecycleBinMediaRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/recycle-bin/media/root',
            ...options
        });
    }
    
    public static getTreeMediaAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/ancestors',
            ...options
        });
    }
    
    public static getTreeMediaChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/children',
            ...options
        });
    }
    
    public static getTreeMediaRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMediaRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMediaRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/media/root',
            ...options
        });
    }
    
}

export class MemberGroupService {
    public static getItemMemberGroup<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberGroupResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-group',
            ...options
        });
    }
    
    public static getMemberGroup<ThrowOnError extends boolean = true>(options?: Options<GetMemberGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberGroupResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group',
            ...options
        });
    }
    
    public static postMemberGroup<ThrowOnError extends boolean = true>(options?: Options<PostMemberGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMemberGroupError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberGroupById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteMemberGroupByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options
        });
    }
    
    public static getMemberGroupById<ThrowOnError extends boolean = true>(options: Options<GetMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberGroupByIdResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options
        });
    }
    
    public static putMemberGroupById<ThrowOnError extends boolean = true>(options: Options<PutMemberGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMemberGroupByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-group/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTreeMemberGroupRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMemberGroupRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMemberGroupRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/member-group/root',
            ...options
        });
    }
    
}

export class MemberTypeService {
    public static getItemMemberType<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberTypeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-type',
            ...options
        });
    }
    
    public static getItemMemberTypeSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberTypeSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberTypeSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member-type/search',
            ...options
        });
    }
    
    public static postMemberType<ThrowOnError extends boolean = true>(options?: Options<PostMemberTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMemberTypeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberTypeById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteMemberTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options
        });
    }
    
    public static getMemberTypeById<ThrowOnError extends boolean = true>(options: Options<GetMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberTypeByIdResponse, GetMemberTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options
        });
    }
    
    public static putMemberTypeById<ThrowOnError extends boolean = true>(options: Options<PutMemberTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMemberTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMemberTypeByIdCompositionReferences<ThrowOnError extends boolean = true>(options: Options<GetMemberTypeByIdCompositionReferencesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberTypeByIdCompositionReferencesResponse, GetMemberTypeByIdCompositionReferencesError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',
            ...options
        });
    }
    
    public static postMemberTypeByIdCopy<ThrowOnError extends boolean = true>(options: Options<PostMemberTypeByIdCopyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostMemberTypeByIdCopyError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/{id}/copy',
            ...options
        });
    }
    
    public static postMemberTypeAvailableCompositions<ThrowOnError extends boolean = true>(options?: Options<PostMemberTypeAvailableCompositionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostMemberTypeAvailableCompositionsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/available-compositions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMemberTypeConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMemberTypeConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberTypeConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member-type/configuration',
            ...options
        });
    }
    
    public static getTreeMemberTypeRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeMemberTypeRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeMemberTypeRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/member-type/root',
            ...options
        });
    }
    
}

export class MemberService {
    public static getFilterMember<ThrowOnError extends boolean = true>(options?: Options<GetFilterMemberData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterMemberResponse, GetFilterMemberError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/member',
            ...options
        });
    }
    
    public static getItemMember<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member',
            ...options
        });
    }
    
    public static getItemMemberSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemMemberSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemMemberSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/member/search',
            ...options
        });
    }
    
    public static postMember<ThrowOnError extends boolean = true>(options?: Options<PostMemberData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMemberError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteMemberById<ThrowOnError extends boolean = true>(options: Options<DeleteMemberByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteMemberByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options
        });
    }
    
    public static getMemberById<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberByIdResponse, GetMemberByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options
        });
    }
    
    public static putMemberById<ThrowOnError extends boolean = true>(options: Options<PutMemberByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMemberByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMemberByIdReferencedBy<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdReferencedByData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberByIdReferencedByResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/referenced-by',
            ...options
        });
    }
    
    public static getMemberByIdReferencedDescendants<ThrowOnError extends boolean = true>(options: Options<GetMemberByIdReferencedDescendantsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetMemberByIdReferencedDescendantsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/referenced-descendants',
            ...options
        });
    }
    
    public static putMemberByIdValidate<ThrowOnError extends boolean = true>(options: Options<PutMemberByIdValidateData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutMemberByIdValidateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/{id}/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getMemberAreReferenced<ThrowOnError extends boolean = true>(options?: Options<GetMemberAreReferencedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberAreReferencedResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/are-referenced',
            ...options
        });
    }
    
    public static getMemberConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetMemberConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMemberConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/configuration',
            ...options
        });
    }
    
    public static postMemberValidate<ThrowOnError extends boolean = true>(options?: Options<PostMemberValidateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostMemberValidateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/member/validate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class ModelsBuilderService {
    public static postModelsBuilderBuild<ThrowOnError extends boolean = true>(options?: Options<PostModelsBuilderBuildData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostModelsBuilderBuildError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/build',
            ...options
        });
    }
    
    public static getModelsBuilderDashboard<ThrowOnError extends boolean = true>(options?: Options<GetModelsBuilderDashboardData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetModelsBuilderDashboardResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/dashboard',
            ...options
        });
    }
    
    public static getModelsBuilderStatus<ThrowOnError extends boolean = true>(options?: Options<GetModelsBuilderStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetModelsBuilderStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/models-builder/status',
            ...options
        });
    }
    
}

export class ObjectTypesService {
    public static getObjectTypes<ThrowOnError extends boolean = true>(options?: Options<GetObjectTypesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetObjectTypesResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/object-types',
            ...options
        });
    }
    
}

export class OEmbedService {
    public static getOembedQuery<ThrowOnError extends boolean = true>(options?: Options<GetOembedQueryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetOembedQueryResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/oembed/query',
            ...options
        });
    }
    
}

export class PackageService {
    public static postPackageByNameRunMigration<ThrowOnError extends boolean = true>(options: Options<PostPackageByNameRunMigrationData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostPackageByNameRunMigrationError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/{name}/run-migration',
            ...options
        });
    }
    
    public static getPackageConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetPackageConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPackageConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/configuration',
            ...options
        });
    }
    
    public static getPackageCreated<ThrowOnError extends boolean = true>(options?: Options<GetPackageCreatedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPackageCreatedResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created',
            ...options
        });
    }
    
    public static postPackageCreated<ThrowOnError extends boolean = true>(options?: Options<PostPackageCreatedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostPackageCreatedError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePackageCreatedById<ThrowOnError extends boolean = true>(options: Options<DeletePackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeletePackageCreatedByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options
        });
    }
    
    public static getPackageCreatedById<ThrowOnError extends boolean = true>(options: Options<GetPackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPackageCreatedByIdResponse, GetPackageCreatedByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options
        });
    }
    
    public static putPackageCreatedById<ThrowOnError extends boolean = true>(options: Options<PutPackageCreatedByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutPackageCreatedByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getPackageCreatedByIdDownload<ThrowOnError extends boolean = true>(options: Options<GetPackageCreatedByIdDownloadData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPackageCreatedByIdDownloadResponse, GetPackageCreatedByIdDownloadError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/created/{id}/download',
            ...options
        });
    }
    
    public static getPackageMigrationStatus<ThrowOnError extends boolean = true>(options?: Options<GetPackageMigrationStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPackageMigrationStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/package/migration-status',
            ...options
        });
    }
    
}

export class PartialViewService {
    public static getItemPartialView<ThrowOnError extends boolean = true>(options?: Options<GetItemPartialViewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemPartialViewResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/partial-view',
            ...options
        });
    }
    
    public static postPartialView<ThrowOnError extends boolean = true>(options?: Options<PostPartialViewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostPartialViewError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePartialViewByPath<ThrowOnError extends boolean = true>(options: Options<DeletePartialViewByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeletePartialViewByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options
        });
    }
    
    public static getPartialViewByPath<ThrowOnError extends boolean = true>(options: Options<GetPartialViewByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPartialViewByPathResponse, GetPartialViewByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options
        });
    }
    
    public static putPartialViewByPath<ThrowOnError extends boolean = true>(options: Options<PutPartialViewByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutPartialViewByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putPartialViewByPathRename<ThrowOnError extends boolean = true>(options: Options<PutPartialViewByPathRenameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutPartialViewByPathRenameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postPartialViewFolder<ThrowOnError extends boolean = true>(options?: Options<PostPartialViewFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostPartialViewFolderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePartialViewFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeletePartialViewFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeletePartialViewFolderByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            ...options
        });
    }
    
    public static getPartialViewFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetPartialViewFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPartialViewFolderByPathResponse, GetPartialViewFolderByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            ...options
        });
    }
    
    public static getPartialViewSnippet<ThrowOnError extends boolean = true>(options?: Options<GetPartialViewSnippetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPartialViewSnippetResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/snippet',
            ...options
        });
    }
    
    public static getPartialViewSnippetById<ThrowOnError extends boolean = true>(options: Options<GetPartialViewSnippetByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPartialViewSnippetByIdResponse, GetPartialViewSnippetByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',
            ...options
        });
    }
    
    public static getTreePartialViewAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreePartialViewAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',
            ...options
        });
    }
    
    public static getTreePartialViewChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreePartialViewChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/children',
            ...options
        });
    }
    
    public static getTreePartialViewRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreePartialViewRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreePartialViewRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/partial-view/root',
            ...options
        });
    }
    
}

export class PreviewService {
    public static deletePreview<ThrowOnError extends boolean = true>(options?: Options<DeletePreviewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/preview',
            ...options
        });
    }
    
    public static postPreview<ThrowOnError extends boolean = true>(options?: Options<PostPreviewData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/preview',
            ...options
        });
    }
    
}

export class ProfilingService {
    public static getProfilingStatus<ThrowOnError extends boolean = true>(options?: Options<GetProfilingStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProfilingStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/profiling/status',
            ...options
        });
    }
    
    public static putProfilingStatus<ThrowOnError extends boolean = true>(options?: Options<PutProfilingStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/profiling/status',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class PropertyTypeService {
    public static getPropertyTypeIsUsed<ThrowOnError extends boolean = true>(options?: Options<GetPropertyTypeIsUsedData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPropertyTypeIsUsedResponse, GetPropertyTypeIsUsedError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/property-type/is-used',
            ...options
        });
    }
    
}

export class PublishedCacheService {
    public static postPublishedCacheRebuild<ThrowOnError extends boolean = true>(options?: Options<PostPublishedCacheRebuildData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/rebuild',
            ...options
        });
    }
    
    public static getPublishedCacheRebuildStatus<ThrowOnError extends boolean = true>(options?: Options<GetPublishedCacheRebuildStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPublishedCacheRebuildStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/rebuild/status',
            ...options
        });
    }
    
    public static postPublishedCacheReload<ThrowOnError extends boolean = true>(options?: Options<PostPublishedCacheReloadData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/published-cache/reload',
            ...options
        });
    }
    
}

export class RedirectManagementService {
    public static getRedirectManagement<ThrowOnError extends boolean = true>(options?: Options<GetRedirectManagementData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRedirectManagementResponse, GetRedirectManagementError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management',
            ...options
        });
    }
    
    public static deleteRedirectManagementById<ThrowOnError extends boolean = true>(options: Options<DeleteRedirectManagementByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            ...options
        });
    }
    
    public static getRedirectManagementById<ThrowOnError extends boolean = true>(options: Options<GetRedirectManagementByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRedirectManagementByIdResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            ...options
        });
    }
    
    public static getRedirectManagementStatus<ThrowOnError extends boolean = true>(options?: Options<GetRedirectManagementStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRedirectManagementStatusResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/status',
            ...options
        });
    }
    
    public static postRedirectManagementStatus<ThrowOnError extends boolean = true>(options?: Options<PostRedirectManagementStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/redirect-management/status',
            ...options
        });
    }
    
}

export class RelationTypeService {
    public static getItemRelationType<ThrowOnError extends boolean = true>(options?: Options<GetItemRelationTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemRelationTypeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/relation-type',
            ...options
        });
    }
    
    public static getRelationType<ThrowOnError extends boolean = true>(options?: Options<GetRelationTypeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRelationTypeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation-type',
            ...options
        });
    }
    
    public static getRelationTypeById<ThrowOnError extends boolean = true>(options: Options<GetRelationTypeByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRelationTypeByIdResponse, GetRelationTypeByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation-type/{id}',
            ...options
        });
    }
    
}

export class RelationService {
    public static getRelationByRelationTypeId<ThrowOnError extends boolean = true>(options: Options<GetRelationByRelationTypeIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRelationByRelationTypeIdResponse, GetRelationByRelationTypeIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/relation/type/{id}',
            ...options
        });
    }
    
}

export class ScriptService {
    public static getItemScript<ThrowOnError extends boolean = true>(options?: Options<GetItemScriptData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemScriptResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/script',
            ...options
        });
    }
    
    public static postScript<ThrowOnError extends boolean = true>(options?: Options<PostScriptData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostScriptError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteScriptByPath<ThrowOnError extends boolean = true>(options: Options<DeleteScriptByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteScriptByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options
        });
    }
    
    public static getScriptByPath<ThrowOnError extends boolean = true>(options: Options<GetScriptByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetScriptByPathResponse, GetScriptByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options
        });
    }
    
    public static putScriptByPath<ThrowOnError extends boolean = true>(options: Options<PutScriptByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutScriptByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putScriptByPathRename<ThrowOnError extends boolean = true>(options: Options<PutScriptByPathRenameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutScriptByPathRenameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postScriptFolder<ThrowOnError extends boolean = true>(options?: Options<PostScriptFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostScriptFolderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteScriptFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeleteScriptFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteScriptFolderByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder/{path}',
            ...options
        });
    }
    
    public static getScriptFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetScriptFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetScriptFolderByPathResponse, GetScriptFolderByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/script/folder/{path}',
            ...options
        });
    }
    
    public static getTreeScriptAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeScriptAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/ancestors',
            ...options
        });
    }
    
    public static getTreeScriptChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeScriptChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/children',
            ...options
        });
    }
    
    public static getTreeScriptRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeScriptRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeScriptRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/script/root',
            ...options
        });
    }
    
}

export class SearcherService {
    public static getSearcher<ThrowOnError extends boolean = true>(options?: Options<GetSearcherData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSearcherResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/searcher',
            ...options
        });
    }
    
    public static getSearcherBySearcherNameQuery<ThrowOnError extends boolean = true>(options: Options<GetSearcherBySearcherNameQueryData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetSearcherBySearcherNameQueryResponse, GetSearcherBySearcherNameQueryError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',
            ...options
        });
    }
    
}

export class SecurityService {
    public static getSecurityConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetSecurityConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSecurityConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/configuration',
            ...options
        });
    }
    
    public static postSecurityForgotPassword<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostSecurityForgotPasswordError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/forgot-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postSecurityForgotPasswordReset<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordResetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordResetResponse, PostSecurityForgotPasswordResetError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/security/forgot-password/reset',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postSecurityForgotPasswordVerify<ThrowOnError extends boolean = true>(options?: Options<PostSecurityForgotPasswordVerifyData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostSecurityForgotPasswordVerifyResponse, PostSecurityForgotPasswordVerifyError, ThrowOnError>({
            url: '/umbraco/management/api/v1/security/forgot-password/verify',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class SegmentService {
    public static getSegment<ThrowOnError extends boolean = true>(options?: Options<GetSegmentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSegmentResponse, GetSegmentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/segment',
            ...options
        });
    }
    
}

export class ServerService {
    public static getServerConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetServerConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerConfigurationResponse, unknown, ThrowOnError>({
            url: '/umbraco/management/api/v1/server/configuration',
            ...options
        });
    }
    
    public static getServerInformation<ThrowOnError extends boolean = true>(options?: Options<GetServerInformationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerInformationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/information',
            ...options
        });
    }
    
    public static getServerStatus<ThrowOnError extends boolean = true>(options?: Options<GetServerStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerStatusResponse, GetServerStatusError, ThrowOnError>({
            url: '/umbraco/management/api/v1/server/status',
            ...options
        });
    }
    
    public static getServerTroubleshooting<ThrowOnError extends boolean = true>(options?: Options<GetServerTroubleshootingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerTroubleshootingResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/troubleshooting',
            ...options
        });
    }
    
    public static getServerUpgradeCheck<ThrowOnError extends boolean = true>(options?: Options<GetServerUpgradeCheckData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetServerUpgradeCheckResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/server/upgrade-check',
            ...options
        });
    }
    
}

export class StaticFileService {
    public static getItemStaticFile<ThrowOnError extends boolean = true>(options?: Options<GetItemStaticFileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemStaticFileResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/static-file',
            ...options
        });
    }
    
    public static getTreeStaticFileAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStaticFileAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/ancestors',
            ...options
        });
    }
    
    public static getTreeStaticFileChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStaticFileChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/children',
            ...options
        });
    }
    
    public static getTreeStaticFileRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeStaticFileRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStaticFileRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/static-file/root',
            ...options
        });
    }
    
}

export class StylesheetService {
    public static getItemStylesheet<ThrowOnError extends boolean = true>(options?: Options<GetItemStylesheetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemStylesheetResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/stylesheet',
            ...options
        });
    }
    
    public static postStylesheet<ThrowOnError extends boolean = true>(options?: Options<PostStylesheetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostStylesheetError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<DeleteStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteStylesheetByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options
        });
    }
    
    public static getStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<GetStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetStylesheetByPathResponse, GetStylesheetByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options
        });
    }
    
    public static putStylesheetByPath<ThrowOnError extends boolean = true>(options: Options<PutStylesheetByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutStylesheetByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putStylesheetByPathRename<ThrowOnError extends boolean = true>(options: Options<PutStylesheetByPathRenameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutStylesheetByPathRenameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postStylesheetFolder<ThrowOnError extends boolean = true>(options?: Options<PostStylesheetFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostStylesheetFolderError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteStylesheetFolderByPath<ThrowOnError extends boolean = true>(options: Options<DeleteStylesheetFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteStylesheetFolderByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            ...options
        });
    }
    
    public static getStylesheetFolderByPath<ThrowOnError extends boolean = true>(options: Options<GetStylesheetFolderByPathData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetStylesheetFolderByPathResponse, GetStylesheetFolderByPathError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            ...options
        });
    }
    
    public static getTreeStylesheetAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStylesheetAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',
            ...options
        });
    }
    
    public static getTreeStylesheetChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStylesheetChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/children',
            ...options
        });
    }
    
    public static getTreeStylesheetRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeStylesheetRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeStylesheetRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/stylesheet/root',
            ...options
        });
    }
    
}

export class TagService {
    public static getTag<ThrowOnError extends boolean = true>(options?: Options<GetTagData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTagResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tag',
            ...options
        });
    }
    
}

export class TelemetryService {
    public static getTelemetry<ThrowOnError extends boolean = true>(options?: Options<GetTelemetryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTelemetryResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry',
            ...options
        });
    }
    
    public static getTelemetryLevel<ThrowOnError extends boolean = true>(options?: Options<GetTelemetryLevelData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTelemetryLevelResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry/level',
            ...options
        });
    }
    
    public static postTelemetryLevel<ThrowOnError extends boolean = true>(options?: Options<PostTelemetryLevelData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostTelemetryLevelError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/telemetry/level',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class TemplateService {
    public static getItemTemplate<ThrowOnError extends boolean = true>(options?: Options<GetItemTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemTemplateResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/template',
            ...options
        });
    }
    
    public static getItemTemplateSearch<ThrowOnError extends boolean = true>(options?: Options<GetItemTemplateSearchData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemTemplateSearchResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/template/search',
            ...options
        });
    }
    
    public static postTemplate<ThrowOnError extends boolean = true>(options?: Options<PostTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostTemplateError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteTemplateById<ThrowOnError extends boolean = true>(options: Options<DeleteTemplateByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteTemplateByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options
        });
    }
    
    public static getTemplateById<ThrowOnError extends boolean = true>(options: Options<GetTemplateByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetTemplateByIdResponse, GetTemplateByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options
        });
    }
    
    public static putTemplateById<ThrowOnError extends boolean = true>(options: Options<PutTemplateByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutTemplateByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTemplateConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetTemplateConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTemplateConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/configuration',
            ...options
        });
    }
    
    public static postTemplateQueryExecute<ThrowOnError extends boolean = true>(options?: Options<PostTemplateQueryExecuteData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTemplateQueryExecuteResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/query/execute',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTemplateQuerySettings<ThrowOnError extends boolean = true>(options?: Options<GetTemplateQuerySettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTemplateQuerySettingsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/template/query/settings',
            ...options
        });
    }
    
    public static getTreeTemplateAncestors<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateAncestorsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeTemplateAncestorsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/ancestors',
            ...options
        });
    }
    
    public static getTreeTemplateChildren<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateChildrenData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeTemplateChildrenResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/children',
            ...options
        });
    }
    
    public static getTreeTemplateRoot<ThrowOnError extends boolean = true>(options?: Options<GetTreeTemplateRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTreeTemplateRootResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/tree/template/root',
            ...options
        });
    }
    
}

export class TemporaryFileService {
    public static postTemporaryFile<ThrowOnError extends boolean = true>(options?: Options<PostTemporaryFileData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostTemporaryFileError, ThrowOnError>({
            ...formDataBodySerializer,
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file',
            ...options,
            headers: {
                'Content-Type': null,
                ...options?.headers
            }
        });
    }
    
    public static deleteTemporaryFileById<ThrowOnError extends boolean = true>(options: Options<DeleteTemporaryFileByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteTemporaryFileByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            ...options
        });
    }
    
    public static getTemporaryFileById<ThrowOnError extends boolean = true>(options: Options<GetTemporaryFileByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetTemporaryFileByIdResponse, GetTemporaryFileByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            ...options
        });
    }
    
    public static getTemporaryFileConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetTemporaryFileConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTemporaryFileConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/temporary-file/configuration',
            ...options
        });
    }
    
}

export class UpgradeService {
    public static postUpgradeAuthorize<ThrowOnError extends boolean = true>(options?: Options<PostUpgradeAuthorizeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUpgradeAuthorizeError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/upgrade/authorize',
            ...options
        });
    }
    
    public static getUpgradeSettings<ThrowOnError extends boolean = true>(options?: Options<GetUpgradeSettingsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUpgradeSettingsResponse, GetUpgradeSettingsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/upgrade/settings',
            ...options
        });
    }
    
}

export class UserDataService {
    public static getUserData<ThrowOnError extends boolean = true>(options?: Options<GetUserDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserDataResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options
        });
    }
    
    public static postUserData<ThrowOnError extends boolean = true>(options?: Options<PostUserDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserDataError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static putUserData<ThrowOnError extends boolean = true>(options?: Options<PutUserDataData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<unknown, PutUserDataError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserDataById<ThrowOnError extends boolean = true>(options: Options<GetUserDataByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserDataByIdResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-data/{id}',
            ...options
        });
    }
    
}

export class UserGroupService {
    public static getFilterUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetFilterUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterUserGroupResponse, GetFilterUserGroupError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/user-group',
            ...options
        });
    }
    
    public static getItemUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetItemUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemUserGroupResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/user-group',
            ...options
        });
    }
    
    public static deleteUserGroup<ThrowOnError extends boolean = true>(options?: Options<DeleteUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<unknown, DeleteUserGroupError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserGroup<ThrowOnError extends boolean = true>(options?: Options<GetUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserGroupResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options
        });
    }
    
    public static postUserGroup<ThrowOnError extends boolean = true>(options?: Options<PostUserGroupData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserGroupError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserGroupById<ThrowOnError extends boolean = true>(options: Options<DeleteUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteUserGroupByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options
        });
    }
    
    public static getUserGroupById<ThrowOnError extends boolean = true>(options: Options<GetUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserGroupByIdResponse, GetUserGroupByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options
        });
    }
    
    public static putUserGroupById<ThrowOnError extends boolean = true>(options: Options<PutUserGroupByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutUserGroupByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserGroupByIdUsers<ThrowOnError extends boolean = true>(options: Options<DeleteUserGroupByIdUsersData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteUserGroupByIdUsersError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserGroupByIdUsers<ThrowOnError extends boolean = true>(options: Options<PostUserGroupByIdUsersData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostUserGroupByIdUsersError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class UserService {
    public static getFilterUser<ThrowOnError extends boolean = true>(options?: Options<GetFilterUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilterUserResponse, GetFilterUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/filter/user',
            ...options
        });
    }
    
    public static getItemUser<ThrowOnError extends boolean = true>(options?: Options<GetItemUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemUserResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/user',
            ...options
        });
    }
    
    public static deleteUser<ThrowOnError extends boolean = true>(options?: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<unknown, DeleteUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUser<ThrowOnError extends boolean = true>(options?: Options<GetUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options
        });
    }
    
    public static postUser<ThrowOnError extends boolean = true>(options?: Options<PostUserData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserById<ThrowOnError extends boolean = true>(options: Options<DeleteUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteUserByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options
        });
    }
    
    public static getUserById<ThrowOnError extends boolean = true>(options: Options<GetUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdResponse, GetUserByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options
        });
    }
    
    public static putUserById<ThrowOnError extends boolean = true>(options: Options<PutUserByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutUserByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserById2Fa<ThrowOnError extends boolean = true>(options: Options<GetUserById2FaData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserById2FaResponse, GetUserById2FaError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/2fa',
            ...options
        });
    }
    
    public static deleteUserById2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<DeleteUserById2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteUserById2FaByProviderNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',
            ...options
        });
    }
    
    public static getUserByIdCalculateStartNodes<ThrowOnError extends boolean = true>(options: Options<GetUserByIdCalculateStartNodesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdCalculateStartNodesResponse, GetUserByIdCalculateStartNodesError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/calculate-start-nodes',
            ...options
        });
    }
    
    public static postUserByIdChangePassword<ThrowOnError extends boolean = true>(options: Options<PostUserByIdChangePasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostUserByIdChangePasswordError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/change-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserByIdClientCredentials<ThrowOnError extends boolean = true>(options: Options<GetUserByIdClientCredentialsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserByIdClientCredentialsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            ...options
        });
    }
    
    public static postUserByIdClientCredentials<ThrowOnError extends boolean = true>(options: Options<PostUserByIdClientCredentialsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostUserByIdClientCredentialsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteUserByIdClientCredentialsByClientId<ThrowOnError extends boolean = true>(options: Options<DeleteUserByIdClientCredentialsByClientIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteUserByIdClientCredentialsByClientIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/client-credentials/{clientId}',
            ...options
        });
    }
    
    public static postUserByIdResetPassword<ThrowOnError extends boolean = true>(options: Options<PostUserByIdResetPasswordData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserByIdResetPasswordResponse, PostUserByIdResetPasswordError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/{id}/reset-password',
            ...options
        });
    }
    
    public static deleteUserAvatarById<ThrowOnError extends boolean = true>(options: Options<DeleteUserAvatarByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteUserAvatarByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            ...options
        });
    }
    
    public static postUserAvatarById<ThrowOnError extends boolean = true>(options: Options<PostUserAvatarByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<unknown, PostUserAvatarByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetUserConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/configuration',
            ...options
        });
    }
    
    public static getUserCurrent<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current',
            ...options
        });
    }
    
    public static getUserCurrent2Fa<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrent2FaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrent2FaResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa',
            ...options
        });
    }
    
    public static deleteUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<DeleteUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteUserCurrent2FaByProviderNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options
        });
    }
    
    public static getUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<GetUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetUserCurrent2FaByProviderNameResponse, GetUserCurrent2FaByProviderNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options
        });
    }
    
    public static postUserCurrent2FaByProviderName<ThrowOnError extends boolean = true>(options: Options<PostUserCurrent2FaByProviderNameData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<PostUserCurrent2FaByProviderNameResponse, PostUserCurrent2FaByProviderNameError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserCurrentAvatar<ThrowOnError extends boolean = true>(options?: Options<PostUserCurrentAvatarData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserCurrentAvatarError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/avatar',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserCurrentChangePassword<ThrowOnError extends boolean = true>(options?: Options<PostUserCurrentChangePasswordData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserCurrentChangePasswordError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/change-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getUserCurrentConfiguration<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentConfigurationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentConfigurationResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/configuration',
            ...options
        });
    }
    
    public static getUserCurrentLoginProviders<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentLoginProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentLoginProvidersResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/login-providers',
            ...options
        });
    }
    
    public static getUserCurrentPermissions<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsResponse, GetUserCurrentPermissionsError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions',
            ...options
        });
    }
    
    public static getUserCurrentPermissionsDocument<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsDocumentData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsDocumentResponse, GetUserCurrentPermissionsDocumentError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions/document',
            ...options
        });
    }
    
    public static getUserCurrentPermissionsMedia<ThrowOnError extends boolean = true>(options?: Options<GetUserCurrentPermissionsMediaData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetUserCurrentPermissionsMediaResponse, GetUserCurrentPermissionsMediaError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/current/permissions/media',
            ...options
        });
    }
    
    public static postUserDisable<ThrowOnError extends boolean = true>(options?: Options<PostUserDisableData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserDisableError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/disable',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserEnable<ThrowOnError extends boolean = true>(options?: Options<PostUserEnableData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserEnableError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/enable',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInvite<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserInviteError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/invite',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteCreatePassword<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteCreatePasswordData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserInviteCreatePasswordError, ThrowOnError>({
            url: '/umbraco/management/api/v1/user/invite/create-password',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteResend<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteResendData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserInviteResendError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/invite/resend',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserInviteVerify<ThrowOnError extends boolean = true>(options?: Options<PostUserInviteVerifyData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostUserInviteVerifyResponse, PostUserInviteVerifyError, ThrowOnError>({
            url: '/umbraco/management/api/v1/user/invite/verify',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserSetUserGroups<ThrowOnError extends boolean = true>(options?: Options<PostUserSetUserGroupsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/set-user-groups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postUserUnlock<ThrowOnError extends boolean = true>(options?: Options<PostUserUnlockData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostUserUnlockError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/user/unlock',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
}

export class WebhookService {
    public static getItemWebhook<ThrowOnError extends boolean = true>(options?: Options<GetItemWebhookData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetItemWebhookResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/item/webhook',
            ...options
        });
    }
    
    public static getWebhook<ThrowOnError extends boolean = true>(options?: Options<GetWebhookData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetWebhookResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook',
            ...options
        });
    }
    
    public static postWebhook<ThrowOnError extends boolean = true>(options?: Options<PostWebhookData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<unknown, PostWebhookError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteWebhookById<ThrowOnError extends boolean = true>(options: Options<DeleteWebhookByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<unknown, DeleteWebhookByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options
        });
    }
    
    public static getWebhookById<ThrowOnError extends boolean = true>(options: Options<GetWebhookByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetWebhookByIdResponse, GetWebhookByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options
        });
    }
    
    public static putWebhookById<ThrowOnError extends boolean = true>(options: Options<PutWebhookByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<unknown, PutWebhookByIdError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getWebhookByIdLogs<ThrowOnError extends boolean = true>(options: Options<GetWebhookByIdLogsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetWebhookByIdLogsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/{id}/logs',
            ...options
        });
    }
    
    public static getWebhookEvents<ThrowOnError extends boolean = true>(options?: Options<GetWebhookEventsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetWebhookEventsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/events',
            ...options
        });
    }
    
    public static getWebhookLogs<ThrowOnError extends boolean = true>(options?: Options<GetWebhookLogsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetWebhookLogsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/management/api/v1/webhook/logs',
            ...options
        });
    }
    
}