// This file is auto-generated by @hey-api/openapi-ts

export const AllowedDocumentTypeModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AllowedMediaTypeModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AuditLogResponseModelSchema = {
    required: ['logType', 'timestamp', 'user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        logType: {
            '$ref': '#/components/schemas/AuditTypeModel'
        },
        comment: {
            type: 'string',
            nullable: true
        },
        parameters: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AuditTypeModelSchema = {
    enum: ['New', 'Save', 'SaveVariant', 'Open', 'Delete', 'Publish', 'PublishVariant', 'SendToPublish', 'SendToPublishVariant', 'Unpublish', 'UnpublishVariant', 'Move', 'Copy', 'AssignDomain', 'PublicAccess', 'Sort', 'Notify', 'System', 'RollBack', 'PackagerInstall', 'PackagerUninstall', 'Custom', 'ContentVersionPreventCleanup', 'ContentVersionEnableCleanup'],
    type: 'string'
} as const;

export const AvailableDocumentTypeCompositionResponseModelSchema = {
    required: ['folderPath', 'icon', 'id', 'isCompatible', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string'
        },
        folderPath: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        isCompatible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const AvailableMediaTypeCompositionResponseModelSchema = {
    required: ['folderPath', 'icon', 'id', 'isCompatible', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string'
        },
        folderPath: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        isCompatible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const AvailableMemberTypeCompositionResponseModelSchema = {
    required: ['folderPath', 'icon', 'id', 'isCompatible', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string'
        },
        folderPath: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        isCompatible: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const CalculatedUserStartNodesResponseModelSchema = {
    required: ['documentStartNodeIds', 'hasDocumentRootAccess', 'hasMediaRootAccess', 'id', 'mediaStartNodeIds'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        documentStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasDocumentRootAccess: {
            type: 'boolean'
        },
        mediaStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasMediaRootAccess: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ChangePasswordCurrentUserRequestModelSchema = {
    required: ['newPassword'],
    type: 'object',
    properties: {
        newPassword: {
            type: 'string'
        },
        oldPassword: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ChangePasswordUserRequestModelSchema = {
    required: ['newPassword'],
    type: 'object',
    properties: {
        newPassword: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CompositionTypeModelSchema = {
    enum: ['Composition', 'Inheritance'],
    type: 'string'
} as const;

export const ConsentLevelPresentationModelSchema = {
    required: ['description', 'level'],
    type: 'object',
    properties: {
        level: {
            '$ref': '#/components/schemas/TelemetryLevelModel'
        },
        description: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CopyDataTypeRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CopyDocumentRequestModelSchema = {
    required: ['includeDescendants', 'relateToOriginal'],
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        relateToOriginal: {
            type: 'boolean'
        },
        includeDescendants: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const CopyDocumentTypeRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CopyMediaTypeRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateDataTypeRequestModelSchema = {
    required: ['editorAlias', 'editorUiAlias', 'name', 'values'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        editorAlias: {
            minLength: 1,
            type: 'string'
        },
        editorUiAlias: {
            type: 'string'
        },
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DataTypePropertyPresentationModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateDictionaryItemRequestModelSchema = {
    required: ['name', 'translations'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        translations: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DictionaryItemTranslationModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateDocumentBlueprintFromDocumentRequestModelSchema = {
    required: ['document', 'name'],
    type: 'object',
    properties: {
        document: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateDocumentBlueprintRequestModelSchema = {
    required: ['documentType', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantRequestModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CreateDocumentRequestModelSchema = {
    required: ['documentType', 'template', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantRequestModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        template: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateDocumentTypePropertyTypeContainerRequestModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const CreateDocumentTypePropertyTypeRequestModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CreateDocumentTypeRequestModelSchema = {
    required: ['alias', 'allowedAsRoot', 'allowedDocumentTypes', 'allowedTemplates', 'cleanup', 'compositions', 'containers', 'icon', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CreateDocumentTypePropertyTypeRequestModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CreateDocumentTypePropertyTypeContainerRequestModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        allowedTemplates: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        defaultTemplate: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        cleanup: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeCleanupModel'
                }
            ]
        },
        allowedDocumentTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeSortModel'
                    }
                ]
            }
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeCompositionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const CreateFolderRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateInitialPasswordUserRequestModelSchema = {
    required: ['password', 'token', 'user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        token: {
            minLength: 1,
            type: 'string'
        },
        password: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateLanguageRequestModelSchema = {
    required: ['isDefault', 'isMandatory', 'isoCode', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isMandatory: {
            type: 'boolean'
        },
        fallbackIsoCode: {
            type: 'string',
            nullable: true
        },
        isoCode: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateMediaRequestModelSchema = {
    required: ['mediaType', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaVariantRequestModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CreateMediaTypePropertyTypeContainerRequestModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const CreateMediaTypePropertyTypeRequestModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CreateMediaTypeRequestModelSchema = {
    required: ['alias', 'allowedAsRoot', 'allowedMediaTypes', 'compositions', 'containers', 'icon', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CreateMediaTypePropertyTypeRequestModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CreateMediaTypePropertyTypeContainerRequestModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        allowedMediaTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeSortModel'
                    }
                ]
            }
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeCompositionModel'
                    }
                ]
            }
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateMemberGroupRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateMemberRequestModelSchema = {
    required: ['email', 'isApproved', 'memberType', 'password', 'username', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberVariantRequestModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        email: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        memberType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        groups: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        isApproved: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const CreateMemberTypePropertyTypeContainerRequestModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const CreateMemberTypePropertyTypeRequestModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'isSensitive', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment', 'visibility'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        },
        isSensitive: {
            type: 'boolean'
        },
        visibility: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MemberTypePropertyTypeVisibilityModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CreateMemberTypeRequestModelSchema = {
    required: ['alias', 'allowedAsRoot', 'compositions', 'containers', 'icon', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CreateMemberTypePropertyTypeRequestModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CreateMemberTypePropertyTypeContainerRequestModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberTypeCompositionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const CreatePackageRequestModelSchema = {
    required: ['contentLoadChildNodes', 'dataTypes', 'dictionaryItems', 'documentTypes', 'languages', 'mediaIds', 'mediaLoadChildNodes', 'mediaTypes', 'name', 'partialViews', 'scripts', 'stylesheets', 'templates'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        contentNodeId: {
            type: 'string',
            nullable: true
        },
        contentLoadChildNodes: {
            type: 'boolean'
        },
        mediaIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        mediaLoadChildNodes: {
            type: 'boolean'
        },
        documentTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        mediaTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        dataTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        templates: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        partialViews: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        stylesheets: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        scripts: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        dictionaryItems: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreatePartialViewFolderRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreatePartialViewRequestModelSchema = {
    required: ['content', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateScriptFolderRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateScriptRequestModelSchema = {
    required: ['content', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateStylesheetFolderRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateStylesheetRequestModelSchema = {
    required: ['content', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateTemplateRequestModelSchema = {
    required: ['alias', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        content: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateUserClientCredentialsRequestModelSchema = {
    required: ['clientId', 'clientSecret'],
    type: 'object',
    properties: {
        clientId: {
            type: 'string'
        },
        clientSecret: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CreateUserDataRequestModelSchema = {
    required: ['group', 'identifier', 'value'],
    type: 'object',
    properties: {
        group: {
            type: 'string'
        },
        identifier: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        key: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateUserGroupRequestModelSchema = {
    required: ['alias', 'documentRootAccess', 'fallbackPermissions', 'hasAccessToAllLanguages', 'languages', 'mediaRootAccess', 'name', 'permissions', 'sections'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        icon: {
            type: 'string',
            nullable: true
        },
        sections: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        hasAccessToAllLanguages: {
            type: 'boolean'
        },
        documentStartNode: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        documentRootAccess: {
            type: 'boolean'
        },
        mediaStartNode: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        mediaRootAccess: {
            type: 'boolean'
        },
        fallbackPermissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        permissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentPermissionPresentationModel'
                    },
                    {
                        '$ref': '#/components/schemas/UnknownTypePermissionPresentationModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateUserRequestModelSchema = {
    required: ['email', 'kind', 'name', 'userGroupIds', 'userName'],
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        userName: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        userGroupIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        kind: {
            '$ref': '#/components/schemas/UserKindModel'
        }
    },
    additionalProperties: false
} as const;

export const CreateWebhookRequestModelSchema = {
    required: ['contentTypeKeys', 'enabled', 'events', 'headers', 'url'],
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        },
        url: {
            minLength: 1,
            type: 'string'
        },
        contentTypeKeys: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        headers: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        events: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const CultureAndScheduleRequestModelSchema = {
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        schedule: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ScheduleRequestModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CultureReponseModelSchema = {
    required: ['englishName', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        englishName: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const CurrenUserConfigurationResponseModelSchema = {
    required: ['keepUserLoggedIn', 'passwordConfiguration', 'usernameIsEmail'],
    type: 'object',
    properties: {
        keepUserLoggedIn: {
            type: 'boolean'
        },
        usernameIsEmail: {
            type: 'boolean',
            deprecated: true
        },
        passwordConfiguration: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PasswordConfigurationResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const CurrentUserResponseModelSchema = {
    required: ['allowedSections', 'avatarUrls', 'documentStartNodeIds', 'email', 'fallbackPermissions', 'hasAccessToAllLanguages', 'hasAccessToSensitiveData', 'hasDocumentRootAccess', 'hasMediaRootAccess', 'id', 'isAdmin', 'languageIsoCode', 'languages', 'mediaStartNodeIds', 'name', 'permissions', 'userName'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            type: 'string'
        },
        userName: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        languageIsoCode: {
            type: 'string',
            nullable: true
        },
        documentStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasDocumentRootAccess: {
            type: 'boolean'
        },
        mediaStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasMediaRootAccess: {
            type: 'boolean'
        },
        avatarUrls: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        hasAccessToAllLanguages: {
            type: 'boolean'
        },
        hasAccessToSensitiveData: {
            type: 'boolean'
        },
        fallbackPermissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        permissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentPermissionPresentationModel'
                    },
                    {
                        '$ref': '#/components/schemas/UnknownTypePermissionPresentationModel'
                    }
                ]
            }
        },
        allowedSections: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        isAdmin: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DataTypeChangeModeModelSchema = {
    enum: ['True', 'False', 'FalseWithHelpText'],
    type: 'string'
} as const;

export const DataTypeContentTypeReferenceModelSchema = {
    required: ['icon', 'id', 'name', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        type: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DataTypeItemResponseModelSchema = {
    required: ['editorAlias', 'id', 'isDeletable', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        editorUiAlias: {
            type: 'string',
            nullable: true
        },
        editorAlias: {
            type: 'string'
        },
        isDeletable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DataTypePropertyPresentationModelSchema = {
    required: ['alias'],
    type: 'object',
    properties: {
        alias: {
            type: 'string'
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DataTypePropertyReferenceModelSchema = {
    required: ['alias', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DataTypeReferenceResponseModelSchema = {
    required: ['contentType', 'properties'],
    type: 'object',
    properties: {
        contentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DataTypeContentTypeReferenceModel'
                }
            ]
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DataTypePropertyReferenceModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DataTypeResponseModelSchema = {
    required: ['canIgnoreStartNodes', 'editorAlias', 'editorUiAlias', 'id', 'isDeletable', 'name', 'values'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        editorAlias: {
            minLength: 1,
            type: 'string'
        },
        editorUiAlias: {
            type: 'string'
        },
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DataTypePropertyPresentationModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        isDeletable: {
            type: 'boolean'
        },
        canIgnoreStartNodes: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DataTypeTreeItemResponseModelSchema = {
    required: ['hasChildren', 'id', 'isDeletable', 'isFolder', 'name'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string'
        },
        isFolder: {
            type: 'boolean'
        },
        editorUiAlias: {
            type: 'string',
            nullable: true
        },
        isDeletable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DatabaseInstallRequestModelSchema = {
    required: ['id', 'providerName', 'trustServerCertificate', 'useIntegratedAuthentication'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        providerName: {
            minLength: 1,
            type: 'string'
        },
        server: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        username: {
            type: 'string',
            nullable: true
        },
        password: {
            type: 'string',
            nullable: true
        },
        useIntegratedAuthentication: {
            type: 'boolean'
        },
        connectionString: {
            type: 'string',
            nullable: true
        },
        trustServerCertificate: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DatabaseSettingsPresentationModelSchema = {
    required: ['defaultDatabaseName', 'displayName', 'id', 'isConfigured', 'providerName', 'requiresConnectionTest', 'requiresCredentials', 'requiresServer', 'serverPlaceholder', 'sortOrder', 'supportsIntegratedAuthentication'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        displayName: {
            minLength: 1,
            type: 'string'
        },
        defaultDatabaseName: {
            minLength: 1,
            type: 'string'
        },
        providerName: {
            minLength: 1,
            type: 'string'
        },
        isConfigured: {
            type: 'boolean'
        },
        requiresServer: {
            type: 'boolean'
        },
        serverPlaceholder: {
            minLength: 1,
            type: 'string'
        },
        requiresCredentials: {
            type: 'boolean'
        },
        supportsIntegratedAuthentication: {
            type: 'boolean'
        },
        requiresConnectionTest: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DatatypeConfigurationResponseModelSchema = {
    required: ['canBeChanged', 'documentListViewId', 'mediaListViewId'],
    type: 'object',
    properties: {
        canBeChanged: {
            '$ref': '#/components/schemas/DataTypeChangeModeModel'
        },
        documentListViewId: {
            type: 'string',
            format: 'uuid'
        },
        mediaListViewId: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DefaultReferenceResponseModelSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DeleteUserGroupsRequestModelSchema = {
    required: ['userGroupIds'],
    type: 'object',
    properties: {
        userGroupIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DeleteUsersRequestModelSchema = {
    required: ['userIds'],
    type: 'object',
    properties: {
        userIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DictionaryItemItemResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DictionaryItemResponseModelSchema = {
    required: ['id', 'name', 'translations'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        translations: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DictionaryItemTranslationModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const DictionaryItemTranslationModelSchema = {
    required: ['isoCode', 'translation'],
    type: 'object',
    properties: {
        isoCode: {
            minLength: 1,
            type: 'string'
        },
        translation: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DictionaryOverviewResponseModelSchema = {
    required: ['id', 'translatedIsoCodes'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        translatedIsoCodes: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const DirectionModelSchema = {
    enum: ['Ascending', 'Descending'],
    type: 'string'
} as const;

export const DisableUserRequestModelSchema = {
    required: ['userIds'],
    type: 'object',
    properties: {
        userIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DocumentBlueprintItemResponseModelSchema = {
    required: ['documentType', 'id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const DocumentBlueprintResponseModelSchema = {
    required: ['documentType', 'id', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const DocumentBlueprintTreeItemResponseModelSchema = {
    required: ['hasChildren', 'id', 'isFolder', 'name'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string'
        },
        isFolder: {
            type: 'boolean'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentCollectionResponseModelSchema = {
    required: ['documentType', 'id', 'sortOrder', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        creator: {
            type: 'string',
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeCollectionReferenceResponseModel'
                }
            ]
        },
        updater: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentConfigurationResponseModelSchema = {
    required: ['allowEditInvariantFromNonDefault', 'allowNonExistingSegmentsCreation', 'disableDeleteWhenReferenced', 'disableUnpublishWhenReferenced', 'reservedFieldNames'],
    type: 'object',
    properties: {
        disableDeleteWhenReferenced: {
            type: 'boolean'
        },
        disableUnpublishWhenReferenced: {
            type: 'boolean'
        },
        allowEditInvariantFromNonDefault: {
            type: 'boolean'
        },
        allowNonExistingSegmentsCreation: {
            type: 'boolean'
        },
        reservedFieldNames: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            deprecated: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentItemResponseModelSchema = {
    required: ['documentType', 'id', 'isProtected', 'isTrashed', 'variants'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        isTrashed: {
            type: 'boolean'
        },
        isProtected: {
            type: 'boolean'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DocumentNotificationResponseModelSchema = {
    required: ['actionId', 'alias', 'subscribed'],
    type: 'object',
    properties: {
        actionId: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        subscribed: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DocumentPermissionPresentationModelSchema = {
    required: ['$type', 'document', 'verbs'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string'
        },
        document: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        verbs: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false,
    discriminator: {
        propertyName: '$type',
        mapping: {
            DocumentPermissionPresentationModel: '#/components/schemas/DocumentPermissionPresentationModel'
        }
    }
} as const;

export const DocumentRecycleBinItemResponseModelSchema = {
    required: ['documentType', 'hasChildren', 'id', 'variants'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        hasChildren: {
            type: 'boolean'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ItemReferenceByIdResponseModel'
                }
            ],
            nullable: true
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DocumentReferenceResponseModelSchema = {
    required: ['documentType', 'id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        published: {
            type: 'boolean',
            nullable: true
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/TrackedReferenceDocumentTypeModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const DocumentResponseModelSchema = {
    required: ['documentType', 'id', 'isTrashed', 'urls', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        },
        urls: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentUrlInfoModel'
                    }
                ]
            }
        },
        template: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isTrashed: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTreeItemResponseModelSchema = {
    required: ['documentType', 'hasChildren', 'id', 'isProtected', 'isTrashed', 'noAccess', 'variants'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        noAccess: {
            type: 'boolean'
        },
        isTrashed: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        isProtected: {
            type: 'boolean'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeBlueprintItemResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeCleanupModelSchema = {
    required: ['preventCleanup'],
    type: 'object',
    properties: {
        preventCleanup: {
            type: 'boolean'
        },
        keepAllVersionsNewerThanDays: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        keepLatestVersionPerDayForDays: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeCollectionReferenceResponseModelSchema = {
    required: ['alias', 'icon', 'id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        alias: {
            type: 'string'
        },
        icon: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeCompositionModelSchema = {
    required: ['compositionType', 'documentType'],
    type: 'object',
    properties: {
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        compositionType: {
            '$ref': '#/components/schemas/CompositionTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeCompositionRequestModelSchema = {
    required: ['currentCompositeIds', 'currentPropertyAliases', 'isElement'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        currentPropertyAliases: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        currentCompositeIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        isElement: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeCompositionResponseModelSchema = {
    required: ['icon', 'id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeConfigurationResponseModelSchema = {
    required: ['dataTypesCanBeChanged', 'disableTemplates', 'reservedFieldNames', 'useSegments'],
    type: 'object',
    properties: {
        dataTypesCanBeChanged: {
            '$ref': '#/components/schemas/DataTypeChangeModeModel'
        },
        disableTemplates: {
            type: 'boolean'
        },
        useSegments: {
            type: 'boolean'
        },
        reservedFieldNames: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeItemResponseModelSchema = {
    required: ['id', 'isElement', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        isElement: {
            type: 'boolean'
        },
        icon: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypePropertyTypeContainerResponseModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypePropertyTypeResponseModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeReferenceResponseModelSchema = {
    required: ['icon', 'id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        icon: {
            type: 'string'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeResponseModelSchema = {
    required: ['alias', 'allowedAsRoot', 'allowedDocumentTypes', 'allowedTemplates', 'cleanup', 'compositions', 'containers', 'icon', 'id', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypePropertyTypeResponseModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypePropertyTypeContainerResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        allowedTemplates: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        defaultTemplate: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        cleanup: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeCleanupModel'
                }
            ]
        },
        allowedDocumentTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeSortModel'
                    }
                ]
            }
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeCompositionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeSortModelSchema = {
    required: ['documentType', 'sortOrder'],
    type: 'object',
    properties: {
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const DocumentTypeTreeItemResponseModelSchema = {
    required: ['hasChildren', 'icon', 'id', 'isElement', 'isFolder', 'name'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string'
        },
        isFolder: {
            type: 'boolean'
        },
        isElement: {
            type: 'boolean'
        },
        icon: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DocumentUrlInfoModelSchema = {
    required: ['culture', 'url'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DocumentUrlInfoResponseModelSchema = {
    required: ['id', 'urlInfos'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        urlInfos: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentUrlInfoModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DocumentValueModelSchema = {
    required: ['alias'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentValueResponseModelSchema = {
    required: ['alias', 'editorAlias'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        value: {
            nullable: true
        },
        editorAlias: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DocumentVariantItemResponseModelSchema = {
    required: ['name', 'state'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        culture: {
            type: 'string',
            nullable: true
        },
        state: {
            '$ref': '#/components/schemas/DocumentVariantStateModel'
        }
    },
    additionalProperties: false
} as const;

export const DocumentVariantRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DocumentVariantResponseModelSchema = {
    required: ['createDate', 'name', 'state', 'updateDate'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        state: {
            '$ref': '#/components/schemas/DocumentVariantStateModel'
        },
        publishDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DocumentVariantStateModelSchema = {
    enum: ['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'],
    type: 'string'
} as const;

export const DocumentVersionItemResponseModelSchema = {
    required: ['document', 'documentType', 'id', 'isCurrentDraftVersion', 'isCurrentPublishedVersion', 'preventCleanup', 'user', 'versionDate'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        document: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        versionDate: {
            type: 'string',
            format: 'date-time'
        },
        isCurrentPublishedVersion: {
            type: 'boolean'
        },
        isCurrentDraftVersion: {
            type: 'boolean'
        },
        preventCleanup: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DocumentVersionResponseModelSchema = {
    required: ['documentType', 'id', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        },
        document: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DomainPresentationModelSchema = {
    required: ['domainName', 'isoCode'],
    type: 'object',
    properties: {
        domainName: {
            type: 'string'
        },
        isoCode: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const DomainsResponseModelSchema = {
    required: ['domains'],
    type: 'object',
    properties: {
        defaultIsoCode: {
            type: 'string',
            nullable: true
        },
        domains: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DomainPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DynamicRootContextRequestModelSchema = {
    required: ['parent'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DynamicRootQueryOriginRequestModelSchema = {
    required: ['alias'],
    type: 'object',
    properties: {
        alias: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DynamicRootQueryRequestModelSchema = {
    required: ['origin', 'steps'],
    type: 'object',
    properties: {
        origin: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DynamicRootQueryOriginRequestModel'
                }
            ]
        },
        steps: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DynamicRootQueryStepRequestModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const DynamicRootQueryStepRequestModelSchema = {
    required: ['alias', 'documentTypeIds'],
    type: 'object',
    properties: {
        alias: {
            type: 'string'
        },
        documentTypeIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    additionalProperties: false
} as const;

export const DynamicRootRequestModelSchema = {
    required: ['context', 'query'],
    type: 'object',
    properties: {
        context: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DynamicRootContextRequestModel'
                }
            ]
        },
        query: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DynamicRootQueryRequestModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const DynamicRootResponseModelSchema = {
    required: ['roots'],
    type: 'object',
    properties: {
        roots: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    additionalProperties: false
} as const;

export const EnableTwoFactorRequestModelSchema = {
    required: ['code', 'secret'],
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        secret: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const EnableUserRequestModelSchema = {
    required: ['userIds'],
    type: 'object',
    properties: {
        userIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const EntityImportAnalysisResponseModelSchema = {
    required: ['entityType'],
    type: 'object',
    properties: {
        entityType: {
            type: 'string'
        },
        alias: {
            type: 'string',
            nullable: true
        },
        key: {
            type: 'string',
            format: 'uuid',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const EventMessageTypeModelSchema = {
    enum: ['Default', 'Info', 'Error', 'Success', 'Warning'],
    type: 'string'
} as const;

export const FieldPresentationModelSchema = {
    required: ['name', 'values'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        values: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const FileSystemFolderModelSchema = {
    required: ['path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const FileSystemTreeItemPresentationModelSchema = {
    required: ['hasChildren', 'isFolder', 'name', 'path'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        isFolder: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const FolderResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const HealthCheckActionRequestModelSchema = {
    required: ['healthCheck', 'valueRequired'],
    type: 'object',
    properties: {
        healthCheck: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        alias: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        valueRequired: {
            type: 'boolean'
        },
        providedValue: {
            type: 'string',
            nullable: true
        },
        providedValueValidation: {
            type: 'string',
            nullable: true
        },
        providedValueValidationRegex: {
            type: 'string',
            nullable: true
        },
        actionParameters: {
            type: 'object',
            additionalProperties: {},
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const HealthCheckGroupPresentationModelSchema = {
    required: ['checks', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        checks: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/HealthCheckModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const HealthCheckGroupResponseModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const HealthCheckGroupWithResultResponseModelSchema = {
    required: ['checks'],
    type: 'object',
    properties: {
        checks: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/HealthCheckWithResultPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const HealthCheckModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const HealthCheckResultResponseModelSchema = {
    required: ['message', 'resultType'],
    type: 'object',
    properties: {
        message: {
            type: 'string'
        },
        resultType: {
            '$ref': '#/components/schemas/StatusResultTypeModel'
        },
        actions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/HealthCheckActionRequestModel'
                    }
                ]
            },
            nullable: true
        },
        readMoreLink: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const HealthCheckWithResultPresentationModelSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        results: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/HealthCheckResultResponseModel'
                    }
                ]
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const HealthStatusModelSchema = {
    enum: ['Healthy', 'Unhealthy', 'Rebuilding'],
    type: 'string'
} as const;

export const HealthStatusResponseModelSchema = {
    required: ['status'],
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/HealthStatusModel'
        },
        message: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const HelpPageResponseModelSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ImageCropModeModelSchema = {
    enum: ['Crop', 'Max', 'Stretch', 'Pad', 'BoxPad', 'Min'],
    type: 'string'
} as const;

export const ImportDictionaryRequestModelSchema = {
    required: ['temporaryFile'],
    type: 'object',
    properties: {
        temporaryFile: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ImportDocumentTypeRequestModelSchema = {
    required: ['file'],
    type: 'object',
    properties: {
        file: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const ImportMediaTypeRequestModelSchema = {
    required: ['file'],
    type: 'object',
    properties: {
        file: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const IndexResponseModelSchema = {
    required: ['canRebuild', 'documentCount', 'fieldCount', 'healthStatus', 'name', 'searcherName'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        healthStatus: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/HealthStatusResponseModel'
                }
            ]
        },
        canRebuild: {
            type: 'boolean'
        },
        searcherName: {
            type: 'string'
        },
        documentCount: {
            type: 'integer',
            format: 'int64'
        },
        fieldCount: {
            type: 'integer',
            format: 'int32'
        },
        providerProperties: {
            type: 'object',
            additionalProperties: {
                nullable: true
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const InstallRequestModelSchema = {
    required: ['database', 'telemetryLevel', 'user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/UserInstallRequestModel'
                }
            ]
        },
        database: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DatabaseInstallRequestModel'
                }
            ]
        },
        telemetryLevel: {
            '$ref': '#/components/schemas/TelemetryLevelModel'
        }
    },
    additionalProperties: false
} as const;

export const InstallSettingsResponseModelSchema = {
    required: ['databases', 'user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/UserSettingsPresentationModel'
                }
            ]
        },
        databases: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DatabaseSettingsPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const InviteUserRequestModelSchema = {
    required: ['email', 'name', 'userGroupIds', 'userName'],
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        userName: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        userGroupIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        message: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ItemReferenceByIdResponseModelSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const ItemSortingRequestModelSchema = {
    required: ['id', 'sortOrder'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const LanguageItemResponseModelSchema = {
    required: ['isoCode', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        isoCode: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const LanguageResponseModelSchema = {
    required: ['isDefault', 'isMandatory', 'isoCode', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isMandatory: {
            type: 'boolean'
        },
        fallbackIsoCode: {
            type: 'string',
            nullable: true
        },
        isoCode: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const LogLevelCountsReponseModelSchema = {
    required: ['debug', 'error', 'fatal', 'information', 'warning'],
    type: 'object',
    properties: {
        information: {
            type: 'integer',
            format: 'int32'
        },
        debug: {
            type: 'integer',
            format: 'int32'
        },
        warning: {
            type: 'integer',
            format: 'int32'
        },
        error: {
            type: 'integer',
            format: 'int32'
        },
        fatal: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const LogLevelModelSchema = {
    enum: ['Verbose', 'Debug', 'Information', 'Warning', 'Error', 'Fatal'],
    type: 'string'
} as const;

export const LogMessagePropertyPresentationModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LogMessageResponseModelSchema = {
    required: ['level', 'properties', 'timestamp'],
    type: 'object',
    properties: {
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        level: {
            '$ref': '#/components/schemas/LogLevelModel'
        },
        messageTemplate: {
            type: 'string',
            nullable: true
        },
        renderedMessage: {
            type: 'string',
            nullable: true
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/LogMessagePropertyPresentationModel'
                    }
                ]
            }
        },
        exception: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LogTemplateResponseModelSchema = {
    required: ['count'],
    type: 'object',
    properties: {
        messageTemplate: {
            type: 'string',
            nullable: true
        },
        count: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const LoggerResponseModelSchema = {
    required: ['level', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        level: {
            '$ref': '#/components/schemas/LogLevelModel'
        }
    },
    additionalProperties: false
} as const;

export const ManifestResponseModelSchema = {
    required: ['extensions', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'string',
            nullable: true
        },
        version: {
            type: 'string',
            nullable: true
        },
        extensions: {
            type: 'array',
            items: {}
        }
    },
    additionalProperties: false
} as const;

export const MediaCollectionResponseModelSchema = {
    required: ['id', 'mediaType', 'sortOrder', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        creator: {
            type: 'string',
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MediaTypeCollectionReferenceResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const MediaConfigurationResponseModelSchema = {
    required: ['disableDeleteWhenReferenced', 'disableUnpublishWhenReferenced', 'reservedFieldNames'],
    type: 'object',
    properties: {
        disableDeleteWhenReferenced: {
            type: 'boolean'
        },
        disableUnpublishWhenReferenced: {
            type: 'boolean'
        },
        reservedFieldNames: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            deprecated: true
        }
    },
    additionalProperties: false
} as const;

export const MediaItemResponseModelSchema = {
    required: ['id', 'isTrashed', 'mediaType', 'variants'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        isTrashed: {
            type: 'boolean'
        },
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MediaTypeReferenceResponseModel'
                }
            ]
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/VariantItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const MediaRecycleBinItemResponseModelSchema = {
    required: ['hasChildren', 'id', 'mediaType', 'variants'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        hasChildren: {
            type: 'boolean'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ItemReferenceByIdResponseModel'
                }
            ],
            nullable: true
        },
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MediaTypeReferenceResponseModel'
                }
            ]
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/VariantItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const MediaReferenceResponseModelSchema = {
    required: ['id', 'mediaType'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        },
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/TrackedReferenceMediaTypeModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const MediaResponseModelSchema = {
    required: ['id', 'isTrashed', 'mediaType', 'urls', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        urls: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaUrlInfoModel'
                    }
                ]
            }
        },
        isTrashed: {
            type: 'boolean'
        },
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MediaTypeReferenceResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const MediaTreeItemResponseModelSchema = {
    required: ['hasChildren', 'id', 'isTrashed', 'mediaType', 'noAccess', 'variants'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        noAccess: {
            type: 'boolean'
        },
        isTrashed: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MediaTypeReferenceResponseModel'
                }
            ]
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/VariantItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeCollectionReferenceResponseModelSchema = {
    required: ['alias', 'icon', 'id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        alias: {
            type: 'string'
        },
        icon: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeCompositionModelSchema = {
    required: ['compositionType', 'mediaType'],
    type: 'object',
    properties: {
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        compositionType: {
            '$ref': '#/components/schemas/CompositionTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeCompositionRequestModelSchema = {
    required: ['currentCompositeIds', 'currentPropertyAliases'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        currentPropertyAliases: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        currentCompositeIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeCompositionResponseModelSchema = {
    required: ['icon', 'id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeConfigurationResponseModelSchema = {
    required: ['reservedFieldNames'],
    type: 'object',
    properties: {
        reservedFieldNames: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeItemResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MediaTypePropertyTypeContainerResponseModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const MediaTypePropertyTypeResponseModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeReferenceResponseModelSchema = {
    required: ['icon', 'id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        icon: {
            type: 'string'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeResponseModelSchema = {
    required: ['alias', 'aliasCanBeChanged', 'allowedAsRoot', 'allowedMediaTypes', 'compositions', 'containers', 'icon', 'id', 'isDeletable', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypePropertyTypeResponseModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypePropertyTypeContainerResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        allowedMediaTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeSortModel'
                    }
                ]
            }
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeCompositionModel'
                    }
                ]
            }
        },
        isDeletable: {
            type: 'boolean'
        },
        aliasCanBeChanged: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeSortModelSchema = {
    required: ['mediaType', 'sortOrder'],
    type: 'object',
    properties: {
        mediaType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const MediaTypeTreeItemResponseModelSchema = {
    required: ['hasChildren', 'icon', 'id', 'isDeletable', 'isFolder', 'name'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string'
        },
        isFolder: {
            type: 'boolean'
        },
        icon: {
            type: 'string'
        },
        isDeletable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const MediaUrlInfoModelSchema = {
    required: ['culture', 'url'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MediaUrlInfoResponseModelSchema = {
    required: ['id', 'urlInfos'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        urlInfos: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaUrlInfoModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const MediaValueModelSchema = {
    required: ['alias'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MediaValueResponseModelSchema = {
    required: ['alias', 'editorAlias'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        value: {
            nullable: true
        },
        editorAlias: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MediaVariantRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MediaVariantResponseModelSchema = {
    required: ['createDate', 'name', 'updateDate'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const MemberConfigurationResponseModelSchema = {
    required: ['reservedFieldNames'],
    type: 'object',
    properties: {
        reservedFieldNames: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            deprecated: true
        }
    },
    additionalProperties: false
} as const;

export const MemberGroupItemResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MemberGroupResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const MemberItemResponseModelSchema = {
    required: ['id', 'kind', 'memberType', 'variants'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        memberType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MemberTypeReferenceResponseModel'
                }
            ]
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/VariantItemResponseModel'
                    }
                ]
            }
        },
        kind: {
            '$ref': '#/components/schemas/MemberKindModel'
        }
    },
    additionalProperties: false
} as const;

export const MemberKindModelSchema = {
    enum: ['Default', 'Api'],
    type: 'string'
} as const;

export const MemberResponseModelSchema = {
    required: ['email', 'failedPasswordAttempts', 'groups', 'id', 'isApproved', 'isLockedOut', 'isTwoFactorEnabled', 'kind', 'memberType', 'username', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        memberType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MemberTypeReferenceResponseModel'
                }
            ]
        },
        isApproved: {
            type: 'boolean'
        },
        isLockedOut: {
            type: 'boolean'
        },
        isTwoFactorEnabled: {
            type: 'boolean'
        },
        failedPasswordAttempts: {
            type: 'integer',
            format: 'int32'
        },
        lastLoginDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastLockoutDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastPasswordChangeDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        groups: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        kind: {
            '$ref': '#/components/schemas/MemberKindModel'
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeCompositionModelSchema = {
    required: ['compositionType', 'memberType'],
    type: 'object',
    properties: {
        memberType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        compositionType: {
            '$ref': '#/components/schemas/CompositionTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeCompositionRequestModelSchema = {
    required: ['currentCompositeIds', 'currentPropertyAliases'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        currentPropertyAliases: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        currentCompositeIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeCompositionResponseModelSchema = {
    required: ['icon', 'id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeConfigurationResponseModelSchema = {
    required: ['reservedFieldNames'],
    type: 'object',
    properties: {
        reservedFieldNames: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeItemResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MemberTypePropertyTypeContainerResponseModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const MemberTypePropertyTypeResponseModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'isSensitive', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment', 'visibility'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        },
        isSensitive: {
            type: 'boolean'
        },
        visibility: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MemberTypePropertyTypeVisibilityModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const MemberTypePropertyTypeVisibilityModelSchema = {
    required: ['memberCanEdit', 'memberCanView'],
    type: 'object',
    properties: {
        memberCanView: {
            type: 'boolean'
        },
        memberCanEdit: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeReferenceResponseModelSchema = {
    required: ['icon', 'id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        icon: {
            type: 'string'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeResponseModelSchema = {
    required: ['alias', 'allowedAsRoot', 'compositions', 'containers', 'icon', 'id', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberTypePropertyTypeResponseModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberTypePropertyTypeContainerResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberTypeCompositionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const MemberTypeTreeItemResponseModelSchema = {
    required: ['hasChildren', 'icon', 'id', 'name'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MemberValueModelSchema = {
    required: ['alias'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MemberValueResponseModelSchema = {
    required: ['alias', 'editorAlias'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        value: {
            nullable: true
        },
        editorAlias: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MemberVariantRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const MemberVariantResponseModelSchema = {
    required: ['createDate', 'name', 'updateDate'],
    type: 'object',
    properties: {
        culture: {
            type: 'string',
            nullable: true
        },
        segment: {
            type: 'string',
            nullable: true
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const ModelsBuilderResponseModelSchema = {
    required: ['canGenerate', 'mode', 'outOfDateModels', 'trackingOutOfDateModels'],
    type: 'object',
    properties: {
        mode: {
            '$ref': '#/components/schemas/ModelsModeModel'
        },
        canGenerate: {
            type: 'boolean'
        },
        outOfDateModels: {
            type: 'boolean'
        },
        lastError: {
            type: 'string',
            nullable: true
        },
        version: {
            type: 'string',
            nullable: true
        },
        modelsNamespace: {
            type: 'string',
            nullable: true
        },
        trackingOutOfDateModels: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ModelsModeModelSchema = {
    enum: ['Nothing', 'InMemoryAuto', 'SourceCodeManual', 'SourceCodeAuto'],
    type: 'string'
} as const;

export const MoveDataTypeRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MoveDictionaryRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MoveDocumentBlueprintRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MoveDocumentRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MoveDocumentTypeRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MoveMediaRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const MoveMediaTypeRequestModelSchema = {
    type: 'object',
    properties: {
        target: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const NamedEntityTreeItemResponseModelSchema = {
    required: ['hasChildren', 'id', 'name'],
    type: 'object',
    properties: {
        hasChildren: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const NoopSetupTwoFactorModelSchema = {
    type: 'object',
    additionalProperties: false
} as const;

export const NotificationHeaderModelSchema = {
    required: ['category', 'message', 'type'],
    type: 'object',
    properties: {
        message: {
            type: 'string'
        },
        category: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/EventMessageTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const OEmbedResponseModelSchema = {
    required: ['markup'],
    type: 'object',
    properties: {
        markup: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ObjectTypeResponseModelSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const OperatorModelSchema = {
    enum: ['Equals', 'NotEquals', 'Contains', 'NotContains', 'LessThan', 'LessThanEqualTo', 'GreaterThan', 'GreaterThanEqualTo'],
    type: 'string'
} as const;

export const OutOfDateStatusResponseModelSchema = {
    required: ['status'],
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/OutOfDateTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const OutOfDateTypeModelSchema = {
    enum: ['OutOfDate', 'Current', 'Unknown'],
    type: 'string'
} as const;

export const PackageConfigurationResponseModelSchema = {
    required: ['marketplaceUrl'],
    type: 'object',
    properties: {
        marketplaceUrl: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const PackageDefinitionResponseModelSchema = {
    required: ['contentLoadChildNodes', 'dataTypes', 'dictionaryItems', 'documentTypes', 'id', 'languages', 'mediaIds', 'mediaLoadChildNodes', 'mediaTypes', 'name', 'packagePath', 'partialViews', 'scripts', 'stylesheets', 'templates'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        contentNodeId: {
            type: 'string',
            nullable: true
        },
        contentLoadChildNodes: {
            type: 'boolean'
        },
        mediaIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        mediaLoadChildNodes: {
            type: 'boolean'
        },
        documentTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        mediaTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        dataTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        templates: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        partialViews: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        stylesheets: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        scripts: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        dictionaryItems: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        packagePath: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const PackageMigrationStatusResponseModelSchema = {
    required: ['hasPendingMigrations', 'packageName'],
    type: 'object',
    properties: {
        packageName: {
            type: 'string'
        },
        hasPendingMigrations: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const PagedAllowedDocumentTypeModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AllowedDocumentTypeModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedAllowedMediaTypeModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AllowedMediaTypeModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedAuditLogResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AuditLogResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedCultureReponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CultureReponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDataTypeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DataTypeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDataTypeTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DataTypeTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDictionaryOverviewResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DictionaryOverviewResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDocumentBlueprintTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentBlueprintTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDocumentCollectionResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentCollectionResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDocumentRecycleBinItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentRecycleBinItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDocumentTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDocumentTypeBlueprintItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeBlueprintItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDocumentTypeTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedDocumentVersionItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVersionItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedFileSystemTreeItemPresentationModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/FileSystemTreeItemPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedHealthCheckGroupResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/HealthCheckGroupResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedHelpPageResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/HelpPageResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedIReferenceResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DefaultReferenceResponseModel'
                    },
                    {
                        '$ref': '#/components/schemas/DocumentReferenceResponseModel'
                    },
                    {
                        '$ref': '#/components/schemas/MediaReferenceResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedIndexResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/IndexResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedLanguageResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/LanguageResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedLogMessageResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/LogMessageResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedLogTemplateResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/LogTemplateResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedLoggerResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/LoggerResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedMediaCollectionResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaCollectionResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedMediaRecycleBinItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaRecycleBinItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedMediaTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedMediaTypeTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedMemberGroupResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberGroupResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedMemberResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedMemberTypeTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberTypeTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedModelDataTypeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DataTypeItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedModelDocumentItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedModelDocumentTypeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedModelMediaItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedModelMediaTypeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedModelMemberItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedModelMemberTypeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberTypeItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedModelTemplateItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TemplateItemResponseModel'
                    }
                ]
            }
        },
        total: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const PagedNamedEntityTreeItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/NamedEntityTreeItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedObjectTypeResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ObjectTypeResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedPackageDefinitionResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PackageDefinitionResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedPackageMigrationStatusResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PackageMigrationStatusResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedPartialViewSnippetItemResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PartialViewSnippetItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedProblemDetailsModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ProblemDetails'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedRedirectUrlResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/RedirectUrlResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedReferenceByIdModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedRelationResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/RelationResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedRelationTypeResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/RelationTypeResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedSavedLogSearchResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SavedLogSearchResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedSearchResultResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SearchResultResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedSearcherResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SearcherResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedSegmentResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SegmentResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedTagResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TagResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedTelemetryResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TelemetryResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedUserDataResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UserDataResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedUserGroupResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UserGroupResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedUserResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UserResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedWebhookEventModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/WebhookEventModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedWebhookResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/WebhookResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PartialViewFolderResponseModelSchema = {
    required: ['name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PartialViewItemResponseModelSchema = {
    required: ['isFolder', 'name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        isFolder: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const PartialViewResponseModelSchema = {
    required: ['content', 'name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const PartialViewSnippetItemResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const PartialViewSnippetResponseModelSchema = {
    required: ['content', 'id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const PasswordConfigurationResponseModelSchema = {
    required: ['minimumPasswordLength', 'requireDigit', 'requireLowercase', 'requireNonLetterOrDigit', 'requireUppercase'],
    type: 'object',
    properties: {
        minimumPasswordLength: {
            type: 'integer',
            format: 'int32'
        },
        requireNonLetterOrDigit: {
            type: 'boolean'
        },
        requireDigit: {
            type: 'boolean'
        },
        requireLowercase: {
            type: 'boolean'
        },
        requireUppercase: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ProblemDetailsSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        detail: {
            type: 'string',
            nullable: true
        },
        instance: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: {}
} as const;

export const ProblemDetailsBuilderModelSchema = {
    type: 'object',
    additionalProperties: false
} as const;

export const ProfilingStatusRequestModelSchema = {
    required: ['enabled'],
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ProfilingStatusResponseModelSchema = {
    required: ['enabled'],
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const PropertyTypeAppearanceModelSchema = {
    required: ['labelOnTop'],
    type: 'object',
    properties: {
        labelOnTop: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const PropertyTypeValidationModelSchema = {
    required: ['mandatory'],
    type: 'object',
    properties: {
        mandatory: {
            type: 'boolean'
        },
        mandatoryMessage: {
            type: 'string',
            nullable: true
        },
        regEx: {
            type: 'string',
            nullable: true
        },
        regExMessage: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const PublicAccessRequestModelSchema = {
    required: ['errorDocument', 'loginDocument', 'memberGroupNames', 'memberUserNames'],
    type: 'object',
    properties: {
        loginDocument: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        errorDocument: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        memberUserNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        memberGroupNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const PublicAccessResponseModelSchema = {
    required: ['errorDocument', 'groups', 'loginDocument', 'members'],
    type: 'object',
    properties: {
        loginDocument: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        errorDocument: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        members: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberItemResponseModel'
                    }
                ]
            }
        },
        groups: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberGroupItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PublishDocumentRequestModelSchema = {
    required: ['publishSchedules'],
    type: 'object',
    properties: {
        publishSchedules: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CultureAndScheduleRequestModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const PublishDocumentWithDescendantsRequestModelSchema = {
    required: ['cultures', 'includeUnpublishedDescendants'],
    type: 'object',
    properties: {
        includeUnpublishedDescendants: {
            type: 'boolean'
        },
        cultures: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const PublishedDocumentResponseModelSchema = {
    required: ['documentType', 'id', 'isTrashed', 'urls', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueResponseModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantResponseModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        documentType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeReferenceResponseModel'
                }
            ]
        },
        urls: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentUrlInfoModel'
                    }
                ]
            }
        },
        template: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isTrashed: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const RedirectStatusModelSchema = {
    enum: ['Enabled', 'Disabled'],
    type: 'string'
} as const;

export const RedirectUrlResponseModelSchema = {
    required: ['created', 'destinationUrl', 'document', 'id', 'originalUrl'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        originalUrl: {
            type: 'string'
        },
        destinationUrl: {
            type: 'string'
        },
        created: {
            type: 'string',
            format: 'date-time'
        },
        document: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        culture: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RedirectUrlStatusResponseModelSchema = {
    required: ['status', 'userIsAdmin'],
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/RedirectStatusModel'
        },
        userIsAdmin: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ReferenceByIdModelSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const RelationReferenceModelSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RelationResponseModelSchema = {
    required: ['child', 'createDate', 'id', 'parent', 'relationType'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        relationType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RelationReferenceModel'
                }
            ]
        },
        child: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RelationReferenceModel'
                }
            ]
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        comment: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RelationTypeItemResponseModelSchema = {
    required: ['id', 'isDeletable', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        isDeletable: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const RelationTypeResponseModelSchema = {
    required: ['id', 'isBidirectional', 'isDependency', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        isBidirectional: {
            type: 'boolean'
        },
        isDependency: {
            type: 'boolean'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        alias: {
            type: 'string',
            nullable: true
        },
        parentObject: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ObjectTypeResponseModel'
                }
            ],
            nullable: true
        },
        childObject: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ObjectTypeResponseModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RenamePartialViewRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const RenameScriptRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const RenameStylesheetRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ResendInviteUserRequestModelSchema = {
    required: ['user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        message: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ResetPasswordRequestModelSchema = {
    required: ['email'],
    type: 'object',
    properties: {
        email: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ResetPasswordTokenRequestModelSchema = {
    required: ['password', 'resetCode', 'user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        resetCode: {
            type: 'string'
        },
        password: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ResetPasswordUserResponseModelSchema = {
    type: 'object',
    properties: {
        resetPassword: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RuntimeLevelModelSchema = {
    enum: ['Unknown', 'Boot', 'Install', 'Upgrade', 'Run', 'BootFailed'],
    type: 'string'
} as const;

export const RuntimeModeModelSchema = {
    enum: ['BackofficeDevelopment', 'Development', 'Production'],
    type: 'string'
} as const;

export const SavedLogSearchRequestModelSchema = {
    required: ['name', 'query'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        query: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const SavedLogSearchResponseModelSchema = {
    required: ['name', 'query'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        query: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ScheduleRequestModelSchema = {
    type: 'object',
    properties: {
        publishTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        unpublishTime: {
            type: 'string',
            format: 'date-time',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ScriptFolderResponseModelSchema = {
    required: ['name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ScriptItemResponseModelSchema = {
    required: ['isFolder', 'name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        isFolder: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ScriptResponseModelSchema = {
    required: ['content', 'name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const SearchResultResponseModelSchema = {
    required: ['fieldCount', 'fields', 'id', 'score'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        score: {
            type: 'number',
            format: 'float'
        },
        fieldCount: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        fields: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/FieldPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const SearcherResponseModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const SecurityConfigurationResponseModelSchema = {
    required: ['passwordConfiguration'],
    type: 'object',
    properties: {
        passwordConfiguration: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PasswordConfigurationResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const SegmentResponseModelSchema = {
    required: ['alias', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ServerConfigurationItemResponseModelSchema = {
    required: ['data', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        data: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const ServerConfigurationResponseModelSchema = {
    required: ['allowPasswordReset', 'versionCheckPeriod'],
    type: 'object',
    properties: {
        allowPasswordReset: {
            type: 'boolean'
        },
        versionCheckPeriod: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const ServerInformationResponseModelSchema = {
    required: ['assemblyVersion', 'baseUtcOffset', 'runtimeMode', 'version'],
    type: 'object',
    properties: {
        version: {
            type: 'string'
        },
        assemblyVersion: {
            type: 'string'
        },
        baseUtcOffset: {
            type: 'string'
        },
        runtimeMode: {
            '$ref': '#/components/schemas/RuntimeModeModel'
        }
    },
    additionalProperties: false
} as const;

export const ServerStatusResponseModelSchema = {
    required: ['serverStatus'],
    type: 'object',
    properties: {
        serverStatus: {
            '$ref': '#/components/schemas/RuntimeLevelModel'
        }
    },
    additionalProperties: false
} as const;

export const ServerTroubleshootingResponseModelSchema = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ServerConfigurationItemResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const SetAvatarRequestModelSchema = {
    required: ['file'],
    type: 'object',
    properties: {
        file: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const SortingRequestModelSchema = {
    required: ['sorting'],
    type: 'object',
    properties: {
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sorting: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ItemSortingRequestModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const StaticFileItemResponseModelSchema = {
    required: ['isFolder', 'name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        isFolder: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const StatusResultTypeModelSchema = {
    enum: ['Success', 'Warning', 'Error', 'Info'],
    type: 'string'
} as const;

export const StylesheetFolderResponseModelSchema = {
    required: ['name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const StylesheetItemResponseModelSchema = {
    required: ['isFolder', 'name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        isFolder: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const StylesheetResponseModelSchema = {
    required: ['content', 'name', 'path'],
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/FileSystemFolderModel'
                }
            ],
            nullable: true
        },
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const TagResponseModelSchema = {
    required: ['id', 'nodeCount'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        text: {
            type: 'string',
            nullable: true
        },
        group: {
            type: 'string',
            nullable: true
        },
        nodeCount: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const TelemetryLevelModelSchema = {
    enum: ['Minimal', 'Basic', 'Detailed'],
    type: 'string'
} as const;

export const TelemetryRequestModelSchema = {
    required: ['telemetryLevel'],
    type: 'object',
    properties: {
        telemetryLevel: {
            '$ref': '#/components/schemas/TelemetryLevelModel'
        }
    },
    additionalProperties: false
} as const;

export const TelemetryResponseModelSchema = {
    required: ['telemetryLevel'],
    type: 'object',
    properties: {
        telemetryLevel: {
            '$ref': '#/components/schemas/TelemetryLevelModel'
        }
    },
    additionalProperties: false
} as const;

export const TemplateConfigurationResponseModelSchema = {
    required: ['disabled'],
    type: 'object',
    properties: {
        disabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const TemplateItemResponseModelSchema = {
    required: ['alias', 'id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const TemplateQueryExecuteFilterPresentationModelSchema = {
    required: ['constraintValue', 'operator', 'propertyAlias'],
    type: 'object',
    properties: {
        propertyAlias: {
            minLength: 1,
            type: 'string'
        },
        constraintValue: {
            minLength: 1,
            type: 'string'
        },
        operator: {
            '$ref': '#/components/schemas/OperatorModel'
        }
    },
    additionalProperties: false
} as const;

export const TemplateQueryExecuteModelSchema = {
    required: ['take'],
    type: 'object',
    properties: {
        rootDocument: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        documentTypeAlias: {
            type: 'string',
            nullable: true
        },
        filters: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TemplateQueryExecuteFilterPresentationModel'
                    }
                ]
            },
            nullable: true
        },
        sort: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/TemplateQueryExecuteSortModel'
                }
            ],
            nullable: true
        },
        take: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const TemplateQueryExecuteSortModelSchema = {
    required: ['propertyAlias'],
    type: 'object',
    properties: {
        propertyAlias: {
            type: 'string'
        },
        direction: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TemplateQueryOperatorModelSchema = {
    required: ['applicableTypes', 'operator'],
    type: 'object',
    properties: {
        operator: {
            '$ref': '#/components/schemas/OperatorModel'
        },
        applicableTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TemplateQueryPropertyTypeModel'
            }
        }
    },
    additionalProperties: false
} as const;

export const TemplateQueryPropertyPresentationModelSchema = {
    required: ['alias', 'type'],
    type: 'object',
    properties: {
        alias: {
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/TemplateQueryPropertyTypeModel'
        }
    },
    additionalProperties: false
} as const;

export const TemplateQueryPropertyTypeModelSchema = {
    enum: ['String', 'DateTime', 'Integer'],
    type: 'string'
} as const;

export const TemplateQueryResultItemPresentationModelSchema = {
    required: ['icon', 'name'],
    type: 'object',
    properties: {
        icon: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const TemplateQueryResultResponseModelSchema = {
    required: ['executionTime', 'queryExpression', 'resultCount', 'sampleResults'],
    type: 'object',
    properties: {
        queryExpression: {
            type: 'string'
        },
        sampleResults: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TemplateQueryResultItemPresentationModel'
                    }
                ]
            }
        },
        resultCount: {
            type: 'integer',
            format: 'int32'
        },
        executionTime: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const TemplateQuerySettingsResponseModelSchema = {
    required: ['documentTypeAliases', 'operators', 'properties'],
    type: 'object',
    properties: {
        documentTypeAliases: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TemplateQueryPropertyPresentationModel'
                    }
                ]
            }
        },
        operators: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/TemplateQueryOperatorModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const TemplateResponseModelSchema = {
    required: ['alias', 'id', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        content: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        masterTemplate: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TemporaryFileConfigurationResponseModelSchema = {
    required: ['allowedUploadedFileExtensions', 'disallowedUploadedFilesExtensions', 'imageFileTypes'],
    type: 'object',
    properties: {
        imageFileTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        disallowedUploadedFilesExtensions: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allowedUploadedFileExtensions: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        maxFileSize: {
            type: 'integer',
            format: 'int32',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TemporaryFileResponseModelSchema = {
    required: ['fileName', 'id'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        availableUntil: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        fileName: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const TrackedReferenceDocumentTypeModelSchema = {
    type: 'object',
    properties: {
        icon: {
            type: 'string',
            nullable: true
        },
        alias: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const TrackedReferenceMediaTypeModelSchema = {
    type: 'object',
    properties: {
        icon: {
            type: 'string',
            nullable: true
        },
        alias: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UnknownTypePermissionPresentationModelSchema = {
    required: ['$type', 'context', 'verbs'],
    type: 'object',
    properties: {
        '$type': {
            type: 'string'
        },
        verbs: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        context: {
            type: 'string'
        }
    },
    additionalProperties: false,
    discriminator: {
        propertyName: '$type',
        mapping: {
            UnknownTypePermissionPresentationModel: '#/components/schemas/UnknownTypePermissionPresentationModel'
        }
    }
} as const;

export const UnlockUsersRequestModelSchema = {
    required: ['userIds'],
    type: 'object',
    properties: {
        userIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UnpublishDocumentRequestModelSchema = {
    type: 'object',
    properties: {
        cultures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateDataTypeRequestModelSchema = {
    required: ['editorAlias', 'editorUiAlias', 'name', 'values'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        editorAlias: {
            minLength: 1,
            type: 'string'
        },
        editorUiAlias: {
            type: 'string'
        },
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DataTypePropertyPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateDictionaryItemRequestModelSchema = {
    required: ['name', 'translations'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        translations: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DictionaryItemTranslationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateDocumentBlueprintRequestModelSchema = {
    required: ['values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantRequestModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateDocumentNotificationsRequestModelSchema = {
    required: ['subscribedActionIds'],
    type: 'object',
    properties: {
        subscribedActionIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateDocumentRequestModelSchema = {
    required: ['values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantRequestModel'
                    }
                ]
            }
        },
        template: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateDocumentTypePropertyTypeContainerRequestModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const UpdateDocumentTypePropertyTypeRequestModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const UpdateDocumentTypeRequestModelSchema = {
    required: ['alias', 'allowedAsRoot', 'allowedDocumentTypes', 'allowedTemplates', 'cleanup', 'compositions', 'containers', 'icon', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UpdateDocumentTypePropertyTypeRequestModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UpdateDocumentTypePropertyTypeContainerRequestModel'
                    }
                ]
            }
        },
        allowedTemplates: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        defaultTemplate: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        cleanup: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/DocumentTypeCleanupModel'
                }
            ]
        },
        allowedDocumentTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeSortModel'
                    }
                ]
            }
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentTypeCompositionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateDomainsRequestModelSchema = {
    required: ['domains'],
    type: 'object',
    properties: {
        defaultIsoCode: {
            type: 'string',
            nullable: true
        },
        domains: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DomainPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateFolderResponseModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdateLanguageRequestModelSchema = {
    required: ['isDefault', 'isMandatory', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        isDefault: {
            type: 'boolean'
        },
        isMandatory: {
            type: 'boolean'
        },
        fallbackIsoCode: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateMediaRequestModelSchema = {
    required: ['values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaVariantRequestModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateMediaTypePropertyTypeContainerRequestModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const UpdateMediaTypePropertyTypeRequestModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const UpdateMediaTypeRequestModelSchema = {
    required: ['alias', 'allowedAsRoot', 'allowedMediaTypes', 'compositions', 'containers', 'icon', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UpdateMediaTypePropertyTypeRequestModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UpdateMediaTypePropertyTypeContainerRequestModel'
                    }
                ]
            }
        },
        allowedMediaTypes: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeSortModel'
                    }
                ]
            }
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MediaTypeCompositionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateMemberGroupRequestModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdateMemberRequestModelSchema = {
    required: ['email', 'isApproved', 'isLockedOut', 'isTwoFactorEnabled', 'username', 'values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberVariantRequestModel'
                    }
                ]
            }
        },
        email: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        oldPassword: {
            type: 'string',
            nullable: true
        },
        newPassword: {
            type: 'string',
            nullable: true
        },
        groups: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            },
            nullable: true
        },
        isApproved: {
            type: 'boolean'
        },
        isLockedOut: {
            type: 'boolean'
        },
        isTwoFactorEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const UpdateMemberTypePropertyTypeContainerRequestModelSchema = {
    required: ['id', 'sortOrder', 'type'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            minLength: 1,
            type: 'string'
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const UpdateMemberTypePropertyTypeRequestModelSchema = {
    required: ['alias', 'appearance', 'dataType', 'id', 'isSensitive', 'name', 'sortOrder', 'validation', 'variesByCulture', 'variesBySegment', 'visibility'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        container: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        sortOrder: {
            type: 'integer',
            format: 'int32'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        dataType: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        validation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeValidationModel'
                }
            ]
        },
        appearance: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PropertyTypeAppearanceModel'
                }
            ]
        },
        isSensitive: {
            type: 'boolean'
        },
        visibility: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/MemberTypePropertyTypeVisibilityModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const UpdateMemberTypeRequestModelSchema = {
    required: ['alias', 'allowedAsRoot', 'compositions', 'containers', 'icon', 'isElement', 'name', 'properties', 'variesByCulture', 'variesBySegment'],
    type: 'object',
    properties: {
        alias: {
            minLength: 1,
            type: 'string'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        icon: {
            minLength: 1,
            type: 'string'
        },
        allowedAsRoot: {
            type: 'boolean'
        },
        variesByCulture: {
            type: 'boolean'
        },
        variesBySegment: {
            type: 'boolean'
        },
        collection: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        isElement: {
            type: 'boolean'
        },
        properties: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UpdateMemberTypePropertyTypeRequestModel'
                    }
                ]
            }
        },
        containers: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UpdateMemberTypePropertyTypeContainerRequestModel'
                    }
                ]
            }
        },
        compositions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/MemberTypeCompositionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdatePackageRequestModelSchema = {
    required: ['contentLoadChildNodes', 'dataTypes', 'dictionaryItems', 'documentTypes', 'languages', 'mediaIds', 'mediaLoadChildNodes', 'mediaTypes', 'name', 'packagePath', 'partialViews', 'scripts', 'stylesheets', 'templates'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        contentNodeId: {
            type: 'string',
            nullable: true
        },
        contentLoadChildNodes: {
            type: 'boolean'
        },
        mediaIds: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        mediaLoadChildNodes: {
            type: 'boolean'
        },
        documentTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        mediaTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        dataTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        templates: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        partialViews: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        stylesheets: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        scripts: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        dictionaryItems: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        packagePath: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdatePartialViewRequestModelSchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdateScriptRequestModelSchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdateStylesheetRequestModelSchema = {
    required: ['content'],
    type: 'object',
    properties: {
        content: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpdateTemplateRequestModelSchema = {
    required: ['alias', 'name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        alias: {
            minLength: 1,
            type: 'string'
        },
        content: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateUserDataRequestModelSchema = {
    required: ['group', 'identifier', 'key', 'value'],
    type: 'object',
    properties: {
        group: {
            type: 'string'
        },
        identifier: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        key: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const UpdateUserGroupRequestModelSchema = {
    required: ['alias', 'documentRootAccess', 'fallbackPermissions', 'hasAccessToAllLanguages', 'languages', 'mediaRootAccess', 'name', 'permissions', 'sections'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        icon: {
            type: 'string',
            nullable: true
        },
        sections: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        hasAccessToAllLanguages: {
            type: 'boolean'
        },
        documentStartNode: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        documentRootAccess: {
            type: 'boolean'
        },
        mediaStartNode: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        mediaRootAccess: {
            type: 'boolean'
        },
        fallbackPermissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        permissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentPermissionPresentationModel'
                    },
                    {
                        '$ref': '#/components/schemas/UnknownTypePermissionPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateUserGroupsOnUserRequestModelSchema = {
    required: ['userGroupIds', 'userIds'],
    type: 'object',
    properties: {
        userIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        userGroupIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UpdateUserRequestModelSchema = {
    required: ['documentStartNodeIds', 'email', 'hasDocumentRootAccess', 'hasMediaRootAccess', 'languageIsoCode', 'mediaStartNodeIds', 'name', 'userGroupIds', 'userName'],
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        userName: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        userGroupIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        languageIsoCode: {
            type: 'string'
        },
        documentStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasDocumentRootAccess: {
            type: 'boolean'
        },
        mediaStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasMediaRootAccess: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const UpdateWebhookRequestModelSchema = {
    required: ['contentTypeKeys', 'enabled', 'events', 'headers', 'url'],
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        },
        url: {
            minLength: 1,
            type: 'string'
        },
        contentTypeKeys: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        headers: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        events: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const UpgradeCheckResponseModelSchema = {
    required: ['comment', 'type', 'url'],
    type: 'object',
    properties: {
        type: {
            type: 'string'
        },
        comment: {
            type: 'string'
        },
        url: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UpgradeSettingsResponseModelSchema = {
    required: ['currentState', 'newState', 'newVersion', 'oldVersion', 'reportUrl'],
    type: 'object',
    properties: {
        currentState: {
            minLength: 1,
            type: 'string'
        },
        newState: {
            minLength: 1,
            type: 'string'
        },
        newVersion: {
            minLength: 1,
            type: 'string'
        },
        oldVersion: {
            minLength: 1,
            type: 'string'
        },
        reportUrl: {
            type: 'string',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const UserConfigurationResponseModelSchema = {
    required: ['canInviteUsers', 'passwordConfiguration', 'usernameIsEmail'],
    type: 'object',
    properties: {
        canInviteUsers: {
            type: 'boolean'
        },
        usernameIsEmail: {
            type: 'boolean'
        },
        passwordConfiguration: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PasswordConfigurationResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const UserDataModelSchema = {
    required: ['group', 'identifier', 'value'],
    type: 'object',
    properties: {
        group: {
            type: 'string'
        },
        identifier: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const UserDataOperationStatusModelSchema = {
    enum: ['Success', 'NotFound', 'UserNotFound', 'AlreadyExists'],
    type: 'string'
} as const;

export const UserDataResponseModelSchema = {
    required: ['group', 'identifier', 'key', 'value'],
    type: 'object',
    properties: {
        group: {
            type: 'string'
        },
        identifier: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        key: {
            type: 'string',
            format: 'uuid'
        }
    },
    additionalProperties: false
} as const;

export const UserExternalLoginProviderModelSchema = {
    required: ['hasManualLinkingEnabled', 'isLinkedOnUser', 'providerSchemeName'],
    type: 'object',
    properties: {
        providerSchemeName: {
            type: 'string'
        },
        providerKey: {
            type: 'string',
            nullable: true
        },
        isLinkedOnUser: {
            type: 'boolean'
        },
        hasManualLinkingEnabled: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const UserGroupItemResponseModelSchema = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        icon: {
            type: 'string',
            nullable: true
        },
        alias: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UserGroupResponseModelSchema = {
    required: ['alias', 'aliasCanBeChanged', 'documentRootAccess', 'fallbackPermissions', 'hasAccessToAllLanguages', 'id', 'isDeletable', 'languages', 'mediaRootAccess', 'name', 'permissions', 'sections'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        icon: {
            type: 'string',
            nullable: true
        },
        sections: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        hasAccessToAllLanguages: {
            type: 'boolean'
        },
        documentStartNode: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        documentRootAccess: {
            type: 'boolean'
        },
        mediaStartNode: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        mediaRootAccess: {
            type: 'boolean'
        },
        fallbackPermissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        permissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentPermissionPresentationModel'
                    },
                    {
                        '$ref': '#/components/schemas/UnknownTypePermissionPresentationModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        isDeletable: {
            type: 'boolean'
        },
        aliasCanBeChanged: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const UserInstallRequestModelSchema = {
    required: ['email', 'name', 'password', 'subscribeToNewsletter'],
    type: 'object',
    properties: {
        name: {
            maxLength: 255,
            minLength: 0,
            type: 'string'
        },
        email: {
            minLength: 1,
            type: 'string',
            format: 'email'
        },
        password: {
            minLength: 1,
            type: 'string'
        },
        subscribeToNewsletter: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const UserItemResponseModelSchema = {
    required: ['avatarUrls', 'id', 'kind', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        avatarUrls: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        kind: {
            '$ref': '#/components/schemas/UserKindModel'
        }
    },
    additionalProperties: false
} as const;

export const UserKindModelSchema = {
    enum: ['Default', 'Api'],
    type: 'string'
} as const;

export const UserOrderModelSchema = {
    enum: ['UserName', 'Language', 'Name', 'Email', 'Id', 'CreateDate', 'UpdateDate', 'IsApproved', 'IsLockedOut', 'LastLoginDate'],
    type: 'string'
} as const;

export const UserPermissionModelSchema = {
    required: ['nodeKey', 'permissions'],
    type: 'object',
    properties: {
        nodeKey: {
            type: 'string',
            format: 'uuid'
        },
        permissions: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    additionalProperties: false
} as const;

export const UserPermissionsResponseModelSchema = {
    required: ['permissions'],
    type: 'object',
    properties: {
        permissions: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/UserPermissionModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UserResponseModelSchema = {
    required: ['avatarUrls', 'createDate', 'documentStartNodeIds', 'email', 'failedLoginAttempts', 'hasDocumentRootAccess', 'hasMediaRootAccess', 'id', 'isAdmin', 'kind', 'mediaStartNodeIds', 'name', 'state', 'updateDate', 'userGroupIds', 'userName'],
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        userName: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        userGroupIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        languageIsoCode: {
            type: 'string',
            nullable: true
        },
        documentStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasDocumentRootAccess: {
            type: 'boolean'
        },
        mediaStartNodeIds: {
            uniqueItems: true,
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ReferenceByIdModel'
                    }
                ]
            }
        },
        hasMediaRootAccess: {
            type: 'boolean'
        },
        avatarUrls: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        state: {
            '$ref': '#/components/schemas/UserStateModel'
        },
        failedLoginAttempts: {
            type: 'integer',
            format: 'int32'
        },
        createDate: {
            type: 'string',
            format: 'date-time'
        },
        updateDate: {
            type: 'string',
            format: 'date-time'
        },
        lastLoginDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastLockoutDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        lastPasswordChangeDate: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        isAdmin: {
            type: 'boolean'
        },
        kind: {
            '$ref': '#/components/schemas/UserKindModel'
        }
    },
    additionalProperties: false
} as const;

export const UserSettingsPresentationModelSchema = {
    required: ['consentLevels', 'minCharLength', 'minNonAlphaNumericLength'],
    type: 'object',
    properties: {
        minCharLength: {
            type: 'integer',
            format: 'int32'
        },
        minNonAlphaNumericLength: {
            type: 'integer',
            format: 'int32'
        },
        consentLevels: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ConsentLevelPresentationModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;

export const UserStateModelSchema = {
    enum: ['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All'],
    type: 'string'
} as const;

export const UserTwoFactorProviderModelSchema = {
    required: ['isEnabledOnUser', 'providerName'],
    type: 'object',
    properties: {
        providerName: {
            type: 'string'
        },
        isEnabledOnUser: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ValidateUpdateDocumentRequestModelSchema = {
    required: ['values', 'variants'],
    type: 'object',
    properties: {
        values: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentValueModel'
                    }
                ]
            }
        },
        variants: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/DocumentVariantRequestModel'
                    }
                ]
            }
        },
        template: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ],
            nullable: true
        },
        cultures: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const VariantItemResponseModelSchema = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        culture: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const VerifyInviteUserRequestModelSchema = {
    required: ['token', 'user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        token: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const VerifyInviteUserResponseModelSchema = {
    required: ['passwordConfiguration'],
    type: 'object',
    properties: {
        passwordConfiguration: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PasswordConfigurationResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const VerifyResetPasswordResponseModelSchema = {
    required: ['passwordConfiguration'],
    type: 'object',
    properties: {
        passwordConfiguration: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/PasswordConfigurationResponseModel'
                }
            ]
        }
    },
    additionalProperties: false
} as const;

export const VerifyResetPasswordTokenRequestModelSchema = {
    required: ['resetCode', 'user'],
    type: 'object',
    properties: {
        user: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/ReferenceByIdModel'
                }
            ]
        },
        resetCode: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const WebhookEventModelSchema = {
    required: ['alias', 'eventName', 'eventType'],
    type: 'object',
    properties: {
        eventName: {
            type: 'string'
        },
        eventType: {
            type: 'string'
        },
        alias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const WebhookEventResponseModelSchema = {
    required: ['alias', 'eventName', 'eventType'],
    type: 'object',
    properties: {
        eventName: {
            type: 'string'
        },
        eventType: {
            type: 'string'
        },
        alias: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const WebhookItemResponseModelSchema = {
    required: ['enabled', 'events', 'name', 'types', 'url'],
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        events: {
            type: 'string'
        },
        url: {
            type: 'string'
        },
        types: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const WebhookResponseModelSchema = {
    required: ['contentTypeKeys', 'enabled', 'events', 'headers', 'id', 'url'],
    type: 'object',
    properties: {
        enabled: {
            type: 'boolean'
        },
        url: {
            minLength: 1,
            type: 'string'
        },
        contentTypeKeys: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        headers: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        events: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/WebhookEventResponseModel'
                    }
                ]
            }
        }
    },
    additionalProperties: false
} as const;