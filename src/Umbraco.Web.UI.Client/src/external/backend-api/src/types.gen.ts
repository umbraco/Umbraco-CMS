// This file is auto-generated by @hey-api/openapi-ts

export type AllowedDocumentTypeModel = {
    id: string;
    name: string;
    description?: (string) | null;
    icon?: (string) | null;
};

export type AllowedMediaTypeModel = {
    id: string;
    name: string;
    description?: (string) | null;
    icon?: (string) | null;
};

export type AuditLogResponseModel = {
    user: (ReferenceByIdModel);
    timestamp: string;
    logType: AuditTypeModel;
    comment?: (string) | null;
    parameters?: (string) | null;
};

export enum AuditTypeModel {
    NEW = 'New',
    SAVE = 'Save',
    SAVE_VARIANT = 'SaveVariant',
    OPEN = 'Open',
    DELETE = 'Delete',
    PUBLISH = 'Publish',
    PUBLISH_VARIANT = 'PublishVariant',
    SEND_TO_PUBLISH = 'SendToPublish',
    SEND_TO_PUBLISH_VARIANT = 'SendToPublishVariant',
    UNPUBLISH = 'Unpublish',
    UNPUBLISH_VARIANT = 'UnpublishVariant',
    MOVE = 'Move',
    COPY = 'Copy',
    ASSIGN_DOMAIN = 'AssignDomain',
    PUBLIC_ACCESS = 'PublicAccess',
    SORT = 'Sort',
    NOTIFY = 'Notify',
    SYSTEM = 'System',
    ROLL_BACK = 'RollBack',
    PACKAGER_INSTALL = 'PackagerInstall',
    PACKAGER_UNINSTALL = 'PackagerUninstall',
    CUSTOM = 'Custom',
    CONTENT_VERSION_PREVENT_CLEANUP = 'ContentVersionPreventCleanup',
    CONTENT_VERSION_ENABLE_CLEANUP = 'ContentVersionEnableCleanup'
}

export type AvailableDocumentTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
    folderPath: Array<(string)>;
    isCompatible: boolean;
};

export type AvailableMediaTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
    folderPath: Array<(string)>;
    isCompatible: boolean;
};

export type AvailableMemberTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
    folderPath: Array<(string)>;
    isCompatible: boolean;
};

export type CalculatedUserStartNodesResponseModel = {
    id: string;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
};

export type ChangePasswordCurrentUserRequestModel = {
    newPassword: string;
    oldPassword?: (string) | null;
};

export type ChangePasswordUserRequestModel = {
    newPassword: string;
};

export enum CompositionTypeModel {
    COMPOSITION = 'Composition',
    INHERITANCE = 'Inheritance'
}

export type ConsentLevelPresentationModel = {
    level: TelemetryLevelModel;
    description: string;
};

export type CopyDataTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type CopyDocumentRequestModel = {
    target?: ((ReferenceByIdModel) | null);
    relateToOriginal: boolean;
    includeDescendants: boolean;
};

export type CopyDocumentTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type CopyMediaTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type CreateDataTypeRequestModel = {
    name: string;
    editorAlias: string;
    editorUiAlias: string;
    values: Array<(DataTypePropertyPresentationModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateDictionaryItemRequestModel = {
    name: string;
    translations: Array<(DictionaryItemTranslationModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateDocumentBlueprintFromDocumentRequestModel = {
    document: (ReferenceByIdModel);
    id?: (string) | null;
    name: string;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateDocumentBlueprintRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    documentType: (ReferenceByIdModel);
};

export type CreateDocumentRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    documentType: (ReferenceByIdModel);
    template: ((ReferenceByIdModel) | null);
};

export type CreateDocumentTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type CreateDocumentTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type CreateDocumentTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(CreateDocumentTypePropertyTypeRequestModel)>;
    containers: Array<(CreateDocumentTypePropertyTypeContainerRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    allowedTemplates: Array<(ReferenceByIdModel)>;
    defaultTemplate?: ((ReferenceByIdModel) | null);
    cleanup: (DocumentTypeCleanupModel);
    allowedDocumentTypes: Array<(DocumentTypeSortModel)>;
    compositions: Array<(DocumentTypeCompositionModel)>;
};

export type CreateFolderRequestModel = {
    name: string;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
};

export type CreateInitialPasswordUserRequestModel = {
    user: (ReferenceByIdModel);
    token: string;
    password: string;
};

export type CreateLanguageRequestModel = {
    name: string;
    isDefault: boolean;
    isMandatory: boolean;
    fallbackIsoCode?: (string) | null;
    isoCode: string;
};

export type CreateMediaRequestModel = {
    values: Array<(MediaValueModel)>;
    variants: Array<(MediaVariantRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    mediaType: (ReferenceByIdModel);
};

export type CreateMediaTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type CreateMediaTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type CreateMediaTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    isElement: boolean;
    properties: Array<(CreateMediaTypePropertyTypeRequestModel)>;
    containers: Array<(CreateMediaTypePropertyTypeContainerRequestModel)>;
    id?: (string) | null;
    parent?: ((ReferenceByIdModel) | null);
    allowedMediaTypes: Array<(MediaTypeSortModel)>;
    compositions: Array<(MediaTypeCompositionModel)>;
    collection?: ((ReferenceByIdModel) | null);
};

export type CreateMemberGroupRequestModel = {
    name: string;
    id?: (string) | null;
};

export type CreateMemberRequestModel = {
    values: Array<(MemberValueModel)>;
    variants: Array<(MemberVariantRequestModel)>;
    id?: (string) | null;
    email: string;
    username: string;
    password: string;
    memberType: (ReferenceByIdModel);
    groups?: Array<(string)> | null;
    isApproved: boolean;
};

export type CreateMemberTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type CreateMemberTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
    isSensitive: boolean;
    visibility: (MemberTypePropertyTypeVisibilityModel);
};

export type CreateMemberTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(CreateMemberTypePropertyTypeRequestModel)>;
    containers: Array<(CreateMemberTypePropertyTypeContainerRequestModel)>;
    id?: (string) | null;
    compositions: Array<(MemberTypeCompositionModel)>;
};

export type CreatePackageRequestModel = {
    name: string;
    contentNodeId?: (string) | null;
    contentLoadChildNodes: boolean;
    mediaIds: Array<(string)>;
    mediaLoadChildNodes: boolean;
    documentTypes: Array<(string)>;
    mediaTypes: Array<(string)>;
    dataTypes: Array<(string)>;
    templates: Array<(string)>;
    partialViews: Array<(string)>;
    stylesheets: Array<(string)>;
    scripts: Array<(string)>;
    languages: Array<(string)>;
    dictionaryItems: Array<(string)>;
    id?: (string) | null;
};

export type CreatePartialViewFolderRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type CreatePartialViewRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type CreateScriptFolderRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type CreateScriptRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type CreateStylesheetFolderRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type CreateStylesheetRequestModel = {
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type CreateTemplateRequestModel = {
    name: string;
    alias: string;
    content?: (string) | null;
    id?: (string) | null;
};

export type CreateUserClientCredentialsRequestModel = {
    clientId: string;
    clientSecret: string;
};

export type CreateUserDataRequestModel = {
    group: string;
    identifier: string;
    value: string;
    key?: (string) | null;
};

export type CreateUserGroupRequestModel = {
    name: string;
    alias: string;
    icon?: (string) | null;
    sections: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    documentStartNode?: ((ReferenceByIdModel) | null);
    documentRootAccess: boolean;
    mediaStartNode?: ((ReferenceByIdModel) | null);
    mediaRootAccess: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
    id?: (string) | null;
};

export type CreateUserRequestModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    id?: (string) | null;
    kind: UserKindModel;
};

export type CreateWebhookRequestModel = {
    enabled: boolean;
    url: string;
    contentTypeKeys: Array<(string)>;
    headers: {
        [key: string]: (string);
    };
    id?: (string) | null;
    events: Array<(string)>;
};

export type CultureAndScheduleRequestModel = {
    culture?: (string) | null;
    schedule?: ((ScheduleRequestModel) | null);
};

export type CultureReponseModel = {
    name: string;
    englishName: string;
};

export type CurrentUserResponseModel = {
    id: string;
    email: string;
    userName: string;
    name: string;
    languageIsoCode: (string) | null;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
    avatarUrls: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    hasAccessToSensitiveData: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
    allowedSections: Array<(string)>;
    isAdmin: boolean;
};

export type CurrenUserConfigurationResponseModel = {
    keepUserLoggedIn: boolean;
    /**
     * @deprecated
     */
    usernameIsEmail: boolean;
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type DatabaseInstallRequestModel = {
    id: string;
    providerName: string;
    server?: (string) | null;
    name?: (string) | null;
    username?: (string) | null;
    password?: (string) | null;
    useIntegratedAuthentication: boolean;
    connectionString?: (string) | null;
    trustServerCertificate: boolean;
};

export type DatabaseSettingsPresentationModel = {
    id: string;
    sortOrder: number;
    displayName: string;
    defaultDatabaseName: string;
    providerName: string;
    isConfigured: boolean;
    requiresServer: boolean;
    serverPlaceholder: string;
    requiresCredentials: boolean;
    supportsIntegratedAuthentication: boolean;
    requiresConnectionTest: boolean;
};

export enum DataTypeChangeModeModel {
    TRUE = 'True',
    FALSE = 'False',
    FALSE_WITH_HELP_TEXT = 'FalseWithHelpText'
}

export type DatatypeConfigurationResponseModel = {
    canBeChanged: DataTypeChangeModeModel;
    documentListViewId: string;
    mediaListViewId: string;
};

export type DataTypeContentTypeReferenceModel = {
    id: string;
    type: (string) | null;
    name: (string) | null;
    icon: (string) | null;
};

export type DataTypeItemResponseModel = {
    id: string;
    name: string;
    editorUiAlias?: (string) | null;
    editorAlias: string;
    isDeletable: boolean;
};

export type DataTypePropertyPresentationModel = {
    alias: string;
    value?: unknown;
};

export type DataTypePropertyReferenceModel = {
    name: string;
    alias: string;
};

export type DataTypeReferenceResponseModel = {
    contentType: (DataTypeContentTypeReferenceModel);
    properties: Array<(DataTypePropertyReferenceModel)>;
};

export type DataTypeResponseModel = {
    name: string;
    editorAlias: string;
    editorUiAlias: string;
    values: Array<(DataTypePropertyPresentationModel)>;
    id: string;
    isDeletable: boolean;
    canIgnoreStartNodes: boolean;
};

export type DataTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    editorUiAlias?: (string) | null;
    isDeletable: boolean;
};

export type DefaultReferenceResponseModel = {
    id: string;
    name?: (string) | null;
    type?: (string) | null;
    icon?: (string) | null;
};

export type DeleteUserGroupsRequestModel = {
    userGroupIds: Array<(ReferenceByIdModel)>;
};

export type DeleteUsersRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type DictionaryItemItemResponseModel = {
    id: string;
    name: string;
};

export type DictionaryItemResponseModel = {
    name: string;
    translations: Array<(DictionaryItemTranslationModel)>;
    id: string;
};

export type DictionaryItemTranslationModel = {
    isoCode: string;
    translation: string;
};

export type DictionaryOverviewResponseModel = {
    name?: (string) | null;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    translatedIsoCodes: Array<(string)>;
};

export enum DirectionModel {
    ASCENDING = 'Ascending',
    DESCENDING = 'Descending'
}

export type DisableUserRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type DocumentBlueprintItemResponseModel = {
    id: string;
    name: string;
    documentType: (DocumentTypeReferenceResponseModel);
};

export type DocumentBlueprintResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
};

export type DocumentBlueprintTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    documentType?: ((DocumentTypeReferenceResponseModel) | null);
};

export type DocumentCollectionResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    creator?: (string) | null;
    sortOrder: number;
    documentType: (DocumentTypeCollectionReferenceResponseModel);
    updater?: (string) | null;
};

export type DocumentConfigurationResponseModel = {
    disableDeleteWhenReferenced: boolean;
    disableUnpublishWhenReferenced: boolean;
    allowEditInvariantFromNonDefault: boolean;
    allowNonExistingSegmentsCreation: boolean;
    /**
     * @deprecated
     */
    reservedFieldNames: Array<(string)>;
};

export type DocumentItemResponseModel = {
    id: string;
    isTrashed: boolean;
    isProtected: boolean;
    parent?: ((ReferenceByIdModel) | null);
    hasChildren: boolean;
    documentType: (DocumentTypeReferenceResponseModel);
    variants: Array<(DocumentVariantItemResponseModel)>;
};

export type DocumentNotificationResponseModel = {
    actionId: string;
    alias: string;
    subscribed: boolean;
};

export type DocumentPermissionPresentationModel = {
    $type: string;
    document: (ReferenceByIdModel);
    verbs: Array<(string)>;
};

export type DocumentRecycleBinItemResponseModel = {
    id: string;
    hasChildren: boolean;
    parent?: ((ItemReferenceByIdResponseModel) | null);
    documentType: (DocumentTypeReferenceResponseModel);
    variants: Array<(DocumentVariantItemResponseModel)>;
};

export type DocumentReferenceResponseModel = {
    id: string;
    name?: (string) | null;
    published?: (boolean) | null;
    documentType: (TrackedReferenceDocumentTypeModel);
};

export type DocumentResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
    urls: Array<(DocumentUrlInfoModel)>;
    template?: ((ReferenceByIdModel) | null);
    isTrashed: boolean;
};

export type DocumentTreeItemResponseModel = {
    hasChildren: boolean;
    parent?: ((ReferenceByIdModel) | null);
    noAccess: boolean;
    isTrashed: boolean;
    id: string;
    isProtected: boolean;
    documentType: (DocumentTypeReferenceResponseModel);
    variants: Array<(DocumentVariantItemResponseModel)>;
};

export type DocumentTypeBlueprintItemResponseModel = {
    id: string;
    name: string;
};

export type DocumentTypeCleanupModel = {
    preventCleanup: boolean;
    keepAllVersionsNewerThanDays?: (number) | null;
    keepLatestVersionPerDayForDays?: (number) | null;
};

export type DocumentTypeCollectionReferenceResponseModel = {
    id: string;
    alias: string;
    icon: string;
};

export type DocumentTypeCompositionModel = {
    documentType: (ReferenceByIdModel);
    compositionType: CompositionTypeModel;
};

export type DocumentTypeCompositionRequestModel = {
    id?: (string) | null;
    currentPropertyAliases: Array<(string)>;
    currentCompositeIds: Array<(string)>;
    isElement: boolean;
};

export type DocumentTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
};

export type DocumentTypeConfigurationResponseModel = {
    dataTypesCanBeChanged: DataTypeChangeModeModel;
    disableTemplates: boolean;
    useSegments: boolean;
    reservedFieldNames: Array<(string)>;
};

export type DocumentTypeItemResponseModel = {
    id: string;
    name: string;
    isElement: boolean;
    icon?: (string) | null;
    description?: (string) | null;
};

export type DocumentTypePropertyTypeContainerResponseModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type DocumentTypePropertyTypeResponseModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type DocumentTypeReferenceResponseModel = {
    id: string;
    icon: string;
    collection?: ((ReferenceByIdModel) | null);
};

export type DocumentTypeResponseModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(DocumentTypePropertyTypeResponseModel)>;
    containers: Array<(DocumentTypePropertyTypeContainerResponseModel)>;
    id: string;
    allowedTemplates: Array<(ReferenceByIdModel)>;
    defaultTemplate?: ((ReferenceByIdModel) | null);
    cleanup: (DocumentTypeCleanupModel);
    allowedDocumentTypes: Array<(DocumentTypeSortModel)>;
    compositions: Array<(DocumentTypeCompositionModel)>;
};

export type DocumentTypeSortModel = {
    documentType: (ReferenceByIdModel);
    sortOrder: number;
};

export type DocumentTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    isElement: boolean;
    icon: string;
};

export type DocumentUrlInfoModel = {
    culture: (string) | null;
    url: string;
};

export type DocumentUrlInfoResponseModel = {
    id: string;
    urlInfos: Array<(DocumentUrlInfoModel)>;
};

export type DocumentValueModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
};

export type DocumentValueResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
    editorAlias: string;
};

export type DocumentVariantItemResponseModel = {
    name: string;
    culture?: (string) | null;
    state: DocumentVariantStateModel;
};

export type DocumentVariantRequestModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
};

export type DocumentVariantResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
    createDate: string;
    updateDate: string;
    state: DocumentVariantStateModel;
    publishDate?: (string) | null;
};

export enum DocumentVariantStateModel {
    NOT_CREATED = 'NotCreated',
    DRAFT = 'Draft',
    PUBLISHED = 'Published',
    PUBLISHED_PENDING_CHANGES = 'PublishedPendingChanges'
}

export type DocumentVersionItemResponseModel = {
    id: string;
    document: (ReferenceByIdModel);
    documentType: (ReferenceByIdModel);
    user: (ReferenceByIdModel);
    versionDate: string;
    isCurrentPublishedVersion: boolean;
    isCurrentDraftVersion: boolean;
    preventCleanup: boolean;
};

export type DocumentVersionResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
    document?: ((ReferenceByIdModel) | null);
};

export type DomainPresentationModel = {
    domainName: string;
    isoCode: string;
};

export type DomainsResponseModel = {
    defaultIsoCode?: (string) | null;
    domains: Array<(DomainPresentationModel)>;
};

export type DynamicRootContextRequestModel = {
    id?: (string) | null;
    parent: (ReferenceByIdModel);
    culture?: (string) | null;
    segment?: (string) | null;
};

export type DynamicRootQueryOriginRequestModel = {
    alias: string;
    id?: (string) | null;
};

export type DynamicRootQueryRequestModel = {
    origin: (DynamicRootQueryOriginRequestModel);
    steps: Array<(DynamicRootQueryStepRequestModel)>;
};

export type DynamicRootQueryStepRequestModel = {
    alias: string;
    documentTypeIds: Array<(string)>;
};

export type DynamicRootRequestModel = {
    context: (DynamicRootContextRequestModel);
    query: (DynamicRootQueryRequestModel);
};

export type DynamicRootResponseModel = {
    roots: Array<(string)>;
};

export type EnableTwoFactorRequestModel = {
    code: string;
    secret: string;
};

export type EnableUserRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type EntityImportAnalysisResponseModel = {
    entityType: string;
    alias?: (string) | null;
    key?: (string) | null;
};

export enum EventMessageTypeModel {
    DEFAULT = 'Default',
    INFO = 'Info',
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning'
}

export type FieldPresentationModel = {
    name: string;
    values: Array<(string)>;
};

export type FileSystemFolderModel = {
    path: string;
};

export type FileSystemTreeItemPresentationModel = {
    hasChildren: boolean;
    name: string;
    path: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type FolderResponseModel = {
    name: string;
    id: string;
};

export type HealthCheckActionRequestModel = {
    healthCheck: (ReferenceByIdModel);
    alias?: (string) | null;
    name?: (string) | null;
    description?: (string) | null;
    valueRequired: boolean;
    providedValue?: (string) | null;
    providedValueValidation?: (string) | null;
    providedValueValidationRegex?: (string) | null;
    actionParameters?: {
        [key: string]: unknown;
    } | null;
};

export type HealthCheckGroupPresentationModel = {
    name: string;
    checks: Array<(HealthCheckModel)>;
};

export type HealthCheckGroupResponseModel = {
    name: string;
};

export type HealthCheckGroupWithResultResponseModel = {
    checks: Array<(HealthCheckWithResultPresentationModel)>;
};

export type HealthCheckModel = {
    id: string;
    name: string;
    description?: (string) | null;
};

export type HealthCheckResultResponseModel = {
    message: string;
    resultType: StatusResultTypeModel;
    actions?: Array<(HealthCheckActionRequestModel)> | null;
    readMoreLink?: (string) | null;
};

export type HealthCheckWithResultPresentationModel = {
    id: string;
    results?: Array<(HealthCheckResultResponseModel)> | null;
};

export enum HealthStatusModel {
    HEALTHY = 'Healthy',
    UNHEALTHY = 'Unhealthy',
    REBUILDING = 'Rebuilding'
}

export type HealthStatusResponseModel = {
    status: HealthStatusModel;
    message?: (string) | null;
};

export type HelpPageResponseModel = {
    name?: (string) | null;
    description?: (string) | null;
    url?: (string) | null;
    type?: (string) | null;
};

export enum ImageCropModeModel {
    CROP = 'Crop',
    MAX = 'Max',
    STRETCH = 'Stretch',
    PAD = 'Pad',
    BOX_PAD = 'BoxPad',
    MIN = 'Min'
}

export type ImportDictionaryRequestModel = {
    temporaryFile: (ReferenceByIdModel);
    parent?: ((ReferenceByIdModel) | null);
};

export type ImportDocumentTypeRequestModel = {
    file: (ReferenceByIdModel);
};

export type ImportMediaTypeRequestModel = {
    file: (ReferenceByIdModel);
};

export type IndexResponseModel = {
    name: string;
    healthStatus: (HealthStatusResponseModel);
    canRebuild: boolean;
    searcherName: string;
    documentCount: number;
    fieldCount: number;
    providerProperties?: {
        [key: string]: unknown;
    } | null;
};

export type InstallRequestModel = {
    user: (UserInstallRequestModel);
    database: (DatabaseInstallRequestModel);
    telemetryLevel: TelemetryLevelModel;
};

export type InstallSettingsResponseModel = {
    user: (UserSettingsPresentationModel);
    databases: Array<(DatabaseSettingsPresentationModel)>;
};

export type InviteUserRequestModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    id?: (string) | null;
    message?: (string) | null;
};

export type ItemReferenceByIdResponseModel = {
    id: string;
};

export type ItemSortingRequestModel = {
    id: string;
    sortOrder: number;
};

export type LanguageItemResponseModel = {
    name: string;
    isoCode: string;
};

export type LanguageResponseModel = {
    name: string;
    isDefault: boolean;
    isMandatory: boolean;
    fallbackIsoCode?: (string) | null;
    isoCode: string;
};

export type LoggerResponseModel = {
    name: string;
    level: LogLevelModel;
};

export type LogLevelCountsReponseModel = {
    information: number;
    debug: number;
    warning: number;
    error: number;
    fatal: number;
};

export enum LogLevelModel {
    VERBOSE = 'Verbose',
    DEBUG = 'Debug',
    INFORMATION = 'Information',
    WARNING = 'Warning',
    ERROR = 'Error',
    FATAL = 'Fatal'
}

export type LogMessagePropertyPresentationModel = {
    name: string;
    value?: (string) | null;
};

export type LogMessageResponseModel = {
    timestamp: string;
    level: LogLevelModel;
    messageTemplate?: (string) | null;
    renderedMessage?: (string) | null;
    properties: Array<(LogMessagePropertyPresentationModel)>;
    exception?: (string) | null;
};

export type LogTemplateResponseModel = {
    messageTemplate?: (string) | null;
    count: number;
};

export type ManifestResponseModel = {
    name: string;
    id?: (string) | null;
    version?: (string) | null;
    extensions: Array<unknown>;
};

export type MediaCollectionResponseModel = {
    values: Array<(MediaValueResponseModel)>;
    variants: Array<(MediaVariantResponseModel)>;
    id: string;
    creator?: (string) | null;
    sortOrder: number;
    mediaType: (MediaTypeCollectionReferenceResponseModel);
};

export type MediaConfigurationResponseModel = {
    disableDeleteWhenReferenced: boolean;
    disableUnpublishWhenReferenced: boolean;
    /**
     * @deprecated
     */
    reservedFieldNames: Array<(string)>;
};

export type MediaItemResponseModel = {
    id: string;
    isTrashed: boolean;
    parent?: ((ReferenceByIdModel) | null);
    hasChildren: boolean;
    mediaType: (MediaTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
};

export type MediaRecycleBinItemResponseModel = {
    id: string;
    hasChildren: boolean;
    parent?: ((ItemReferenceByIdResponseModel) | null);
    mediaType: (MediaTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
};

export type MediaReferenceResponseModel = {
    id: string;
    name?: (string) | null;
    mediaType: (TrackedReferenceMediaTypeModel);
};

export type MediaResponseModel = {
    values: Array<(MediaValueResponseModel)>;
    variants: Array<(MediaVariantResponseModel)>;
    id: string;
    urls: Array<(MediaUrlInfoModel)>;
    isTrashed: boolean;
    mediaType: (MediaTypeReferenceResponseModel);
};

export type MediaTreeItemResponseModel = {
    hasChildren: boolean;
    parent?: ((ReferenceByIdModel) | null);
    noAccess: boolean;
    isTrashed: boolean;
    id: string;
    mediaType: (MediaTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
};

export type MediaTypeCollectionReferenceResponseModel = {
    id: string;
    alias: string;
    icon: string;
};

export type MediaTypeCompositionModel = {
    mediaType: (ReferenceByIdModel);
    compositionType: CompositionTypeModel;
};

export type MediaTypeCompositionRequestModel = {
    id?: (string) | null;
    currentPropertyAliases: Array<(string)>;
    currentCompositeIds: Array<(string)>;
};

export type MediaTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
};

export type MediaTypeConfigurationResponseModel = {
    reservedFieldNames: Array<(string)>;
};

export type MediaTypeItemResponseModel = {
    id: string;
    name: string;
    icon?: (string) | null;
};

export type MediaTypePropertyTypeContainerResponseModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type MediaTypePropertyTypeResponseModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type MediaTypeReferenceResponseModel = {
    id: string;
    icon: string;
    collection?: ((ReferenceByIdModel) | null);
};

export type MediaTypeResponseModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(MediaTypePropertyTypeResponseModel)>;
    containers: Array<(MediaTypePropertyTypeContainerResponseModel)>;
    id: string;
    allowedMediaTypes: Array<(MediaTypeSortModel)>;
    compositions: Array<(MediaTypeCompositionModel)>;
    isDeletable: boolean;
    aliasCanBeChanged: boolean;
};

export type MediaTypeSortModel = {
    mediaType: (ReferenceByIdModel);
    sortOrder: number;
};

export type MediaTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    isFolder: boolean;
    icon: string;
    isDeletable: boolean;
};

export type MediaUrlInfoModel = {
    culture: (string) | null;
    url: string;
};

export type MediaUrlInfoResponseModel = {
    id: string;
    urlInfos: Array<(MediaUrlInfoModel)>;
};

export type MediaValueModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
};

export type MediaValueResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
    editorAlias: string;
};

export type MediaVariantRequestModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
};

export type MediaVariantResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
    createDate: string;
    updateDate: string;
};

export type MemberConfigurationResponseModel = {
    /**
     * @deprecated
     */
    reservedFieldNames: Array<(string)>;
};

export type MemberGroupItemResponseModel = {
    id: string;
    name: string;
};

export type MemberGroupResponseModel = {
    name: string;
    id: string;
};

export type MemberItemResponseModel = {
    id: string;
    memberType: (MemberTypeReferenceResponseModel);
    variants: Array<(VariantItemResponseModel)>;
    kind: MemberKindModel;
};

export enum MemberKindModel {
    DEFAULT = 'Default',
    API = 'Api'
}

export type MemberResponseModel = {
    values: Array<(MemberValueResponseModel)>;
    variants: Array<(MemberVariantResponseModel)>;
    id: string;
    email: string;
    username: string;
    memberType: (MemberTypeReferenceResponseModel);
    isApproved: boolean;
    isLockedOut: boolean;
    isTwoFactorEnabled: boolean;
    failedPasswordAttempts: number;
    lastLoginDate?: (string) | null;
    lastLockoutDate?: (string) | null;
    lastPasswordChangeDate?: (string) | null;
    groups: Array<(string)>;
    kind: MemberKindModel;
};

export type MemberTypeCompositionModel = {
    memberType: (ReferenceByIdModel);
    compositionType: CompositionTypeModel;
};

export type MemberTypeCompositionRequestModel = {
    id?: (string) | null;
    currentPropertyAliases: Array<(string)>;
    currentCompositeIds: Array<(string)>;
};

export type MemberTypeCompositionResponseModel = {
    id: string;
    name: string;
    icon: string;
};

export type MemberTypeConfigurationResponseModel = {
    reservedFieldNames: Array<(string)>;
};

export type MemberTypeItemResponseModel = {
    id: string;
    name: string;
    icon?: (string) | null;
};

export type MemberTypePropertyTypeContainerResponseModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type MemberTypePropertyTypeResponseModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
    isSensitive: boolean;
    visibility: (MemberTypePropertyTypeVisibilityModel);
};

export type MemberTypePropertyTypeVisibilityModel = {
    memberCanView: boolean;
    memberCanEdit: boolean;
};

export type MemberTypeReferenceResponseModel = {
    id: string;
    icon: string;
    collection?: ((ReferenceByIdModel) | null);
};

export type MemberTypeResponseModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(MemberTypePropertyTypeResponseModel)>;
    containers: Array<(MemberTypePropertyTypeContainerResponseModel)>;
    id: string;
    compositions: Array<(MemberTypeCompositionModel)>;
};

export type MemberTypeTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
    icon: string;
};

export type MemberValueModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
};

export type MemberValueResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    alias: string;
    value?: unknown;
    editorAlias: string;
};

export type MemberVariantRequestModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
};

export type MemberVariantResponseModel = {
    culture?: (string) | null;
    segment?: (string) | null;
    name: string;
    createDate: string;
    updateDate: string;
};

export type ModelsBuilderResponseModel = {
    mode: ModelsModeModel;
    canGenerate: boolean;
    outOfDateModels: boolean;
    lastError?: (string) | null;
    version?: (string) | null;
    modelsNamespace?: (string) | null;
    trackingOutOfDateModels: boolean;
};

export enum ModelsModeModel {
    NOTHING = 'Nothing',
    IN_MEMORY_AUTO = 'InMemoryAuto',
    SOURCE_CODE_MANUAL = 'SourceCodeManual',
    SOURCE_CODE_AUTO = 'SourceCodeAuto'
}

export type MoveDataTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDictionaryRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDocumentBlueprintRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDocumentRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveDocumentTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveMediaRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type MoveMediaTypeRequestModel = {
    target?: ((ReferenceByIdModel) | null);
};

export type NamedEntityTreeItemResponseModel = {
    hasChildren: boolean;
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name: string;
};

export type NoopSetupTwoFactorModel = {
    [key: string]: unknown;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type ObjectTypeResponseModel = {
    name?: (string) | null;
    id: string;
};

export type OEmbedResponseModel = {
    markup: string;
};

export enum OperatorModel {
    EQUALS = 'Equals',
    NOT_EQUALS = 'NotEquals',
    CONTAINS = 'Contains',
    NOT_CONTAINS = 'NotContains',
    LESS_THAN = 'LessThan',
    LESS_THAN_EQUAL_TO = 'LessThanEqualTo',
    GREATER_THAN = 'GreaterThan',
    GREATER_THAN_EQUAL_TO = 'GreaterThanEqualTo'
}

export type OutOfDateStatusResponseModel = {
    status: OutOfDateTypeModel;
};

export enum OutOfDateTypeModel {
    OUT_OF_DATE = 'OutOfDate',
    CURRENT = 'Current',
    UNKNOWN = 'Unknown'
}

export type PackageConfigurationResponseModel = {
    marketplaceUrl: string;
};

export type PackageDefinitionResponseModel = {
    name: string;
    contentNodeId?: (string) | null;
    contentLoadChildNodes: boolean;
    mediaIds: Array<(string)>;
    mediaLoadChildNodes: boolean;
    documentTypes: Array<(string)>;
    mediaTypes: Array<(string)>;
    dataTypes: Array<(string)>;
    templates: Array<(string)>;
    partialViews: Array<(string)>;
    stylesheets: Array<(string)>;
    scripts: Array<(string)>;
    languages: Array<(string)>;
    dictionaryItems: Array<(string)>;
    id: string;
    readonly packagePath: string;
};

export type PackageMigrationStatusResponseModel = {
    packageName: string;
    hasPendingMigrations: boolean;
};

export type PagedAllowedDocumentTypeModel = {
    total: number;
    items: Array<(AllowedDocumentTypeModel)>;
};

export type PagedAllowedMediaTypeModel = {
    total: number;
    items: Array<(AllowedMediaTypeModel)>;
};

export type PagedAuditLogResponseModel = {
    total: number;
    items: Array<(AuditLogResponseModel)>;
};

export type PagedCultureReponseModel = {
    total: number;
    items: Array<(CultureReponseModel)>;
};

export type PagedDataTypeItemResponseModel = {
    total: number;
    items: Array<(DataTypeItemResponseModel)>;
};

export type PagedDataTypeTreeItemResponseModel = {
    total: number;
    items: Array<(DataTypeTreeItemResponseModel)>;
};

export type PagedDictionaryOverviewResponseModel = {
    total: number;
    items: Array<(DictionaryOverviewResponseModel)>;
};

export type PagedDocumentBlueprintTreeItemResponseModel = {
    total: number;
    items: Array<(DocumentBlueprintTreeItemResponseModel)>;
};

export type PagedDocumentCollectionResponseModel = {
    total: number;
    items: Array<(DocumentCollectionResponseModel)>;
};

export type PagedDocumentRecycleBinItemResponseModel = {
    total: number;
    items: Array<(DocumentRecycleBinItemResponseModel)>;
};

export type PagedDocumentTreeItemResponseModel = {
    total: number;
    items: Array<(DocumentTreeItemResponseModel)>;
};

export type PagedDocumentTypeBlueprintItemResponseModel = {
    total: number;
    items: Array<(DocumentTypeBlueprintItemResponseModel)>;
};

export type PagedDocumentTypeTreeItemResponseModel = {
    total: number;
    items: Array<(DocumentTypeTreeItemResponseModel)>;
};

export type PagedDocumentVersionItemResponseModel = {
    total: number;
    items: Array<(DocumentVersionItemResponseModel)>;
};

export type PagedFileSystemTreeItemPresentationModel = {
    total: number;
    items: Array<(FileSystemTreeItemPresentationModel)>;
};

export type PagedHealthCheckGroupResponseModel = {
    total: number;
    items: Array<(HealthCheckGroupResponseModel)>;
};

export type PagedHelpPageResponseModel = {
    total: number;
    items: Array<(HelpPageResponseModel)>;
};

export type PagedIndexResponseModel = {
    total: number;
    items: Array<(IndexResponseModel)>;
};

export type PagedIReferenceResponseModel = {
    total: number;
    items: Array<(DefaultReferenceResponseModel | DocumentReferenceResponseModel | MediaReferenceResponseModel)>;
};

export type PagedLanguageResponseModel = {
    total: number;
    items: Array<(LanguageResponseModel)>;
};

export type PagedLoggerResponseModel = {
    total: number;
    items: Array<(LoggerResponseModel)>;
};

export type PagedLogMessageResponseModel = {
    total: number;
    items: Array<(LogMessageResponseModel)>;
};

export type PagedLogTemplateResponseModel = {
    total: number;
    items: Array<(LogTemplateResponseModel)>;
};

export type PagedMediaCollectionResponseModel = {
    total: number;
    items: Array<(MediaCollectionResponseModel)>;
};

export type PagedMediaRecycleBinItemResponseModel = {
    total: number;
    items: Array<(MediaRecycleBinItemResponseModel)>;
};

export type PagedMediaTreeItemResponseModel = {
    total: number;
    items: Array<(MediaTreeItemResponseModel)>;
};

export type PagedMediaTypeTreeItemResponseModel = {
    total: number;
    items: Array<(MediaTypeTreeItemResponseModel)>;
};

export type PagedMemberGroupResponseModel = {
    total: number;
    items: Array<(MemberGroupResponseModel)>;
};

export type PagedMemberResponseModel = {
    total: number;
    items: Array<(MemberResponseModel)>;
};

export type PagedMemberTypeTreeItemResponseModel = {
    total: number;
    items: Array<(MemberTypeTreeItemResponseModel)>;
};

export type PagedModelDataTypeItemResponseModel = {
    items: Array<(DataTypeItemResponseModel)>;
    total: number;
};

export type PagedModelDocumentItemResponseModel = {
    items: Array<(DocumentItemResponseModel)>;
    total: number;
};

export type PagedModelDocumentTypeItemResponseModel = {
    items: Array<(DocumentTypeItemResponseModel)>;
    total: number;
};

export type PagedModelMediaItemResponseModel = {
    items: Array<(MediaItemResponseModel)>;
    total: number;
};

export type PagedModelMediaTypeItemResponseModel = {
    items: Array<(MediaTypeItemResponseModel)>;
    total: number;
};

export type PagedModelMemberItemResponseModel = {
    items: Array<(MemberItemResponseModel)>;
    total: number;
};

export type PagedModelMemberTypeItemResponseModel = {
    items: Array<(MemberTypeItemResponseModel)>;
    total: number;
};

export type PagedModelTemplateItemResponseModel = {
    items: Array<(TemplateItemResponseModel)>;
    total: number;
};

export type PagedNamedEntityTreeItemResponseModel = {
    total: number;
    items: Array<(NamedEntityTreeItemResponseModel)>;
};

export type PagedObjectTypeResponseModel = {
    total: number;
    items: Array<(ObjectTypeResponseModel)>;
};

export type PagedPackageDefinitionResponseModel = {
    total: number;
    items: Array<(PackageDefinitionResponseModel)>;
};

export type PagedPackageMigrationStatusResponseModel = {
    total: number;
    items: Array<(PackageMigrationStatusResponseModel)>;
};

export type PagedPartialViewSnippetItemResponseModel = {
    total: number;
    items: Array<(PartialViewSnippetItemResponseModel)>;
};

export type PagedProblemDetailsModel = {
    total: number;
    items: Array<(ProblemDetails)>;
};

export type PagedRedirectUrlResponseModel = {
    total: number;
    items: Array<(RedirectUrlResponseModel)>;
};

export type PagedReferenceByIdModel = {
    total: number;
    items: Array<(ReferenceByIdModel)>;
};

export type PagedRelationResponseModel = {
    total: number;
    items: Array<(RelationResponseModel)>;
};

export type PagedRelationTypeResponseModel = {
    total: number;
    items: Array<(RelationTypeResponseModel)>;
};

export type PagedSavedLogSearchResponseModel = {
    total: number;
    items: Array<(SavedLogSearchResponseModel)>;
};

export type PagedSearcherResponseModel = {
    total: number;
    items: Array<(SearcherResponseModel)>;
};

export type PagedSearchResultResponseModel = {
    total: number;
    items: Array<(SearchResultResponseModel)>;
};

export type PagedSegmentResponseModel = {
    total: number;
    items: Array<(SegmentResponseModel)>;
};

export type PagedTagResponseModel = {
    total: number;
    items: Array<(TagResponseModel)>;
};

export type PagedTelemetryResponseModel = {
    total: number;
    items: Array<(TelemetryResponseModel)>;
};

export type PagedUserDataResponseModel = {
    total: number;
    items: Array<(UserDataResponseModel)>;
};

export type PagedUserGroupResponseModel = {
    total: number;
    items: Array<(UserGroupResponseModel)>;
};

export type PagedUserResponseModel = {
    total: number;
    items: Array<(UserResponseModel)>;
};

export type PagedWebhookEventModel = {
    total: number;
    items: Array<(WebhookEventModel)>;
};

export type PagedWebhookResponseModel = {
    total: number;
    items: Array<(WebhookResponseModel)>;
};

export type PartialViewFolderResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type PartialViewItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type PartialViewResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type PartialViewSnippetItemResponseModel = {
    id: string;
    name: string;
};

export type PartialViewSnippetResponseModel = {
    id: string;
    name: string;
    content: string;
};

export type PasswordConfigurationResponseModel = {
    minimumPasswordLength: number;
    requireNonLetterOrDigit: boolean;
    requireDigit: boolean;
    requireLowercase: boolean;
    requireUppercase: boolean;
};

export type ProblemDetails = {
    type?: (string) | null;
    title?: (string) | null;
    status?: (number) | null;
    detail?: (string) | null;
    instance?: (string) | null;
    [key: string]: (unknown | string | number) | undefined;
};

export type ProblemDetailsBuilderModel = {
    [key: string]: unknown;
};

export type ProfilingStatusRequestModel = {
    enabled: boolean;
};

export type ProfilingStatusResponseModel = {
    enabled: boolean;
};

export type PropertyTypeAppearanceModel = {
    labelOnTop: boolean;
};

export type PropertyTypeValidationModel = {
    mandatory: boolean;
    mandatoryMessage?: (string) | null;
    regEx?: (string) | null;
    regExMessage?: (string) | null;
};

export type PublicAccessRequestModel = {
    loginDocument: (ReferenceByIdModel);
    errorDocument: (ReferenceByIdModel);
    memberUserNames: Array<(string)>;
    memberGroupNames: Array<(string)>;
};

export type PublicAccessResponseModel = {
    loginDocument: (ReferenceByIdModel);
    errorDocument: (ReferenceByIdModel);
    members: Array<(MemberItemResponseModel)>;
    groups: Array<(MemberGroupItemResponseModel)>;
};

export type PublishDocumentRequestModel = {
    publishSchedules: Array<(CultureAndScheduleRequestModel)>;
};

export type PublishDocumentWithDescendantsRequestModel = {
    includeUnpublishedDescendants: boolean;
    cultures: Array<(string)>;
};

export type PublishedDocumentResponseModel = {
    values: Array<(DocumentValueResponseModel)>;
    variants: Array<(DocumentVariantResponseModel)>;
    id: string;
    documentType: (DocumentTypeReferenceResponseModel);
    urls: Array<(DocumentUrlInfoModel)>;
    template?: ((ReferenceByIdModel) | null);
    isTrashed: boolean;
};

export enum RedirectStatusModel {
    ENABLED = 'Enabled',
    DISABLED = 'Disabled'
}

export type RedirectUrlResponseModel = {
    id: string;
    originalUrl: string;
    destinationUrl: string;
    created: string;
    document: (ReferenceByIdModel);
    culture?: (string) | null;
};

export type RedirectUrlStatusResponseModel = {
    status: RedirectStatusModel;
    userIsAdmin: boolean;
};

export type ReferenceByIdModel = {
    id: string;
};

export type RelationReferenceModel = {
    id: string;
    name?: (string) | null;
};

export type RelationResponseModel = {
    id: string;
    relationType: (ReferenceByIdModel);
    readonly parent: (RelationReferenceModel);
    readonly child: (RelationReferenceModel);
    readonly createDate: string;
    readonly comment?: (string) | null;
};

export type RelationTypeItemResponseModel = {
    id: string;
    name: string;
    isDeletable: boolean;
};

export type RelationTypeResponseModel = {
    name: string;
    isBidirectional: boolean;
    isDependency: boolean;
    id: string;
    alias?: (string) | null;
    parentObject?: ((ObjectTypeResponseModel) | null);
    childObject?: ((ObjectTypeResponseModel) | null);
};

export type RenamePartialViewRequestModel = {
    name: string;
};

export type RenameScriptRequestModel = {
    name: string;
};

export type RenameStylesheetRequestModel = {
    name: string;
};

export type ResendInviteUserRequestModel = {
    user: (ReferenceByIdModel);
    message?: (string) | null;
};

export type ResetPasswordRequestModel = {
    email: string;
};

export type ResetPasswordTokenRequestModel = {
    user: (ReferenceByIdModel);
    resetCode: string;
    password: string;
};

export type ResetPasswordUserResponseModel = {
    resetPassword?: (string) | null;
};

export enum RuntimeLevelModel {
    UNKNOWN = 'Unknown',
    BOOT = 'Boot',
    INSTALL = 'Install',
    UPGRADE = 'Upgrade',
    RUN = 'Run',
    BOOT_FAILED = 'BootFailed'
}

export enum RuntimeModeModel {
    BACKOFFICE_DEVELOPMENT = 'BackofficeDevelopment',
    DEVELOPMENT = 'Development',
    PRODUCTION = 'Production'
}

export type SavedLogSearchRequestModel = {
    name: string;
    query: string;
};

export type SavedLogSearchResponseModel = {
    name: string;
    query: string;
};

export type ScheduleRequestModel = {
    publishTime?: (string) | null;
    unpublishTime?: (string) | null;
};

export type ScriptFolderResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type ScriptItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type ScriptResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type SearcherResponseModel = {
    name: string;
};

export type SearchResultResponseModel = {
    id: string;
    score: number;
    readonly fieldCount: number;
    fields: Array<(FieldPresentationModel)>;
};

export type SecurityConfigurationResponseModel = {
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type SegmentResponseModel = {
    name: string;
    alias: string;
};

export type ServerConfigurationItemResponseModel = {
    name: string;
    data: string;
};

export type ServerConfigurationResponseModel = {
    allowPasswordReset: boolean;
    versionCheckPeriod: number;
};

export type ServerInformationResponseModel = {
    version: string;
    assemblyVersion: string;
    baseUtcOffset: string;
    runtimeMode: RuntimeModeModel;
};

export type ServerStatusResponseModel = {
    serverStatus: RuntimeLevelModel;
};

export type ServerTroubleshootingResponseModel = {
    items: Array<(ServerConfigurationItemResponseModel)>;
};

export type SetAvatarRequestModel = {
    file: (ReferenceByIdModel);
};

export type SortingRequestModel = {
    parent?: ((ReferenceByIdModel) | null);
    sorting: Array<(ItemSortingRequestModel)>;
};

export type StaticFileItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export enum StatusResultTypeModel {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    INFO = 'Info'
}

export type StylesheetFolderResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
};

export type StylesheetItemResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    isFolder: boolean;
};

export type StylesheetResponseModel = {
    path: string;
    name: string;
    parent?: ((FileSystemFolderModel) | null);
    content: string;
};

export type TagResponseModel = {
    id: string;
    text?: (string) | null;
    group?: (string) | null;
    nodeCount: number;
};

export enum TelemetryLevelModel {
    MINIMAL = 'Minimal',
    BASIC = 'Basic',
    DETAILED = 'Detailed'
}

export type TelemetryRequestModel = {
    telemetryLevel: TelemetryLevelModel;
};

export type TelemetryResponseModel = {
    telemetryLevel: TelemetryLevelModel;
};

export type TemplateConfigurationResponseModel = {
    disabled: boolean;
};

export type TemplateItemResponseModel = {
    id: string;
    name: string;
    alias: string;
};

export type TemplateQueryExecuteFilterPresentationModel = {
    propertyAlias: string;
    constraintValue: string;
    operator: OperatorModel;
};

export type TemplateQueryExecuteModel = {
    rootDocument?: ((ReferenceByIdModel) | null);
    documentTypeAlias?: (string) | null;
    filters?: Array<(TemplateQueryExecuteFilterPresentationModel)> | null;
    sort?: ((TemplateQueryExecuteSortModel) | null);
    take: number;
};

export type TemplateQueryExecuteSortModel = {
    propertyAlias: string;
    direction?: (string) | null;
};

export type TemplateQueryOperatorModel = {
    operator: OperatorModel;
    applicableTypes: Array<TemplateQueryPropertyTypeModel>;
};

export type TemplateQueryPropertyPresentationModel = {
    alias: string;
    type: TemplateQueryPropertyTypeModel;
};

export enum TemplateQueryPropertyTypeModel {
    STRING = 'String',
    DATE_TIME = 'DateTime',
    INTEGER = 'Integer'
}

export type TemplateQueryResultItemPresentationModel = {
    icon: string;
    name: string;
};

export type TemplateQueryResultResponseModel = {
    queryExpression: string;
    sampleResults: Array<(TemplateQueryResultItemPresentationModel)>;
    resultCount: number;
    executionTime: number;
};

export type TemplateQuerySettingsResponseModel = {
    documentTypeAliases: Array<(string)>;
    properties: Array<(TemplateQueryPropertyPresentationModel)>;
    operators: Array<(TemplateQueryOperatorModel)>;
};

export type TemplateResponseModel = {
    name: string;
    alias: string;
    content?: (string) | null;
    id: string;
    masterTemplate?: ((ReferenceByIdModel) | null);
};

export type TemporaryFileConfigurationResponseModel = {
    imageFileTypes: Array<(string)>;
    disallowedUploadedFilesExtensions: Array<(string)>;
    allowedUploadedFileExtensions: Array<(string)>;
    maxFileSize?: (number) | null;
};

export type TemporaryFileResponseModel = {
    id: string;
    availableUntil?: (string) | null;
    fileName: string;
};

export type TrackedReferenceDocumentTypeModel = {
    icon?: (string) | null;
    alias?: (string) | null;
    name?: (string) | null;
};

export type TrackedReferenceMediaTypeModel = {
    icon?: (string) | null;
    alias?: (string) | null;
    name?: (string) | null;
};

export type UnknownTypePermissionPresentationModel = {
    $type: string;
    verbs: Array<(string)>;
    context: string;
};

export type UnlockUsersRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
};

export type UnpublishDocumentRequestModel = {
    cultures?: Array<(string)> | null;
};

export type UpdateDataTypeRequestModel = {
    name: string;
    editorAlias: string;
    editorUiAlias: string;
    values: Array<(DataTypePropertyPresentationModel)>;
};

export type UpdateDictionaryItemRequestModel = {
    name: string;
    translations: Array<(DictionaryItemTranslationModel)>;
};

export type UpdateDocumentBlueprintRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
};

export type UpdateDocumentNotificationsRequestModel = {
    subscribedActionIds: Array<(string)>;
};

export type UpdateDocumentRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    template?: ((ReferenceByIdModel) | null);
};

export type UpdateDocumentTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type UpdateDocumentTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type UpdateDocumentTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(UpdateDocumentTypePropertyTypeRequestModel)>;
    containers: Array<(UpdateDocumentTypePropertyTypeContainerRequestModel)>;
    allowedTemplates: Array<(ReferenceByIdModel)>;
    defaultTemplate?: ((ReferenceByIdModel) | null);
    cleanup: (DocumentTypeCleanupModel);
    allowedDocumentTypes: Array<(DocumentTypeSortModel)>;
    compositions: Array<(DocumentTypeCompositionModel)>;
};

export type UpdateDomainsRequestModel = {
    defaultIsoCode?: (string) | null;
    domains: Array<(DomainPresentationModel)>;
};

export type UpdateFolderResponseModel = {
    name: string;
};

export type UpdateLanguageRequestModel = {
    name: string;
    isDefault: boolean;
    isMandatory: boolean;
    fallbackIsoCode?: (string) | null;
};

export type UpdateMediaRequestModel = {
    values: Array<(MediaValueModel)>;
    variants: Array<(MediaVariantRequestModel)>;
};

export type UpdateMediaTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type UpdateMediaTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
};

export type UpdateMediaTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(UpdateMediaTypePropertyTypeRequestModel)>;
    containers: Array<(UpdateMediaTypePropertyTypeContainerRequestModel)>;
    allowedMediaTypes: Array<(MediaTypeSortModel)>;
    compositions: Array<(MediaTypeCompositionModel)>;
};

export type UpdateMemberGroupRequestModel = {
    name: string;
};

export type UpdateMemberRequestModel = {
    values: Array<(MemberValueModel)>;
    variants: Array<(MemberVariantRequestModel)>;
    email: string;
    username: string;
    oldPassword?: (string) | null;
    newPassword?: (string) | null;
    groups?: Array<(string)> | null;
    isApproved: boolean;
    isLockedOut: boolean;
    isTwoFactorEnabled: boolean;
};

export type UpdateMemberTypePropertyTypeContainerRequestModel = {
    id: string;
    parent?: ((ReferenceByIdModel) | null);
    name?: (string) | null;
    type: string;
    sortOrder: number;
};

export type UpdateMemberTypePropertyTypeRequestModel = {
    id: string;
    container?: ((ReferenceByIdModel) | null);
    sortOrder: number;
    alias: string;
    name: string;
    description?: (string) | null;
    dataType: (ReferenceByIdModel);
    variesByCulture: boolean;
    variesBySegment: boolean;
    validation: (PropertyTypeValidationModel);
    appearance: (PropertyTypeAppearanceModel);
    isSensitive: boolean;
    visibility: (MemberTypePropertyTypeVisibilityModel);
};

export type UpdateMemberTypeRequestModel = {
    alias: string;
    name: string;
    description?: (string) | null;
    icon: string;
    allowedAsRoot: boolean;
    variesByCulture: boolean;
    variesBySegment: boolean;
    collection?: ((ReferenceByIdModel) | null);
    isElement: boolean;
    properties: Array<(UpdateMemberTypePropertyTypeRequestModel)>;
    containers: Array<(UpdateMemberTypePropertyTypeContainerRequestModel)>;
    compositions: Array<(MemberTypeCompositionModel)>;
};

export type UpdatePackageRequestModel = {
    name: string;
    contentNodeId?: (string) | null;
    contentLoadChildNodes: boolean;
    mediaIds: Array<(string)>;
    mediaLoadChildNodes: boolean;
    documentTypes: Array<(string)>;
    mediaTypes: Array<(string)>;
    dataTypes: Array<(string)>;
    templates: Array<(string)>;
    partialViews: Array<(string)>;
    stylesheets: Array<(string)>;
    scripts: Array<(string)>;
    languages: Array<(string)>;
    dictionaryItems: Array<(string)>;
    readonly packagePath: string;
};

export type UpdatePartialViewRequestModel = {
    content: string;
};

export type UpdateScriptRequestModel = {
    content: string;
};

export type UpdateStylesheetRequestModel = {
    content: string;
};

export type UpdateTemplateRequestModel = {
    name: string;
    alias: string;
    content?: (string) | null;
};

export type UpdateUserDataRequestModel = {
    group: string;
    identifier: string;
    value: string;
    key: string;
};

export type UpdateUserGroupRequestModel = {
    name: string;
    alias: string;
    icon?: (string) | null;
    sections: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    documentStartNode?: ((ReferenceByIdModel) | null);
    documentRootAccess: boolean;
    mediaStartNode?: ((ReferenceByIdModel) | null);
    mediaRootAccess: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
};

export type UpdateUserGroupsOnUserRequestModel = {
    userIds: Array<(ReferenceByIdModel)>;
    userGroupIds: Array<(ReferenceByIdModel)>;
};

export type UpdateUserRequestModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    languageIsoCode: string;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
};

export type UpdateWebhookRequestModel = {
    enabled: boolean;
    url: string;
    contentTypeKeys: Array<(string)>;
    headers: {
        [key: string]: (string);
    };
    events: Array<(string)>;
};

export type UpgradeCheckResponseModel = {
    type: string;
    comment: string;
    url: string;
};

export type UpgradeSettingsResponseModel = {
    currentState: string;
    newState: string;
    newVersion: string;
    oldVersion: string;
    readonly reportUrl: string;
};

export type UserConfigurationResponseModel = {
    canInviteUsers: boolean;
    usernameIsEmail: boolean;
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type UserDataModel = {
    group: string;
    identifier: string;
    value: string;
};

export enum UserDataOperationStatusModel {
    SUCCESS = 'Success',
    NOT_FOUND = 'NotFound',
    USER_NOT_FOUND = 'UserNotFound',
    ALREADY_EXISTS = 'AlreadyExists'
}

export type UserDataResponseModel = {
    group: string;
    identifier: string;
    value: string;
    key: string;
};

export type UserExternalLoginProviderModel = {
    providerSchemeName: string;
    providerKey?: (string) | null;
    isLinkedOnUser: boolean;
    hasManualLinkingEnabled: boolean;
};

export type UserGroupItemResponseModel = {
    id: string;
    name: string;
    icon?: (string) | null;
    alias?: (string) | null;
};

export type UserGroupResponseModel = {
    name: string;
    alias: string;
    icon?: (string) | null;
    sections: Array<(string)>;
    languages: Array<(string)>;
    hasAccessToAllLanguages: boolean;
    documentStartNode?: ((ReferenceByIdModel) | null);
    documentRootAccess: boolean;
    mediaStartNode?: ((ReferenceByIdModel) | null);
    mediaRootAccess: boolean;
    fallbackPermissions: Array<(string)>;
    permissions: Array<(DocumentPermissionPresentationModel | UnknownTypePermissionPresentationModel)>;
    id: string;
    isDeletable: boolean;
    aliasCanBeChanged: boolean;
};

export type UserInstallRequestModel = {
    name: string;
    email: string;
    password: string;
    readonly subscribeToNewsletter: boolean;
};

export type UserItemResponseModel = {
    id: string;
    name: string;
    avatarUrls: Array<(string)>;
    kind: UserKindModel;
};

export enum UserKindModel {
    DEFAULT = 'Default',
    API = 'Api'
}

export enum UserOrderModel {
    USER_NAME = 'UserName',
    LANGUAGE = 'Language',
    NAME = 'Name',
    EMAIL = 'Email',
    ID = 'Id',
    CREATE_DATE = 'CreateDate',
    UPDATE_DATE = 'UpdateDate',
    IS_APPROVED = 'IsApproved',
    IS_LOCKED_OUT = 'IsLockedOut',
    LAST_LOGIN_DATE = 'LastLoginDate'
}

export type UserPermissionModel = {
    nodeKey: string;
    permissions: Array<(string)>;
};

export type UserPermissionsResponseModel = {
    permissions: Array<(UserPermissionModel)>;
};

export type UserResponseModel = {
    email: string;
    userName: string;
    name: string;
    userGroupIds: Array<(ReferenceByIdModel)>;
    id: string;
    languageIsoCode?: (string) | null;
    documentStartNodeIds: Array<(ReferenceByIdModel)>;
    hasDocumentRootAccess: boolean;
    mediaStartNodeIds: Array<(ReferenceByIdModel)>;
    hasMediaRootAccess: boolean;
    avatarUrls: Array<(string)>;
    state: UserStateModel;
    failedLoginAttempts: number;
    createDate: string;
    updateDate: string;
    lastLoginDate?: (string) | null;
    lastLockoutDate?: (string) | null;
    lastPasswordChangeDate?: (string) | null;
    isAdmin: boolean;
    kind: UserKindModel;
};

export type UserSettingsPresentationModel = {
    minCharLength: number;
    minNonAlphaNumericLength: number;
    consentLevels: Array<(ConsentLevelPresentationModel)>;
};

export enum UserStateModel {
    ACTIVE = 'Active',
    DISABLED = 'Disabled',
    LOCKED_OUT = 'LockedOut',
    INVITED = 'Invited',
    INACTIVE = 'Inactive',
    ALL = 'All'
}

export type UserTwoFactorProviderModel = {
    providerName: string;
    isEnabledOnUser: boolean;
};

export type ValidateUpdateDocumentRequestModel = {
    values: Array<(DocumentValueModel)>;
    variants: Array<(DocumentVariantRequestModel)>;
    template?: ((ReferenceByIdModel) | null);
    cultures?: Array<(string)> | null;
};

export type VariantItemResponseModel = {
    name: string;
    culture?: (string) | null;
};

export type VerifyInviteUserRequestModel = {
    user: (ReferenceByIdModel);
    token: string;
};

export type VerifyInviteUserResponseModel = {
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type VerifyResetPasswordResponseModel = {
    passwordConfiguration: (PasswordConfigurationResponseModel);
};

export type VerifyResetPasswordTokenRequestModel = {
    user: (ReferenceByIdModel);
    resetCode: string;
};

export type WebhookEventModel = {
    eventName: string;
    eventType: string;
    alias: string;
};

export type WebhookEventResponseModel = {
    eventName: string;
    eventType: string;
    alias: string;
};

export type WebhookItemResponseModel = {
    enabled: boolean;
    name: string;
    events: string;
    url: string;
    types: string;
};

export type WebhookResponseModel = {
    enabled: boolean;
    url: string;
    contentTypeKeys: Array<(string)>;
    headers: {
        [key: string]: (string);
    };
    id: string;
    events: Array<(WebhookEventResponseModel)>;
};

export type GetCultureData = {
    skip?: number;
    take?: number;
};

export type GetCultureResponse = ((PagedCultureReponseModel));

export type PostDataTypeData = {
    requestBody?: (CreateDataTypeRequestModel);
};

export type PostDataTypeResponse = (string);

export type GetDataTypeByIdData = {
    id: string;
};

export type GetDataTypeByIdResponse = ((DataTypeResponseModel));

export type DeleteDataTypeByIdData = {
    id: string;
};

export type DeleteDataTypeByIdResponse = (string);

export type PutDataTypeByIdData = {
    id: string;
    requestBody?: (UpdateDataTypeRequestModel);
};

export type PutDataTypeByIdResponse = (string);

export type PostDataTypeByIdCopyData = {
    id: string;
    requestBody?: (CopyDataTypeRequestModel);
};

export type PostDataTypeByIdCopyResponse = (string);

export type GetDataTypeByIdIsUsedData = {
    id: string;
};

export type GetDataTypeByIdIsUsedResponse = (boolean);

export type PutDataTypeByIdMoveData = {
    id: string;
    requestBody?: (MoveDataTypeRequestModel);
};

export type PutDataTypeByIdMoveResponse = (string);

export type GetDataTypeByIdReferencesData = {
    id: string;
};

export type GetDataTypeByIdReferencesResponse = (Array<(DataTypeReferenceResponseModel)>);

export type GetDataTypeConfigurationResponse = ((DatatypeConfigurationResponseModel));

export type PostDataTypeFolderData = {
    requestBody?: (CreateFolderRequestModel);
};

export type PostDataTypeFolderResponse = (string);

export type GetDataTypeFolderByIdData = {
    id: string;
};

export type GetDataTypeFolderByIdResponse = ((FolderResponseModel));

export type DeleteDataTypeFolderByIdData = {
    id: string;
};

export type DeleteDataTypeFolderByIdResponse = (string);

export type PutDataTypeFolderByIdData = {
    id: string;
    requestBody?: (UpdateFolderResponseModel);
};

export type PutDataTypeFolderByIdResponse = (string);

export type GetFilterDataTypeData = {
    editorAlias?: string;
    editorUiAlias?: string;
    name?: string;
    skip?: number;
    take?: number;
};

export type GetFilterDataTypeResponse = ((PagedDataTypeItemResponseModel));

export type GetItemDataTypeData = {
    id?: Array<(string)>;
};

export type GetItemDataTypeResponse = (Array<(DataTypeItemResponseModel)>);

export type GetItemDataTypeSearchData = {
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemDataTypeSearchResponse = ((PagedModelDataTypeItemResponseModel));

export type GetTreeDataTypeAncestorsData = {
    descendantId?: string;
};

export type GetTreeDataTypeAncestorsResponse = (Array<(DataTypeTreeItemResponseModel)>);

export type GetTreeDataTypeChildrenData = {
    foldersOnly?: boolean;
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeDataTypeChildrenResponse = ((PagedDataTypeTreeItemResponseModel));

export type GetTreeDataTypeRootData = {
    foldersOnly?: boolean;
    skip?: number;
    take?: number;
};

export type GetTreeDataTypeRootResponse = ((PagedDataTypeTreeItemResponseModel));

export type GetDictionaryData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetDictionaryResponse = ((PagedDictionaryOverviewResponseModel));

export type PostDictionaryData = {
    requestBody?: (CreateDictionaryItemRequestModel);
};

export type PostDictionaryResponse = (string);

export type GetDictionaryByIdData = {
    id: string;
};

export type GetDictionaryByIdResponse = ((DictionaryItemResponseModel));

export type DeleteDictionaryByIdData = {
    id: string;
};

export type DeleteDictionaryByIdResponse = (string);

export type PutDictionaryByIdData = {
    id: string;
    requestBody?: (UpdateDictionaryItemRequestModel);
};

export type PutDictionaryByIdResponse = (string);

export type GetDictionaryByIdExportData = {
    id: string;
    includeChildren?: boolean;
};

export type GetDictionaryByIdExportResponse = (((Blob | File)));

export type PutDictionaryByIdMoveData = {
    id: string;
    requestBody?: (MoveDictionaryRequestModel);
};

export type PutDictionaryByIdMoveResponse = (string);

export type PostDictionaryImportData = {
    requestBody?: (ImportDictionaryRequestModel);
};

export type PostDictionaryImportResponse = (string);

export type GetItemDictionaryData = {
    id?: Array<(string)>;
};

export type GetItemDictionaryResponse = (Array<(DictionaryItemItemResponseModel)>);

export type GetTreeDictionaryAncestorsData = {
    descendantId?: string;
};

export type GetTreeDictionaryAncestorsResponse = (Array<(NamedEntityTreeItemResponseModel)>);

export type GetTreeDictionaryChildrenData = {
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeDictionaryChildrenResponse = ((PagedNamedEntityTreeItemResponseModel));

export type GetTreeDictionaryRootData = {
    skip?: number;
    take?: number;
};

export type GetTreeDictionaryRootResponse = ((PagedNamedEntityTreeItemResponseModel));

export type GetCollectionDocumentByIdData = {
    dataTypeId?: string;
    filter?: string;
    id: string;
    orderBy?: string;
    orderCulture?: string;
    orderDirection?: DirectionModel;
    skip?: number;
    take?: number;
};

export type GetCollectionDocumentByIdResponse = ((PagedDocumentCollectionResponseModel));

export type PostDocumentData = {
    requestBody?: (CreateDocumentRequestModel);
};

export type PostDocumentResponse = (string);

export type GetDocumentByIdData = {
    id: string;
};

export type GetDocumentByIdResponse = ((DocumentResponseModel));

export type DeleteDocumentByIdData = {
    id: string;
};

export type DeleteDocumentByIdResponse = (string);

export type PutDocumentByIdData = {
    id: string;
    requestBody?: (UpdateDocumentRequestModel);
};

export type PutDocumentByIdResponse = (string);

export type GetDocumentByIdAuditLogData = {
    id: string;
    orderDirection?: DirectionModel;
    sinceDate?: string;
    skip?: number;
    take?: number;
};

export type GetDocumentByIdAuditLogResponse = ((PagedAuditLogResponseModel));

export type PostDocumentByIdCopyData = {
    id: string;
    requestBody?: (CopyDocumentRequestModel);
};

export type PostDocumentByIdCopyResponse = (string);

export type GetDocumentByIdDomainsData = {
    id: string;
};

export type GetDocumentByIdDomainsResponse = ((DomainsResponseModel));

export type PutDocumentByIdDomainsData = {
    id: string;
    requestBody?: (UpdateDomainsRequestModel);
};

export type PutDocumentByIdDomainsResponse = (string);

export type PutDocumentByIdMoveData = {
    id: string;
    requestBody?: (MoveDocumentRequestModel);
};

export type PutDocumentByIdMoveResponse = (string);

export type PutDocumentByIdMoveToRecycleBinData = {
    id: string;
};

export type PutDocumentByIdMoveToRecycleBinResponse = (string);

export type GetDocumentByIdNotificationsData = {
    id: string;
};

export type GetDocumentByIdNotificationsResponse = (Array<(DocumentNotificationResponseModel)>);

export type PutDocumentByIdNotificationsData = {
    id: string;
    requestBody?: (UpdateDocumentNotificationsRequestModel);
};

export type PutDocumentByIdNotificationsResponse = (string);

export type PostDocumentByIdPublicAccessData = {
    id: string;
    requestBody?: (PublicAccessRequestModel);
};

export type PostDocumentByIdPublicAccessResponse = (string);

export type DeleteDocumentByIdPublicAccessData = {
    id: string;
};

export type DeleteDocumentByIdPublicAccessResponse = (string);

export type GetDocumentByIdPublicAccessData = {
    id: string;
};

export type GetDocumentByIdPublicAccessResponse = ((PublicAccessResponseModel));

export type PutDocumentByIdPublicAccessData = {
    id: string;
    requestBody?: (PublicAccessRequestModel);
};

export type PutDocumentByIdPublicAccessResponse = (string);

export type PutDocumentByIdPublishData = {
    id: string;
    requestBody?: (PublishDocumentRequestModel);
};

export type PutDocumentByIdPublishResponse = (string);

export type PutDocumentByIdPublishWithDescendantsData = {
    id: string;
    requestBody?: (PublishDocumentWithDescendantsRequestModel);
};

export type PutDocumentByIdPublishWithDescendantsResponse = (string);

export type GetDocumentByIdPublishedData = {
    id: string;
};

export type GetDocumentByIdPublishedResponse = ((PublishedDocumentResponseModel));

export type GetDocumentByIdReferencedByData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetDocumentByIdReferencedByResponse = ((PagedIReferenceResponseModel));

export type GetDocumentByIdReferencedDescendantsData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetDocumentByIdReferencedDescendantsResponse = ((PagedReferenceByIdModel));

export type PutDocumentByIdUnpublishData = {
    id: string;
    requestBody?: (UnpublishDocumentRequestModel);
};

export type PutDocumentByIdUnpublishResponse = (string);

export type PutDocumentByIdValidateData = {
    id: string;
    requestBody?: (UpdateDocumentRequestModel);
};

export type PutDocumentByIdValidateResponse = (string);

export type PutUmbracoManagementApiV11DocumentByIdValidate11Data = {
    id: string;
    requestBody?: (ValidateUpdateDocumentRequestModel);
};

export type PutUmbracoManagementApiV11DocumentByIdValidate11Response = (string);

export type GetDocumentAreReferencedData = {
    id?: Array<(string)>;
    skip?: number;
    take?: number;
};

export type GetDocumentAreReferencedResponse = ((PagedReferenceByIdModel));

export type GetDocumentConfigurationResponse = ((DocumentConfigurationResponseModel));

export type PutDocumentSortData = {
    requestBody?: (SortingRequestModel);
};

export type PutDocumentSortResponse = (string);

export type GetDocumentUrlsData = {
    id?: Array<(string)>;
};

export type GetDocumentUrlsResponse = (Array<(DocumentUrlInfoResponseModel)>);

export type PostDocumentValidateData = {
    requestBody?: (CreateDocumentRequestModel);
};

export type PostDocumentValidateResponse = (string);

export type GetItemDocumentData = {
    id?: Array<(string)>;
};

export type GetItemDocumentResponse = (Array<(DocumentItemResponseModel)>);

export type GetItemDocumentSearchData = {
    parentId?: string;
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemDocumentSearchResponse = ((PagedModelDocumentItemResponseModel));

export type DeleteRecycleBinDocumentResponse = (string);

export type DeleteRecycleBinDocumentByIdData = {
    id: string;
};

export type DeleteRecycleBinDocumentByIdResponse = (string);

export type GetRecycleBinDocumentByIdOriginalParentData = {
    id: string;
};

export type GetRecycleBinDocumentByIdOriginalParentResponse = ((ReferenceByIdModel));

export type PutRecycleBinDocumentByIdRestoreData = {
    id: string;
    requestBody?: (MoveMediaRequestModel);
};

export type PutRecycleBinDocumentByIdRestoreResponse = (string);

export type GetRecycleBinDocumentChildrenData = {
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetRecycleBinDocumentChildrenResponse = ((PagedDocumentRecycleBinItemResponseModel));

export type GetRecycleBinDocumentRootData = {
    skip?: number;
    take?: number;
};

export type GetRecycleBinDocumentRootResponse = ((PagedDocumentRecycleBinItemResponseModel));

export type GetTreeDocumentAncestorsData = {
    descendantId?: string;
};

export type GetTreeDocumentAncestorsResponse = (Array<(DocumentTreeItemResponseModel)>);

export type GetTreeDocumentChildrenData = {
    dataTypeId?: string;
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeDocumentChildrenResponse = ((PagedDocumentTreeItemResponseModel));

export type GetTreeDocumentRootData = {
    dataTypeId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeDocumentRootResponse = ((PagedDocumentTreeItemResponseModel));

export type PostDocumentBlueprintData = {
    requestBody?: (CreateDocumentBlueprintRequestModel);
};

export type PostDocumentBlueprintResponse = (string);

export type GetDocumentBlueprintByIdData = {
    id: string;
};

export type GetDocumentBlueprintByIdResponse = ((DocumentBlueprintResponseModel));

export type DeleteDocumentBlueprintByIdData = {
    id: string;
};

export type DeleteDocumentBlueprintByIdResponse = (string);

export type PutDocumentBlueprintByIdData = {
    id: string;
    requestBody?: (UpdateDocumentBlueprintRequestModel);
};

export type PutDocumentBlueprintByIdResponse = (string);

export type PutDocumentBlueprintByIdMoveData = {
    id: string;
    requestBody?: (MoveDocumentBlueprintRequestModel);
};

export type PutDocumentBlueprintByIdMoveResponse = (string);

export type PostDocumentBlueprintFolderData = {
    requestBody?: (CreateFolderRequestModel);
};

export type PostDocumentBlueprintFolderResponse = (string);

export type GetDocumentBlueprintFolderByIdData = {
    id: string;
};

export type GetDocumentBlueprintFolderByIdResponse = ((FolderResponseModel));

export type DeleteDocumentBlueprintFolderByIdData = {
    id: string;
};

export type DeleteDocumentBlueprintFolderByIdResponse = (string);

export type PutDocumentBlueprintFolderByIdData = {
    id: string;
    requestBody?: (UpdateFolderResponseModel);
};

export type PutDocumentBlueprintFolderByIdResponse = (string);

export type PostDocumentBlueprintFromDocumentData = {
    requestBody?: (CreateDocumentBlueprintFromDocumentRequestModel);
};

export type PostDocumentBlueprintFromDocumentResponse = (string);

export type GetItemDocumentBlueprintData = {
    id?: Array<(string)>;
};

export type GetItemDocumentBlueprintResponse = (Array<(DocumentBlueprintItemResponseModel)>);

export type GetTreeDocumentBlueprintAncestorsData = {
    descendantId?: string;
};

export type GetTreeDocumentBlueprintAncestorsResponse = (Array<(DocumentBlueprintTreeItemResponseModel)>);

export type GetTreeDocumentBlueprintChildrenData = {
    foldersOnly?: boolean;
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeDocumentBlueprintChildrenResponse = ((PagedDocumentBlueprintTreeItemResponseModel));

export type GetTreeDocumentBlueprintRootData = {
    foldersOnly?: boolean;
    skip?: number;
    take?: number;
};

export type GetTreeDocumentBlueprintRootResponse = ((PagedDocumentBlueprintTreeItemResponseModel));

export type PostDocumentTypeData = {
    requestBody?: (CreateDocumentTypeRequestModel);
};

export type PostDocumentTypeResponse = (string);

export type GetDocumentTypeByIdData = {
    id: string;
};

export type GetDocumentTypeByIdResponse = ((DocumentTypeResponseModel));

export type DeleteDocumentTypeByIdData = {
    id: string;
};

export type DeleteDocumentTypeByIdResponse = (string);

export type PutDocumentTypeByIdData = {
    id: string;
    requestBody?: (UpdateDocumentTypeRequestModel);
};

export type PutDocumentTypeByIdResponse = (string);

export type GetDocumentTypeByIdAllowedChildrenData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetDocumentTypeByIdAllowedChildrenResponse = ((PagedAllowedDocumentTypeModel));

export type GetDocumentTypeByIdBlueprintData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetDocumentTypeByIdBlueprintResponse = ((PagedDocumentTypeBlueprintItemResponseModel));

export type GetDocumentTypeByIdCompositionReferencesData = {
    id: string;
};

export type GetDocumentTypeByIdCompositionReferencesResponse = (Array<(DocumentTypeCompositionResponseModel)>);

export type PostDocumentTypeByIdCopyData = {
    id: string;
    requestBody?: (CopyDocumentTypeRequestModel);
};

export type PostDocumentTypeByIdCopyResponse = (string);

export type GetDocumentTypeByIdExportData = {
    id: string;
};

export type GetDocumentTypeByIdExportResponse = (((Blob | File)));

export type PutDocumentTypeByIdImportData = {
    id: string;
    requestBody?: (ImportDocumentTypeRequestModel);
};

export type PutDocumentTypeByIdImportResponse = (string);

export type PutDocumentTypeByIdMoveData = {
    id: string;
    requestBody?: (MoveDocumentTypeRequestModel);
};

export type PutDocumentTypeByIdMoveResponse = (string);

export type GetDocumentTypeAllowedAtRootData = {
    skip?: number;
    take?: number;
};

export type GetDocumentTypeAllowedAtRootResponse = ((PagedAllowedDocumentTypeModel));

export type PostDocumentTypeAvailableCompositionsData = {
    requestBody?: (DocumentTypeCompositionRequestModel);
};

export type PostDocumentTypeAvailableCompositionsResponse = (Array<(AvailableDocumentTypeCompositionResponseModel)>);

export type GetDocumentTypeConfigurationResponse = ((DocumentTypeConfigurationResponseModel));

export type PostDocumentTypeFolderData = {
    requestBody?: (CreateFolderRequestModel);
};

export type PostDocumentTypeFolderResponse = (string);

export type GetDocumentTypeFolderByIdData = {
    id: string;
};

export type GetDocumentTypeFolderByIdResponse = ((FolderResponseModel));

export type DeleteDocumentTypeFolderByIdData = {
    id: string;
};

export type DeleteDocumentTypeFolderByIdResponse = (string);

export type PutDocumentTypeFolderByIdData = {
    id: string;
    requestBody?: (UpdateFolderResponseModel);
};

export type PutDocumentTypeFolderByIdResponse = (string);

export type PostDocumentTypeImportData = {
    requestBody?: (ImportDocumentTypeRequestModel);
};

export type PostDocumentTypeImportResponse = (string);

export type GetItemDocumentTypeData = {
    id?: Array<(string)>;
};

export type GetItemDocumentTypeResponse = (Array<(DocumentTypeItemResponseModel)>);

export type GetItemDocumentTypeSearchData = {
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemDocumentTypeSearchResponse = ((PagedModelDocumentTypeItemResponseModel));

export type GetTreeDocumentTypeAncestorsData = {
    descendantId?: string;
};

export type GetTreeDocumentTypeAncestorsResponse = (Array<(DocumentTypeTreeItemResponseModel)>);

export type GetTreeDocumentTypeChildrenData = {
    foldersOnly?: boolean;
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeDocumentTypeChildrenResponse = ((PagedDocumentTypeTreeItemResponseModel));

export type GetTreeDocumentTypeRootData = {
    foldersOnly?: boolean;
    skip?: number;
    take?: number;
};

export type GetTreeDocumentTypeRootResponse = ((PagedDocumentTypeTreeItemResponseModel));

export type GetDocumentVersionData = {
    culture?: string;
    documentId: string;
    skip?: number;
    take?: number;
};

export type GetDocumentVersionResponse = ((PagedDocumentVersionItemResponseModel));

export type GetDocumentVersionByIdData = {
    id: string;
};

export type GetDocumentVersionByIdResponse = ((DocumentVersionResponseModel));

export type PutDocumentVersionByIdPreventCleanupData = {
    id: string;
    preventCleanup?: boolean;
};

export type PutDocumentVersionByIdPreventCleanupResponse = (string);

export type PostDocumentVersionByIdRollbackData = {
    culture?: string;
    id: string;
};

export type PostDocumentVersionByIdRollbackResponse = (string);

export type PostDynamicRootQueryData = {
    requestBody?: (DynamicRootRequestModel);
};

export type PostDynamicRootQueryResponse = ((DynamicRootResponseModel));

export type GetDynamicRootStepsResponse = (Array<(string)>);

export type GetHealthCheckGroupData = {
    skip?: number;
    take?: number;
};

export type GetHealthCheckGroupResponse = ((PagedHealthCheckGroupResponseModel));

export type GetHealthCheckGroupByNameData = {
    name: string;
};

export type GetHealthCheckGroupByNameResponse = ((HealthCheckGroupPresentationModel));

export type PostHealthCheckGroupByNameCheckData = {
    name: string;
};

export type PostHealthCheckGroupByNameCheckResponse = ((HealthCheckGroupWithResultResponseModel));

export type PostHealthCheckExecuteActionData = {
    requestBody?: (HealthCheckActionRequestModel);
};

export type PostHealthCheckExecuteActionResponse = ((HealthCheckResultResponseModel));

export type GetHelpData = {
    baseUrl?: string;
    section?: string;
    skip?: number;
    take?: number;
    tree?: string;
};

export type GetHelpResponse = ((PagedHelpPageResponseModel));

export type GetImagingResizeUrlsData = {
    height?: number;
    id?: Array<(string)>;
    mode?: ImageCropModeModel;
    width?: number;
};

export type GetImagingResizeUrlsResponse = (Array<(MediaUrlInfoResponseModel)>);

export type GetImportAnalyzeData = {
    temporaryFileId?: string;
};

export type GetImportAnalyzeResponse = ((EntityImportAnalysisResponseModel));

export type GetIndexerData = {
    skip?: number;
    take?: number;
};

export type GetIndexerResponse = ((PagedIndexResponseModel));

export type GetIndexerByIndexNameData = {
    indexName: string;
};

export type GetIndexerByIndexNameResponse = ((IndexResponseModel));

export type PostIndexerByIndexNameRebuildData = {
    indexName: string;
};

export type PostIndexerByIndexNameRebuildResponse = (string);

export type GetInstallSettingsResponse = ((InstallSettingsResponseModel));

export type PostInstallSetupData = {
    requestBody?: (InstallRequestModel);
};

export type PostInstallSetupResponse = (string);

export type PostInstallValidateDatabaseData = {
    requestBody?: (DatabaseInstallRequestModel);
};

export type PostInstallValidateDatabaseResponse = (string);

export type GetItemLanguageData = {
    isoCode?: Array<(string)>;
};

export type GetItemLanguageResponse = (Array<(LanguageItemResponseModel)>);

export type GetItemLanguageDefaultResponse = ((LanguageItemResponseModel));

export type GetLanguageData = {
    skip?: number;
    take?: number;
};

export type GetLanguageResponse = ((PagedLanguageResponseModel));

export type PostLanguageData = {
    requestBody?: (CreateLanguageRequestModel);
};

export type PostLanguageResponse = (string);

export type GetLanguageByIsoCodeData = {
    isoCode: string;
};

export type GetLanguageByIsoCodeResponse = ((LanguageResponseModel));

export type DeleteLanguageByIsoCodeData = {
    isoCode: string;
};

export type DeleteLanguageByIsoCodeResponse = (string);

export type PutLanguageByIsoCodeData = {
    isoCode: string;
    requestBody?: (UpdateLanguageRequestModel);
};

export type PutLanguageByIsoCodeResponse = (string);

export type GetLogViewerLevelData = {
    skip?: number;
    take?: number;
};

export type GetLogViewerLevelResponse = ((PagedLoggerResponseModel));

export type GetLogViewerLevelCountData = {
    endDate?: string;
    startDate?: string;
};

export type GetLogViewerLevelCountResponse = ((LogLevelCountsReponseModel));

export type GetLogViewerLogData = {
    endDate?: string;
    filterExpression?: string;
    logLevel?: Array<LogLevelModel>;
    orderDirection?: DirectionModel;
    skip?: number;
    startDate?: string;
    take?: number;
};

export type GetLogViewerLogResponse = ((PagedLogMessageResponseModel));

export type GetLogViewerMessageTemplateData = {
    endDate?: string;
    skip?: number;
    startDate?: string;
    take?: number;
};

export type GetLogViewerMessageTemplateResponse = ((PagedLogTemplateResponseModel));

export type GetLogViewerSavedSearchData = {
    skip?: number;
    take?: number;
};

export type GetLogViewerSavedSearchResponse = ((PagedSavedLogSearchResponseModel));

export type PostLogViewerSavedSearchData = {
    requestBody?: (SavedLogSearchRequestModel);
};

export type PostLogViewerSavedSearchResponse = (string);

export type GetLogViewerSavedSearchByNameData = {
    name: string;
};

export type GetLogViewerSavedSearchByNameResponse = ((SavedLogSearchResponseModel));

export type DeleteLogViewerSavedSearchByNameData = {
    name: string;
};

export type DeleteLogViewerSavedSearchByNameResponse = (string);

export type GetLogViewerValidateLogsSizeData = {
    endDate?: string;
    startDate?: string;
};

export type GetLogViewerValidateLogsSizeResponse = (unknown);

export type GetManifestManifestResponse = (Array<(ManifestResponseModel)>);

export type GetManifestManifestPrivateResponse = (Array<(ManifestResponseModel)>);

export type GetManifestManifestPublicResponse = (Array<(ManifestResponseModel)>);

export type GetCollectionMediaData = {
    dataTypeId?: string;
    filter?: string;
    id?: string;
    orderBy?: string;
    orderDirection?: DirectionModel;
    skip?: number;
    take?: number;
};

export type GetCollectionMediaResponse = ((PagedMediaCollectionResponseModel));

export type GetItemMediaData = {
    id?: Array<(string)>;
};

export type GetItemMediaResponse = (Array<(MediaItemResponseModel)>);

export type GetItemMediaSearchData = {
    parentId?: string;
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemMediaSearchResponse = ((PagedModelMediaItemResponseModel));

export type PostMediaData = {
    requestBody?: (CreateMediaRequestModel);
};

export type PostMediaResponse = (string);

export type GetMediaByIdData = {
    id: string;
};

export type GetMediaByIdResponse = ((MediaResponseModel));

export type DeleteMediaByIdData = {
    id: string;
};

export type DeleteMediaByIdResponse = (string);

export type PutMediaByIdData = {
    id: string;
    requestBody?: (UpdateMediaRequestModel);
};

export type PutMediaByIdResponse = (string);

export type GetMediaByIdAuditLogData = {
    id: string;
    orderDirection?: DirectionModel;
    sinceDate?: string;
    skip?: number;
    take?: number;
};

export type GetMediaByIdAuditLogResponse = ((PagedAuditLogResponseModel));

export type PutMediaByIdMoveData = {
    id: string;
    requestBody?: (MoveMediaRequestModel);
};

export type PutMediaByIdMoveResponse = (string);

export type PutMediaByIdMoveToRecycleBinData = {
    id: string;
};

export type PutMediaByIdMoveToRecycleBinResponse = (string);

export type GetMediaByIdReferencedByData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetMediaByIdReferencedByResponse = ((PagedIReferenceResponseModel));

export type GetMediaByIdReferencedDescendantsData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetMediaByIdReferencedDescendantsResponse = ((PagedReferenceByIdModel));

export type PutMediaByIdValidateData = {
    id: string;
    requestBody?: (UpdateMediaRequestModel);
};

export type PutMediaByIdValidateResponse = (string);

export type GetMediaAreReferencedData = {
    id?: Array<(string)>;
    skip?: number;
    take?: number;
};

export type GetMediaAreReferencedResponse = ((PagedReferenceByIdModel));

export type GetMediaConfigurationResponse = ((MediaConfigurationResponseModel));

export type PutMediaSortData = {
    requestBody?: (SortingRequestModel);
};

export type PutMediaSortResponse = (string);

export type GetMediaUrlsData = {
    id?: Array<(string)>;
};

export type GetMediaUrlsResponse = (Array<(MediaUrlInfoResponseModel)>);

export type PostMediaValidateData = {
    requestBody?: (CreateMediaRequestModel);
};

export type PostMediaValidateResponse = (string);

export type DeleteRecycleBinMediaResponse = (string);

export type DeleteRecycleBinMediaByIdData = {
    id: string;
};

export type DeleteRecycleBinMediaByIdResponse = (string);

export type GetRecycleBinMediaByIdOriginalParentData = {
    id: string;
};

export type GetRecycleBinMediaByIdOriginalParentResponse = ((ReferenceByIdModel));

export type PutRecycleBinMediaByIdRestoreData = {
    id: string;
    requestBody?: (MoveMediaRequestModel);
};

export type PutRecycleBinMediaByIdRestoreResponse = (string);

export type GetRecycleBinMediaChildrenData = {
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetRecycleBinMediaChildrenResponse = ((PagedMediaRecycleBinItemResponseModel));

export type GetRecycleBinMediaRootData = {
    skip?: number;
    take?: number;
};

export type GetRecycleBinMediaRootResponse = ((PagedMediaRecycleBinItemResponseModel));

export type GetTreeMediaAncestorsData = {
    descendantId?: string;
};

export type GetTreeMediaAncestorsResponse = (Array<(MediaTreeItemResponseModel)>);

export type GetTreeMediaChildrenData = {
    dataTypeId?: string;
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeMediaChildrenResponse = ((PagedMediaTreeItemResponseModel));

export type GetTreeMediaRootData = {
    dataTypeId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeMediaRootResponse = ((PagedMediaTreeItemResponseModel));

export type GetItemMediaTypeData = {
    id?: Array<(string)>;
};

export type GetItemMediaTypeResponse = (Array<(MediaTypeItemResponseModel)>);

export type GetItemMediaTypeAllowedData = {
    fileExtension?: string;
    skip?: number;
    take?: number;
};

export type GetItemMediaTypeAllowedResponse = ((PagedModelMediaTypeItemResponseModel));

export type GetItemMediaTypeFoldersData = {
    skip?: number;
    take?: number;
};

export type GetItemMediaTypeFoldersResponse = ((PagedModelMediaTypeItemResponseModel));

export type GetItemMediaTypeSearchData = {
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemMediaTypeSearchResponse = ((PagedModelMediaTypeItemResponseModel));

export type PostMediaTypeData = {
    requestBody?: (CreateMediaTypeRequestModel);
};

export type PostMediaTypeResponse = (string);

export type GetMediaTypeByIdData = {
    id: string;
};

export type GetMediaTypeByIdResponse = ((MediaTypeResponseModel));

export type DeleteMediaTypeByIdData = {
    id: string;
};

export type DeleteMediaTypeByIdResponse = (string);

export type PutMediaTypeByIdData = {
    id: string;
    requestBody?: (UpdateMediaTypeRequestModel);
};

export type PutMediaTypeByIdResponse = (string);

export type GetMediaTypeByIdAllowedChildrenData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetMediaTypeByIdAllowedChildrenResponse = ((PagedAllowedMediaTypeModel));

export type GetMediaTypeByIdCompositionReferencesData = {
    id: string;
};

export type GetMediaTypeByIdCompositionReferencesResponse = (Array<(MediaTypeCompositionResponseModel)>);

export type PostMediaTypeByIdCopyData = {
    id: string;
    requestBody?: (CopyMediaTypeRequestModel);
};

export type PostMediaTypeByIdCopyResponse = (string);

export type GetMediaTypeByIdExportData = {
    id: string;
};

export type GetMediaTypeByIdExportResponse = (((Blob | File)));

export type PutMediaTypeByIdImportData = {
    id: string;
    requestBody?: (ImportMediaTypeRequestModel);
};

export type PutMediaTypeByIdImportResponse = (string);

export type PutMediaTypeByIdMoveData = {
    id: string;
    requestBody?: (MoveMediaTypeRequestModel);
};

export type PutMediaTypeByIdMoveResponse = (string);

export type GetMediaTypeAllowedAtRootData = {
    skip?: number;
    take?: number;
};

export type GetMediaTypeAllowedAtRootResponse = ((PagedAllowedMediaTypeModel));

export type PostMediaTypeAvailableCompositionsData = {
    requestBody?: (MediaTypeCompositionRequestModel);
};

export type PostMediaTypeAvailableCompositionsResponse = (Array<(AvailableMediaTypeCompositionResponseModel)>);

export type GetMediaTypeConfigurationResponse = ((MediaTypeConfigurationResponseModel));

export type PostMediaTypeFolderData = {
    requestBody?: (CreateFolderRequestModel);
};

export type PostMediaTypeFolderResponse = (string);

export type GetMediaTypeFolderByIdData = {
    id: string;
};

export type GetMediaTypeFolderByIdResponse = ((FolderResponseModel));

export type DeleteMediaTypeFolderByIdData = {
    id: string;
};

export type DeleteMediaTypeFolderByIdResponse = (string);

export type PutMediaTypeFolderByIdData = {
    id: string;
    requestBody?: (UpdateFolderResponseModel);
};

export type PutMediaTypeFolderByIdResponse = (string);

export type PostMediaTypeImportData = {
    requestBody?: (ImportMediaTypeRequestModel);
};

export type PostMediaTypeImportResponse = (string);

export type GetTreeMediaTypeAncestorsData = {
    descendantId?: string;
};

export type GetTreeMediaTypeAncestorsResponse = (Array<(MediaTypeTreeItemResponseModel)>);

export type GetTreeMediaTypeChildrenData = {
    foldersOnly?: boolean;
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeMediaTypeChildrenResponse = ((PagedMediaTypeTreeItemResponseModel));

export type GetTreeMediaTypeRootData = {
    foldersOnly?: boolean;
    skip?: number;
    take?: number;
};

export type GetTreeMediaTypeRootResponse = ((PagedMediaTypeTreeItemResponseModel));

export type GetFilterMemberData = {
    filter?: string;
    isApproved?: boolean;
    isLockedOut?: boolean;
    memberGroupName?: string;
    memberTypeId?: string;
    orderBy?: string;
    orderDirection?: DirectionModel;
    skip?: number;
    take?: number;
};

export type GetFilterMemberResponse = ((PagedMemberResponseModel));

export type GetItemMemberData = {
    id?: Array<(string)>;
};

export type GetItemMemberResponse = (Array<(MemberItemResponseModel)>);

export type GetItemMemberSearchData = {
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemMemberSearchResponse = ((PagedModelMemberItemResponseModel));

export type PostMemberData = {
    requestBody?: (CreateMemberRequestModel);
};

export type PostMemberResponse = (string);

export type GetMemberByIdData = {
    id: string;
};

export type GetMemberByIdResponse = ((MemberResponseModel));

export type DeleteMemberByIdData = {
    id: string;
};

export type DeleteMemberByIdResponse = (string);

export type PutMemberByIdData = {
    id: string;
    requestBody?: (UpdateMemberRequestModel);
};

export type PutMemberByIdResponse = (string);

export type PutMemberByIdValidateData = {
    id: string;
    requestBody?: (UpdateMemberRequestModel);
};

export type PutMemberByIdValidateResponse = (string);

export type GetMemberConfigurationResponse = ((MemberConfigurationResponseModel));

export type PostMemberValidateData = {
    requestBody?: (CreateMemberRequestModel);
};

export type PostMemberValidateResponse = (string);

export type GetItemMemberGroupData = {
    id?: Array<(string)>;
};

export type GetItemMemberGroupResponse = (Array<(MemberGroupItemResponseModel)>);

export type GetMemberGroupData = {
    skip?: number;
    take?: number;
};

export type GetMemberGroupResponse = ((PagedMemberGroupResponseModel));

export type PostMemberGroupData = {
    requestBody?: (CreateMemberGroupRequestModel);
};

export type PostMemberGroupResponse = (string);

export type GetMemberGroupByIdData = {
    id: string;
};

export type GetMemberGroupByIdResponse = ((MemberGroupResponseModel));

export type DeleteMemberGroupByIdData = {
    id: string;
};

export type DeleteMemberGroupByIdResponse = (string);

export type PutMemberGroupByIdData = {
    id: string;
    requestBody?: (UpdateMemberGroupRequestModel);
};

export type PutMemberGroupByIdResponse = (string);

export type GetTreeMemberGroupRootData = {
    skip?: number;
    take?: number;
};

export type GetTreeMemberGroupRootResponse = ((PagedNamedEntityTreeItemResponseModel));

export type GetItemMemberTypeData = {
    id?: Array<(string)>;
};

export type GetItemMemberTypeResponse = (Array<(MemberTypeItemResponseModel)>);

export type GetItemMemberTypeSearchData = {
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemMemberTypeSearchResponse = ((PagedModelMemberTypeItemResponseModel));

export type PostMemberTypeData = {
    requestBody?: (CreateMemberTypeRequestModel);
};

export type PostMemberTypeResponse = (string);

export type GetMemberTypeByIdData = {
    id: string;
};

export type GetMemberTypeByIdResponse = ((MemberTypeResponseModel));

export type DeleteMemberTypeByIdData = {
    id: string;
};

export type DeleteMemberTypeByIdResponse = (string);

export type PutMemberTypeByIdData = {
    id: string;
    requestBody?: (UpdateMemberTypeRequestModel);
};

export type PutMemberTypeByIdResponse = (string);

export type GetMemberTypeByIdCompositionReferencesData = {
    id: string;
};

export type GetMemberTypeByIdCompositionReferencesResponse = (Array<(MemberTypeCompositionResponseModel)>);

export type PostMemberTypeByIdCopyData = {
    id: string;
};

export type PostMemberTypeByIdCopyResponse = (string);

export type PostMemberTypeAvailableCompositionsData = {
    requestBody?: (MemberTypeCompositionRequestModel);
};

export type PostMemberTypeAvailableCompositionsResponse = (Array<(AvailableMemberTypeCompositionResponseModel)>);

export type GetMemberTypeConfigurationResponse = ((MemberTypeConfigurationResponseModel));

export type GetTreeMemberTypeRootData = {
    skip?: number;
    take?: number;
};

export type GetTreeMemberTypeRootResponse = ((PagedMemberTypeTreeItemResponseModel));

export type PostModelsBuilderBuildResponse = (string);

export type GetModelsBuilderDashboardResponse = ((ModelsBuilderResponseModel));

export type GetModelsBuilderStatusResponse = ((OutOfDateStatusResponseModel));

export type GetObjectTypesData = {
    skip?: number;
    take?: number;
};

export type GetObjectTypesResponse = ((PagedObjectTypeResponseModel));

export type GetOembedQueryData = {
    maxHeight?: number;
    maxWidth?: number;
    url?: string;
};

export type GetOembedQueryResponse = ((OEmbedResponseModel));

export type PostPackageByNameRunMigrationData = {
    name: string;
};

export type PostPackageByNameRunMigrationResponse = (string);

export type GetPackageConfigurationResponse = ((PackageConfigurationResponseModel));

export type GetPackageCreatedData = {
    skip?: number;
    take?: number;
};

export type GetPackageCreatedResponse = ((PagedPackageDefinitionResponseModel));

export type PostPackageCreatedData = {
    requestBody?: (CreatePackageRequestModel);
};

export type PostPackageCreatedResponse = (string);

export type GetPackageCreatedByIdData = {
    id: string;
};

export type GetPackageCreatedByIdResponse = ((PackageDefinitionResponseModel));

export type DeletePackageCreatedByIdData = {
    id: string;
};

export type DeletePackageCreatedByIdResponse = (string);

export type PutPackageCreatedByIdData = {
    id: string;
    requestBody?: (UpdatePackageRequestModel);
};

export type PutPackageCreatedByIdResponse = (string);

export type GetPackageCreatedByIdDownloadData = {
    id: string;
};

export type GetPackageCreatedByIdDownloadResponse = (((Blob | File)));

export type GetPackageMigrationStatusData = {
    skip?: number;
    take?: number;
};

export type GetPackageMigrationStatusResponse = ((PagedPackageMigrationStatusResponseModel));

export type GetItemPartialViewData = {
    path?: Array<(string)>;
};

export type GetItemPartialViewResponse = (Array<(PartialViewItemResponseModel)>);

export type PostPartialViewData = {
    requestBody?: (CreatePartialViewRequestModel);
};

export type PostPartialViewResponse = (string);

export type GetPartialViewByPathData = {
    path: string;
};

export type GetPartialViewByPathResponse = ((PartialViewResponseModel));

export type DeletePartialViewByPathData = {
    path: string;
};

export type DeletePartialViewByPathResponse = (string);

export type PutPartialViewByPathData = {
    path: string;
    requestBody?: (UpdatePartialViewRequestModel);
};

export type PutPartialViewByPathResponse = (string);

export type PutPartialViewByPathRenameData = {
    path: string;
    requestBody?: (RenamePartialViewRequestModel);
};

export type PutPartialViewByPathRenameResponse = (string);

export type PostPartialViewFolderData = {
    requestBody?: (CreatePartialViewFolderRequestModel);
};

export type PostPartialViewFolderResponse = (string);

export type GetPartialViewFolderByPathData = {
    path: string;
};

export type GetPartialViewFolderByPathResponse = ((PartialViewFolderResponseModel));

export type DeletePartialViewFolderByPathData = {
    path: string;
};

export type DeletePartialViewFolderByPathResponse = (string);

export type GetPartialViewSnippetData = {
    skip?: number;
    take?: number;
};

export type GetPartialViewSnippetResponse = ((PagedPartialViewSnippetItemResponseModel));

export type GetPartialViewSnippetByIdData = {
    id: string;
};

export type GetPartialViewSnippetByIdResponse = ((PartialViewSnippetResponseModel));

export type GetTreePartialViewAncestorsData = {
    descendantPath?: string;
};

export type GetTreePartialViewAncestorsResponse = (Array<(FileSystemTreeItemPresentationModel)>);

export type GetTreePartialViewChildrenData = {
    parentPath?: string;
    skip?: number;
    take?: number;
};

export type GetTreePartialViewChildrenResponse = ((PagedFileSystemTreeItemPresentationModel));

export type GetTreePartialViewRootData = {
    skip?: number;
    take?: number;
};

export type GetTreePartialViewRootResponse = ((PagedFileSystemTreeItemPresentationModel));

export type DeletePreviewResponse = (string);

export type PostPreviewResponse = (string);

export type GetProfilingStatusResponse = ((ProfilingStatusResponseModel));

export type PutProfilingStatusData = {
    requestBody?: (ProfilingStatusRequestModel);
};

export type PutProfilingStatusResponse = (string);

export type GetPropertyTypeIsUsedData = {
    contentTypeId?: string;
    propertyAlias?: string;
};

export type GetPropertyTypeIsUsedResponse = (boolean);

export type PostPublishedCacheRebuildResponse = (string);

export type PostPublishedCacheReloadResponse = (string);

export type GetRedirectManagementData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetRedirectManagementResponse = ((PagedRedirectUrlResponseModel));

export type GetRedirectManagementByIdData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetRedirectManagementByIdResponse = ((PagedRedirectUrlResponseModel));

export type DeleteRedirectManagementByIdData = {
    id: string;
};

export type DeleteRedirectManagementByIdResponse = (string);

export type GetRedirectManagementStatusResponse = ((RedirectUrlStatusResponseModel));

export type PostRedirectManagementStatusData = {
    status?: RedirectStatusModel;
};

export type PostRedirectManagementStatusResponse = (string);

export type GetRelationByRelationTypeIdData = {
    id: string;
    skip?: number;
    take?: number;
};

export type GetRelationByRelationTypeIdResponse = ((PagedRelationResponseModel));

export type GetItemRelationTypeData = {
    id?: Array<(string)>;
};

export type GetItemRelationTypeResponse = (Array<(RelationTypeItemResponseModel)>);

export type GetRelationTypeData = {
    skip?: number;
    take?: number;
};

export type GetRelationTypeResponse = ((PagedRelationTypeResponseModel));

export type GetRelationTypeByIdData = {
    id: string;
};

export type GetRelationTypeByIdResponse = ((RelationTypeResponseModel));

export type GetItemScriptData = {
    path?: Array<(string)>;
};

export type GetItemScriptResponse = (Array<(ScriptItemResponseModel)>);

export type PostScriptData = {
    requestBody?: (CreateScriptRequestModel);
};

export type PostScriptResponse = (string);

export type GetScriptByPathData = {
    path: string;
};

export type GetScriptByPathResponse = ((ScriptResponseModel));

export type DeleteScriptByPathData = {
    path: string;
};

export type DeleteScriptByPathResponse = (string);

export type PutScriptByPathData = {
    path: string;
    requestBody?: (UpdateScriptRequestModel);
};

export type PutScriptByPathResponse = (string);

export type PutScriptByPathRenameData = {
    path: string;
    requestBody?: (RenameScriptRequestModel);
};

export type PutScriptByPathRenameResponse = (string);

export type PostScriptFolderData = {
    requestBody?: (CreateScriptFolderRequestModel);
};

export type PostScriptFolderResponse = (string);

export type GetScriptFolderByPathData = {
    path: string;
};

export type GetScriptFolderByPathResponse = ((ScriptFolderResponseModel));

export type DeleteScriptFolderByPathData = {
    path: string;
};

export type DeleteScriptFolderByPathResponse = (string);

export type GetTreeScriptAncestorsData = {
    descendantPath?: string;
};

export type GetTreeScriptAncestorsResponse = (Array<(FileSystemTreeItemPresentationModel)>);

export type GetTreeScriptChildrenData = {
    parentPath?: string;
    skip?: number;
    take?: number;
};

export type GetTreeScriptChildrenResponse = ((PagedFileSystemTreeItemPresentationModel));

export type GetTreeScriptRootData = {
    skip?: number;
    take?: number;
};

export type GetTreeScriptRootResponse = ((PagedFileSystemTreeItemPresentationModel));

export type GetSearcherData = {
    skip?: number;
    take?: number;
};

export type GetSearcherResponse = ((PagedSearcherResponseModel));

export type GetSearcherBySearcherNameQueryData = {
    searcherName: string;
    skip?: number;
    take?: number;
    term?: string;
};

export type GetSearcherBySearcherNameQueryResponse = ((PagedSearchResultResponseModel));

export type GetSecurityConfigurationResponse = ((SecurityConfigurationResponseModel));

export type PostSecurityForgotPasswordData = {
    requestBody?: (ResetPasswordRequestModel);
};

export type PostSecurityForgotPasswordResponse = (string);

export type PostSecurityForgotPasswordResetData = {
    requestBody?: (ResetPasswordTokenRequestModel);
};

export type PostSecurityForgotPasswordResetResponse = (string);

export type PostSecurityForgotPasswordVerifyData = {
    requestBody?: (VerifyResetPasswordTokenRequestModel);
};

export type PostSecurityForgotPasswordVerifyResponse = ((VerifyResetPasswordResponseModel));

export type GetSegmentData = {
    skip?: number;
    take?: number;
};

export type GetSegmentResponse = ((PagedSegmentResponseModel));

export type GetServerConfigurationResponse = ((ServerConfigurationResponseModel));

export type GetServerInformationResponse = ((ServerInformationResponseModel));

export type GetServerStatusResponse = ((ServerStatusResponseModel));

export type GetServerTroubleshootingResponse = ((ServerTroubleshootingResponseModel));

export type GetServerUpgradeCheckResponse = ((UpgradeCheckResponseModel));

export type GetItemStaticFileData = {
    path?: Array<(string)>;
};

export type GetItemStaticFileResponse = (Array<(StaticFileItemResponseModel)>);

export type GetTreeStaticFileAncestorsData = {
    descendantPath?: string;
};

export type GetTreeStaticFileAncestorsResponse = (Array<(FileSystemTreeItemPresentationModel)>);

export type GetTreeStaticFileChildrenData = {
    parentPath?: string;
    skip?: number;
    take?: number;
};

export type GetTreeStaticFileChildrenResponse = ((PagedFileSystemTreeItemPresentationModel));

export type GetTreeStaticFileRootData = {
    skip?: number;
    take?: number;
};

export type GetTreeStaticFileRootResponse = ((PagedFileSystemTreeItemPresentationModel));

export type GetItemStylesheetData = {
    path?: Array<(string)>;
};

export type GetItemStylesheetResponse = (Array<(StylesheetItemResponseModel)>);

export type PostStylesheetData = {
    requestBody?: (CreateStylesheetRequestModel);
};

export type PostStylesheetResponse = (string);

export type GetStylesheetByPathData = {
    path: string;
};

export type GetStylesheetByPathResponse = ((StylesheetResponseModel));

export type DeleteStylesheetByPathData = {
    path: string;
};

export type DeleteStylesheetByPathResponse = (string);

export type PutStylesheetByPathData = {
    path: string;
    requestBody?: (UpdateStylesheetRequestModel);
};

export type PutStylesheetByPathResponse = (string);

export type PutStylesheetByPathRenameData = {
    path: string;
    requestBody?: (RenameStylesheetRequestModel);
};

export type PutStylesheetByPathRenameResponse = (string);

export type PostStylesheetFolderData = {
    requestBody?: (CreateStylesheetFolderRequestModel);
};

export type PostStylesheetFolderResponse = (string);

export type GetStylesheetFolderByPathData = {
    path: string;
};

export type GetStylesheetFolderByPathResponse = ((StylesheetFolderResponseModel));

export type DeleteStylesheetFolderByPathData = {
    path: string;
};

export type DeleteStylesheetFolderByPathResponse = (string);

export type GetTreeStylesheetAncestorsData = {
    descendantPath?: string;
};

export type GetTreeStylesheetAncestorsResponse = (Array<(FileSystemTreeItemPresentationModel)>);

export type GetTreeStylesheetChildrenData = {
    parentPath?: string;
    skip?: number;
    take?: number;
};

export type GetTreeStylesheetChildrenResponse = ((PagedFileSystemTreeItemPresentationModel));

export type GetTreeStylesheetRootData = {
    skip?: number;
    take?: number;
};

export type GetTreeStylesheetRootResponse = ((PagedFileSystemTreeItemPresentationModel));

export type GetTagData = {
    culture?: string;
    query?: string;
    skip?: number;
    tagGroup?: string;
    take?: number;
};

export type GetTagResponse = ((PagedTagResponseModel));

export type GetTelemetryData = {
    skip?: number;
    take?: number;
};

export type GetTelemetryResponse = ((PagedTelemetryResponseModel));

export type GetTelemetryLevelResponse = ((TelemetryResponseModel));

export type PostTelemetryLevelData = {
    requestBody?: (TelemetryRequestModel);
};

export type PostTelemetryLevelResponse = (string);

export type GetItemTemplateData = {
    id?: Array<(string)>;
};

export type GetItemTemplateResponse = (Array<(TemplateItemResponseModel)>);

export type GetItemTemplateSearchData = {
    query?: string;
    skip?: number;
    take?: number;
};

export type GetItemTemplateSearchResponse = ((PagedModelTemplateItemResponseModel));

export type PostTemplateData = {
    requestBody?: (CreateTemplateRequestModel);
};

export type PostTemplateResponse = (string);

export type GetTemplateByIdData = {
    id: string;
};

export type GetTemplateByIdResponse = ((TemplateResponseModel));

export type DeleteTemplateByIdData = {
    id: string;
};

export type DeleteTemplateByIdResponse = (string);

export type PutTemplateByIdData = {
    id: string;
    requestBody?: (UpdateTemplateRequestModel);
};

export type PutTemplateByIdResponse = (string);

export type GetTemplateConfigurationResponse = ((TemplateConfigurationResponseModel));

export type PostTemplateQueryExecuteData = {
    requestBody?: (TemplateQueryExecuteModel);
};

export type PostTemplateQueryExecuteResponse = ((TemplateQueryResultResponseModel));

export type GetTemplateQuerySettingsResponse = ((TemplateQuerySettingsResponseModel));

export type GetTreeTemplateAncestorsData = {
    descendantId?: string;
};

export type GetTreeTemplateAncestorsResponse = (Array<(NamedEntityTreeItemResponseModel)>);

export type GetTreeTemplateChildrenData = {
    parentId?: string;
    skip?: number;
    take?: number;
};

export type GetTreeTemplateChildrenResponse = ((PagedNamedEntityTreeItemResponseModel));

export type GetTreeTemplateRootData = {
    skip?: number;
    take?: number;
};

export type GetTreeTemplateRootResponse = ((PagedNamedEntityTreeItemResponseModel));

export type PostTemporaryFileData = {
    formData?: {
        Id: string;
        File: (Blob | File);
    };
};

export type PostTemporaryFileResponse = (string);

export type GetTemporaryFileByIdData = {
    id: string;
};

export type GetTemporaryFileByIdResponse = ((TemporaryFileResponseModel));

export type DeleteTemporaryFileByIdData = {
    id: string;
};

export type DeleteTemporaryFileByIdResponse = (string);

export type GetTemporaryFileConfigurationResponse = ((TemporaryFileConfigurationResponseModel));

export type PostUpgradeAuthorizeResponse = (string);

export type GetUpgradeSettingsResponse = ((UpgradeSettingsResponseModel));

export type GetFilterUserData = {
    filter?: string;
    orderBy?: UserOrderModel;
    orderDirection?: DirectionModel;
    skip?: number;
    take?: number;
    userGroupIds?: Array<(string)>;
    userStates?: Array<UserStateModel>;
};

export type GetFilterUserResponse = ((PagedUserResponseModel));

export type GetItemUserData = {
    id?: Array<(string)>;
};

export type GetItemUserResponse = (Array<(UserItemResponseModel)>);

export type PostUserData = {
    requestBody?: (CreateUserRequestModel);
};

export type PostUserResponse = (string);

export type DeleteUserData = {
    requestBody?: (DeleteUsersRequestModel);
};

export type DeleteUserResponse = (string);

export type GetUserData = {
    skip?: number;
    take?: number;
};

export type GetUserResponse = ((PagedUserResponseModel));

export type GetUserByIdData = {
    id: string;
};

export type GetUserByIdResponse = ((UserResponseModel));

export type DeleteUserByIdData = {
    id: string;
};

export type DeleteUserByIdResponse = (string);

export type PutUserByIdData = {
    id: string;
    requestBody?: (UpdateUserRequestModel);
};

export type PutUserByIdResponse = (string);

export type GetUserById2FaData = {
    id: string;
};

export type GetUserById2FaResponse = (Array<(UserTwoFactorProviderModel)>);

export type DeleteUserById2FaByProviderNameData = {
    id: string;
    providerName: string;
};

export type DeleteUserById2FaByProviderNameResponse = (string);

export type GetUserByIdCalculateStartNodesData = {
    id: string;
};

export type GetUserByIdCalculateStartNodesResponse = ((CalculatedUserStartNodesResponseModel));

export type PostUserByIdChangePasswordData = {
    id: string;
    requestBody?: (ChangePasswordUserRequestModel);
};

export type PostUserByIdChangePasswordResponse = (string);

export type PostUserByIdClientCredentialsData = {
    id: string;
    requestBody?: (CreateUserClientCredentialsRequestModel);
};

export type PostUserByIdClientCredentialsResponse = (string);

export type GetUserByIdClientCredentialsData = {
    id: string;
};

export type GetUserByIdClientCredentialsResponse = (Array<(string)>);

export type DeleteUserByIdClientCredentialsByClientIdData = {
    clientId: string;
    id: string;
};

export type DeleteUserByIdClientCredentialsByClientIdResponse = (string);

export type PostUserByIdResetPasswordData = {
    id: string;
};

export type PostUserByIdResetPasswordResponse = ((ResetPasswordUserResponseModel));

export type DeleteUserAvatarByIdData = {
    id: string;
};

export type DeleteUserAvatarByIdResponse = (string);

export type PostUserAvatarByIdData = {
    id: string;
    requestBody?: (SetAvatarRequestModel);
};

export type PostUserAvatarByIdResponse = (string);

export type GetUserConfigurationResponse = ((UserConfigurationResponseModel));

export type GetUserCurrentResponse = ((CurrentUserResponseModel));

export type GetUserCurrent2FaResponse = (Array<(UserTwoFactorProviderModel)>);

export type DeleteUserCurrent2FaByProviderNameData = {
    code?: string;
    providerName: string;
};

export type DeleteUserCurrent2FaByProviderNameResponse = (string);

export type PostUserCurrent2FaByProviderNameData = {
    providerName: string;
    requestBody?: (EnableTwoFactorRequestModel);
};

export type PostUserCurrent2FaByProviderNameResponse = ((NoopSetupTwoFactorModel));

export type GetUserCurrent2FaByProviderNameData = {
    providerName: string;
};

export type GetUserCurrent2FaByProviderNameResponse = ((NoopSetupTwoFactorModel));

export type PostUserCurrentAvatarData = {
    requestBody?: (SetAvatarRequestModel);
};

export type PostUserCurrentAvatarResponse = (string);

export type PostUserCurrentChangePasswordData = {
    requestBody?: (ChangePasswordCurrentUserRequestModel);
};

export type PostUserCurrentChangePasswordResponse = (string);

export type GetUserCurrentConfigurationResponse = ((CurrenUserConfigurationResponseModel));

export type GetUserCurrentLoginProvidersResponse = (Array<(UserExternalLoginProviderModel)>);

export type GetUserCurrentPermissionsData = {
    id?: Array<(string)>;
};

export type GetUserCurrentPermissionsResponse = ((UserPermissionsResponseModel));

export type GetUserCurrentPermissionsDocumentData = {
    id?: Array<(string)>;
};

export type GetUserCurrentPermissionsDocumentResponse = (Array<(UserPermissionsResponseModel)>);

export type GetUserCurrentPermissionsMediaData = {
    id?: Array<(string)>;
};

export type GetUserCurrentPermissionsMediaResponse = ((UserPermissionsResponseModel));

export type PostUserDisableData = {
    requestBody?: (DisableUserRequestModel);
};

export type PostUserDisableResponse = (string);

export type PostUserEnableData = {
    requestBody?: (EnableUserRequestModel);
};

export type PostUserEnableResponse = (string);

export type PostUserInviteData = {
    requestBody?: (InviteUserRequestModel);
};

export type PostUserInviteResponse = (string);

export type PostUserInviteCreatePasswordData = {
    requestBody?: (CreateInitialPasswordUserRequestModel);
};

export type PostUserInviteCreatePasswordResponse = (string);

export type PostUserInviteResendData = {
    requestBody?: (ResendInviteUserRequestModel);
};

export type PostUserInviteResendResponse = (string);

export type PostUserInviteVerifyData = {
    requestBody?: (VerifyInviteUserRequestModel);
};

export type PostUserInviteVerifyResponse = ((VerifyInviteUserResponseModel));

export type PostUserSetUserGroupsData = {
    requestBody?: (UpdateUserGroupsOnUserRequestModel);
};

export type PostUserSetUserGroupsResponse = (string);

export type PostUserUnlockData = {
    requestBody?: (UnlockUsersRequestModel);
};

export type PostUserUnlockResponse = (string);

export type PostUserDataData = {
    requestBody?: (CreateUserDataRequestModel);
};

export type PostUserDataResponse = (string);

export type GetUserDataData = {
    groups?: Array<(string)>;
    identifiers?: Array<(string)>;
    skip?: number;
    take?: number;
};

export type GetUserDataResponse = ((PagedUserDataResponseModel));

export type PutUserDataData = {
    requestBody?: (UpdateUserDataRequestModel);
};

export type PutUserDataResponse = (string);

export type GetUserDataByIdData = {
    id: string;
};

export type GetUserDataByIdResponse = ((UserDataModel));

export type GetFilterUserGroupData = {
    filter?: string;
    skip?: number;
    take?: number;
};

export type GetFilterUserGroupResponse = ((PagedUserGroupResponseModel));

export type GetItemUserGroupData = {
    id?: Array<(string)>;
};

export type GetItemUserGroupResponse = (Array<(UserGroupItemResponseModel)>);

export type DeleteUserGroupData = {
    requestBody?: (DeleteUserGroupsRequestModel);
};

export type DeleteUserGroupResponse = (string);

export type PostUserGroupData = {
    requestBody?: (CreateUserGroupRequestModel);
};

export type PostUserGroupResponse = (string);

export type GetUserGroupData = {
    skip?: number;
    take?: number;
};

export type GetUserGroupResponse = ((PagedUserGroupResponseModel));

export type GetUserGroupByIdData = {
    id: string;
};

export type GetUserGroupByIdResponse = ((UserGroupResponseModel));

export type DeleteUserGroupByIdData = {
    id: string;
};

export type DeleteUserGroupByIdResponse = (string);

export type PutUserGroupByIdData = {
    id: string;
    requestBody?: (UpdateUserGroupRequestModel);
};

export type PutUserGroupByIdResponse = (string);

export type DeleteUserGroupByIdUsersData = {
    id: string;
    requestBody?: Array<(ReferenceByIdModel)>;
};

export type DeleteUserGroupByIdUsersResponse = (string);

export type PostUserGroupByIdUsersData = {
    id: string;
    requestBody?: Array<(ReferenceByIdModel)>;
};

export type PostUserGroupByIdUsersResponse = (string);

export type GetItemWebhookData = {
    id?: Array<(string)>;
};

export type GetItemWebhookResponse = (Array<(WebhookItemResponseModel)>);

export type GetWebhookData = {
    skip?: number;
    take?: number;
};

export type GetWebhookResponse = ((PagedWebhookResponseModel));

export type PostWebhookData = {
    requestBody?: (CreateWebhookRequestModel);
};

export type PostWebhookResponse = (string);

export type GetWebhookByIdData = {
    id: string;
};

export type GetWebhookByIdResponse = ((WebhookResponseModel));

export type DeleteWebhookByIdData = {
    id: string;
};

export type DeleteWebhookByIdResponse = (string);

export type PutWebhookByIdData = {
    id: string;
    requestBody?: (UpdateWebhookRequestModel);
};

export type PutWebhookByIdResponse = (string);

export type GetWebhookEventsData = {
    skip?: number;
    take?: number;
};

export type GetWebhookEventsResponse = ((PagedWebhookEventModel));