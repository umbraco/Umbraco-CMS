// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetCultureData, GetCultureResponse, PostDataTypeData, PostDataTypeResponse, GetDataTypeByIdData, GetDataTypeByIdResponse, DeleteDataTypeByIdData, DeleteDataTypeByIdResponse, PutDataTypeByIdData, PutDataTypeByIdResponse, PostDataTypeByIdCopyData, PostDataTypeByIdCopyResponse, GetDataTypeByIdIsUsedData, GetDataTypeByIdIsUsedResponse, PutDataTypeByIdMoveData, PutDataTypeByIdMoveResponse, GetDataTypeByIdReferencesData, GetDataTypeByIdReferencesResponse, GetDataTypeConfigurationResponse, PostDataTypeFolderData, PostDataTypeFolderResponse, GetDataTypeFolderByIdData, GetDataTypeFolderByIdResponse, DeleteDataTypeFolderByIdData, DeleteDataTypeFolderByIdResponse, PutDataTypeFolderByIdData, PutDataTypeFolderByIdResponse, GetFilterDataTypeData, GetFilterDataTypeResponse, GetItemDataTypeData, GetItemDataTypeResponse, GetItemDataTypeSearchData, GetItemDataTypeSearchResponse, GetTreeDataTypeAncestorsData, GetTreeDataTypeAncestorsResponse, GetTreeDataTypeChildrenData, GetTreeDataTypeChildrenResponse, GetTreeDataTypeRootData, GetTreeDataTypeRootResponse, GetDictionaryData, GetDictionaryResponse, PostDictionaryData, PostDictionaryResponse, GetDictionaryByIdData, GetDictionaryByIdResponse, DeleteDictionaryByIdData, DeleteDictionaryByIdResponse, PutDictionaryByIdData, PutDictionaryByIdResponse, GetDictionaryByIdExportData, GetDictionaryByIdExportResponse, PutDictionaryByIdMoveData, PutDictionaryByIdMoveResponse, PostDictionaryImportData, PostDictionaryImportResponse, GetItemDictionaryData, GetItemDictionaryResponse, GetTreeDictionaryAncestorsData, GetTreeDictionaryAncestorsResponse, GetTreeDictionaryChildrenData, GetTreeDictionaryChildrenResponse, GetTreeDictionaryRootData, GetTreeDictionaryRootResponse, GetCollectionDocumentByIdData, GetCollectionDocumentByIdResponse, PostDocumentData, PostDocumentResponse, GetDocumentByIdData, GetDocumentByIdResponse, DeleteDocumentByIdData, DeleteDocumentByIdResponse, PutDocumentByIdData, PutDocumentByIdResponse, GetDocumentByIdAuditLogData, GetDocumentByIdAuditLogResponse, PostDocumentByIdCopyData, PostDocumentByIdCopyResponse, GetDocumentByIdDomainsData, GetDocumentByIdDomainsResponse, PutDocumentByIdDomainsData, PutDocumentByIdDomainsResponse, PutDocumentByIdMoveData, PutDocumentByIdMoveResponse, PutDocumentByIdMoveToRecycleBinData, PutDocumentByIdMoveToRecycleBinResponse, GetDocumentByIdNotificationsData, GetDocumentByIdNotificationsResponse, PutDocumentByIdNotificationsData, PutDocumentByIdNotificationsResponse, PostDocumentByIdPublicAccessData, PostDocumentByIdPublicAccessResponse, DeleteDocumentByIdPublicAccessData, DeleteDocumentByIdPublicAccessResponse, GetDocumentByIdPublicAccessData, GetDocumentByIdPublicAccessResponse, PutDocumentByIdPublicAccessData, PutDocumentByIdPublicAccessResponse, PutDocumentByIdPublishData, PutDocumentByIdPublishResponse, PutDocumentByIdPublishWithDescendantsData, PutDocumentByIdPublishWithDescendantsResponse, GetDocumentByIdPublishedData, GetDocumentByIdPublishedResponse, GetDocumentByIdReferencedByData, GetDocumentByIdReferencedByResponse, GetDocumentByIdReferencedDescendantsData, GetDocumentByIdReferencedDescendantsResponse, PutDocumentByIdUnpublishData, PutDocumentByIdUnpublishResponse, PutDocumentByIdValidateData, PutDocumentByIdValidateResponse, PutUmbracoManagementApiV11DocumentByIdValidate11Data, PutUmbracoManagementApiV11DocumentByIdValidate11Response, GetDocumentAreReferencedData, GetDocumentAreReferencedResponse, GetDocumentConfigurationResponse, PutDocumentSortData, PutDocumentSortResponse, GetDocumentUrlsData, GetDocumentUrlsResponse, PostDocumentValidateData, PostDocumentValidateResponse, GetItemDocumentData, GetItemDocumentResponse, GetItemDocumentSearchData, GetItemDocumentSearchResponse, DeleteRecycleBinDocumentResponse, DeleteRecycleBinDocumentByIdData, DeleteRecycleBinDocumentByIdResponse, GetRecycleBinDocumentByIdOriginalParentData, GetRecycleBinDocumentByIdOriginalParentResponse, PutRecycleBinDocumentByIdRestoreData, PutRecycleBinDocumentByIdRestoreResponse, GetRecycleBinDocumentChildrenData, GetRecycleBinDocumentChildrenResponse, GetRecycleBinDocumentRootData, GetRecycleBinDocumentRootResponse, GetTreeDocumentAncestorsData, GetTreeDocumentAncestorsResponse, GetTreeDocumentChildrenData, GetTreeDocumentChildrenResponse, GetTreeDocumentRootData, GetTreeDocumentRootResponse, PostDocumentBlueprintData, PostDocumentBlueprintResponse, GetDocumentBlueprintByIdData, GetDocumentBlueprintByIdResponse, DeleteDocumentBlueprintByIdData, DeleteDocumentBlueprintByIdResponse, PutDocumentBlueprintByIdData, PutDocumentBlueprintByIdResponse, PutDocumentBlueprintByIdMoveData, PutDocumentBlueprintByIdMoveResponse, PostDocumentBlueprintFolderData, PostDocumentBlueprintFolderResponse, GetDocumentBlueprintFolderByIdData, GetDocumentBlueprintFolderByIdResponse, DeleteDocumentBlueprintFolderByIdData, DeleteDocumentBlueprintFolderByIdResponse, PutDocumentBlueprintFolderByIdData, PutDocumentBlueprintFolderByIdResponse, PostDocumentBlueprintFromDocumentData, PostDocumentBlueprintFromDocumentResponse, GetItemDocumentBlueprintData, GetItemDocumentBlueprintResponse, GetTreeDocumentBlueprintAncestorsData, GetTreeDocumentBlueprintAncestorsResponse, GetTreeDocumentBlueprintChildrenData, GetTreeDocumentBlueprintChildrenResponse, GetTreeDocumentBlueprintRootData, GetTreeDocumentBlueprintRootResponse, PostDocumentTypeData, PostDocumentTypeResponse, GetDocumentTypeByIdData, GetDocumentTypeByIdResponse, DeleteDocumentTypeByIdData, DeleteDocumentTypeByIdResponse, PutDocumentTypeByIdData, PutDocumentTypeByIdResponse, GetDocumentTypeByIdAllowedChildrenData, GetDocumentTypeByIdAllowedChildrenResponse, GetDocumentTypeByIdBlueprintData, GetDocumentTypeByIdBlueprintResponse, GetDocumentTypeByIdCompositionReferencesData, GetDocumentTypeByIdCompositionReferencesResponse, PostDocumentTypeByIdCopyData, PostDocumentTypeByIdCopyResponse, GetDocumentTypeByIdExportData, GetDocumentTypeByIdExportResponse, PutDocumentTypeByIdImportData, PutDocumentTypeByIdImportResponse, PutDocumentTypeByIdMoveData, PutDocumentTypeByIdMoveResponse, GetDocumentTypeAllowedAtRootData, GetDocumentTypeAllowedAtRootResponse, PostDocumentTypeAvailableCompositionsData, PostDocumentTypeAvailableCompositionsResponse, GetDocumentTypeConfigurationResponse, PostDocumentTypeFolderData, PostDocumentTypeFolderResponse, GetDocumentTypeFolderByIdData, GetDocumentTypeFolderByIdResponse, DeleteDocumentTypeFolderByIdData, DeleteDocumentTypeFolderByIdResponse, PutDocumentTypeFolderByIdData, PutDocumentTypeFolderByIdResponse, PostDocumentTypeImportData, PostDocumentTypeImportResponse, GetItemDocumentTypeData, GetItemDocumentTypeResponse, GetItemDocumentTypeSearchData, GetItemDocumentTypeSearchResponse, GetTreeDocumentTypeAncestorsData, GetTreeDocumentTypeAncestorsResponse, GetTreeDocumentTypeChildrenData, GetTreeDocumentTypeChildrenResponse, GetTreeDocumentTypeRootData, GetTreeDocumentTypeRootResponse, GetDocumentVersionData, GetDocumentVersionResponse, GetDocumentVersionByIdData, GetDocumentVersionByIdResponse, PutDocumentVersionByIdPreventCleanupData, PutDocumentVersionByIdPreventCleanupResponse, PostDocumentVersionByIdRollbackData, PostDocumentVersionByIdRollbackResponse, PostDynamicRootQueryData, PostDynamicRootQueryResponse, GetDynamicRootStepsResponse, GetHealthCheckGroupData, GetHealthCheckGroupResponse, GetHealthCheckGroupByNameData, GetHealthCheckGroupByNameResponse, PostHealthCheckGroupByNameCheckData, PostHealthCheckGroupByNameCheckResponse, PostHealthCheckExecuteActionData, PostHealthCheckExecuteActionResponse, GetHelpData, GetHelpResponse, GetImagingResizeUrlsData, GetImagingResizeUrlsResponse, GetImportAnalyzeData, GetImportAnalyzeResponse, GetIndexerData, GetIndexerResponse, GetIndexerByIndexNameData, GetIndexerByIndexNameResponse, PostIndexerByIndexNameRebuildData, PostIndexerByIndexNameRebuildResponse, GetInstallSettingsResponse, PostInstallSetupData, PostInstallSetupResponse, PostInstallValidateDatabaseData, PostInstallValidateDatabaseResponse, GetItemLanguageData, GetItemLanguageResponse, GetItemLanguageDefaultResponse, GetLanguageData, GetLanguageResponse, PostLanguageData, PostLanguageResponse, GetLanguageByIsoCodeData, GetLanguageByIsoCodeResponse, DeleteLanguageByIsoCodeData, DeleteLanguageByIsoCodeResponse, PutLanguageByIsoCodeData, PutLanguageByIsoCodeResponse, GetLogViewerLevelData, GetLogViewerLevelResponse, GetLogViewerLevelCountData, GetLogViewerLevelCountResponse, GetLogViewerLogData, GetLogViewerLogResponse, GetLogViewerMessageTemplateData, GetLogViewerMessageTemplateResponse, GetLogViewerSavedSearchData, GetLogViewerSavedSearchResponse, PostLogViewerSavedSearchData, PostLogViewerSavedSearchResponse, GetLogViewerSavedSearchByNameData, GetLogViewerSavedSearchByNameResponse, DeleteLogViewerSavedSearchByNameData, DeleteLogViewerSavedSearchByNameResponse, GetLogViewerValidateLogsSizeData, GetLogViewerValidateLogsSizeResponse, GetManifestManifestResponse, GetManifestManifestPrivateResponse, GetManifestManifestPublicResponse, GetCollectionMediaData, GetCollectionMediaResponse, GetItemMediaData, GetItemMediaResponse, GetItemMediaSearchData, GetItemMediaSearchResponse, PostMediaData, PostMediaResponse, GetMediaByIdData, GetMediaByIdResponse, DeleteMediaByIdData, DeleteMediaByIdResponse, PutMediaByIdData, PutMediaByIdResponse, GetMediaByIdAuditLogData, GetMediaByIdAuditLogResponse, PutMediaByIdMoveData, PutMediaByIdMoveResponse, PutMediaByIdMoveToRecycleBinData, PutMediaByIdMoveToRecycleBinResponse, GetMediaByIdReferencedByData, GetMediaByIdReferencedByResponse, GetMediaByIdReferencedDescendantsData, GetMediaByIdReferencedDescendantsResponse, PutMediaByIdValidateData, PutMediaByIdValidateResponse, GetMediaAreReferencedData, GetMediaAreReferencedResponse, GetMediaConfigurationResponse, PutMediaSortData, PutMediaSortResponse, GetMediaUrlsData, GetMediaUrlsResponse, PostMediaValidateData, PostMediaValidateResponse, DeleteRecycleBinMediaResponse, DeleteRecycleBinMediaByIdData, DeleteRecycleBinMediaByIdResponse, GetRecycleBinMediaByIdOriginalParentData, GetRecycleBinMediaByIdOriginalParentResponse, PutRecycleBinMediaByIdRestoreData, PutRecycleBinMediaByIdRestoreResponse, GetRecycleBinMediaChildrenData, GetRecycleBinMediaChildrenResponse, GetRecycleBinMediaRootData, GetRecycleBinMediaRootResponse, GetTreeMediaAncestorsData, GetTreeMediaAncestorsResponse, GetTreeMediaChildrenData, GetTreeMediaChildrenResponse, GetTreeMediaRootData, GetTreeMediaRootResponse, GetItemMediaTypeData, GetItemMediaTypeResponse, GetItemMediaTypeAllowedData, GetItemMediaTypeAllowedResponse, GetItemMediaTypeFoldersData, GetItemMediaTypeFoldersResponse, GetItemMediaTypeSearchData, GetItemMediaTypeSearchResponse, PostMediaTypeData, PostMediaTypeResponse, GetMediaTypeByIdData, GetMediaTypeByIdResponse, DeleteMediaTypeByIdData, DeleteMediaTypeByIdResponse, PutMediaTypeByIdData, PutMediaTypeByIdResponse, GetMediaTypeByIdAllowedChildrenData, GetMediaTypeByIdAllowedChildrenResponse, GetMediaTypeByIdCompositionReferencesData, GetMediaTypeByIdCompositionReferencesResponse, PostMediaTypeByIdCopyData, PostMediaTypeByIdCopyResponse, GetMediaTypeByIdExportData, GetMediaTypeByIdExportResponse, PutMediaTypeByIdImportData, PutMediaTypeByIdImportResponse, PutMediaTypeByIdMoveData, PutMediaTypeByIdMoveResponse, GetMediaTypeAllowedAtRootData, GetMediaTypeAllowedAtRootResponse, PostMediaTypeAvailableCompositionsData, PostMediaTypeAvailableCompositionsResponse, GetMediaTypeConfigurationResponse, PostMediaTypeFolderData, PostMediaTypeFolderResponse, GetMediaTypeFolderByIdData, GetMediaTypeFolderByIdResponse, DeleteMediaTypeFolderByIdData, DeleteMediaTypeFolderByIdResponse, PutMediaTypeFolderByIdData, PutMediaTypeFolderByIdResponse, PostMediaTypeImportData, PostMediaTypeImportResponse, GetTreeMediaTypeAncestorsData, GetTreeMediaTypeAncestorsResponse, GetTreeMediaTypeChildrenData, GetTreeMediaTypeChildrenResponse, GetTreeMediaTypeRootData, GetTreeMediaTypeRootResponse, GetFilterMemberData, GetFilterMemberResponse, GetItemMemberData, GetItemMemberResponse, GetItemMemberSearchData, GetItemMemberSearchResponse, PostMemberData, PostMemberResponse, GetMemberByIdData, GetMemberByIdResponse, DeleteMemberByIdData, DeleteMemberByIdResponse, PutMemberByIdData, PutMemberByIdResponse, PutMemberByIdValidateData, PutMemberByIdValidateResponse, GetMemberConfigurationResponse, PostMemberValidateData, PostMemberValidateResponse, GetItemMemberGroupData, GetItemMemberGroupResponse, GetMemberGroupData, GetMemberGroupResponse, PostMemberGroupData, PostMemberGroupResponse, GetMemberGroupByIdData, GetMemberGroupByIdResponse, DeleteMemberGroupByIdData, DeleteMemberGroupByIdResponse, PutMemberGroupByIdData, PutMemberGroupByIdResponse, GetTreeMemberGroupRootData, GetTreeMemberGroupRootResponse, GetItemMemberTypeData, GetItemMemberTypeResponse, GetItemMemberTypeSearchData, GetItemMemberTypeSearchResponse, PostMemberTypeData, PostMemberTypeResponse, GetMemberTypeByIdData, GetMemberTypeByIdResponse, DeleteMemberTypeByIdData, DeleteMemberTypeByIdResponse, PutMemberTypeByIdData, PutMemberTypeByIdResponse, GetMemberTypeByIdCompositionReferencesData, GetMemberTypeByIdCompositionReferencesResponse, PostMemberTypeByIdCopyData, PostMemberTypeByIdCopyResponse, PostMemberTypeAvailableCompositionsData, PostMemberTypeAvailableCompositionsResponse, GetMemberTypeConfigurationResponse, GetTreeMemberTypeRootData, GetTreeMemberTypeRootResponse, PostModelsBuilderBuildResponse, GetModelsBuilderDashboardResponse, GetModelsBuilderStatusResponse, GetObjectTypesData, GetObjectTypesResponse, GetOembedQueryData, GetOembedQueryResponse, PostPackageByNameRunMigrationData, PostPackageByNameRunMigrationResponse, GetPackageConfigurationResponse, GetPackageCreatedData, GetPackageCreatedResponse, PostPackageCreatedData, PostPackageCreatedResponse, GetPackageCreatedByIdData, GetPackageCreatedByIdResponse, DeletePackageCreatedByIdData, DeletePackageCreatedByIdResponse, PutPackageCreatedByIdData, PutPackageCreatedByIdResponse, GetPackageCreatedByIdDownloadData, GetPackageCreatedByIdDownloadResponse, GetPackageMigrationStatusData, GetPackageMigrationStatusResponse, GetItemPartialViewData, GetItemPartialViewResponse, PostPartialViewData, PostPartialViewResponse, GetPartialViewByPathData, GetPartialViewByPathResponse, DeletePartialViewByPathData, DeletePartialViewByPathResponse, PutPartialViewByPathData, PutPartialViewByPathResponse, PutPartialViewByPathRenameData, PutPartialViewByPathRenameResponse, PostPartialViewFolderData, PostPartialViewFolderResponse, GetPartialViewFolderByPathData, GetPartialViewFolderByPathResponse, DeletePartialViewFolderByPathData, DeletePartialViewFolderByPathResponse, GetPartialViewSnippetData, GetPartialViewSnippetResponse, GetPartialViewSnippetByIdData, GetPartialViewSnippetByIdResponse, GetTreePartialViewAncestorsData, GetTreePartialViewAncestorsResponse, GetTreePartialViewChildrenData, GetTreePartialViewChildrenResponse, GetTreePartialViewRootData, GetTreePartialViewRootResponse, DeletePreviewResponse, PostPreviewResponse, GetProfilingStatusResponse, PutProfilingStatusData, PutProfilingStatusResponse, GetPropertyTypeIsUsedData, GetPropertyTypeIsUsedResponse, PostPublishedCacheRebuildResponse, PostPublishedCacheReloadResponse, GetRedirectManagementData, GetRedirectManagementResponse, GetRedirectManagementByIdData, GetRedirectManagementByIdResponse, DeleteRedirectManagementByIdData, DeleteRedirectManagementByIdResponse, GetRedirectManagementStatusResponse, PostRedirectManagementStatusData, PostRedirectManagementStatusResponse, GetRelationByRelationTypeIdData, GetRelationByRelationTypeIdResponse, GetItemRelationTypeData, GetItemRelationTypeResponse, GetRelationTypeData, GetRelationTypeResponse, GetRelationTypeByIdData, GetRelationTypeByIdResponse, GetItemScriptData, GetItemScriptResponse, PostScriptData, PostScriptResponse, GetScriptByPathData, GetScriptByPathResponse, DeleteScriptByPathData, DeleteScriptByPathResponse, PutScriptByPathData, PutScriptByPathResponse, PutScriptByPathRenameData, PutScriptByPathRenameResponse, PostScriptFolderData, PostScriptFolderResponse, GetScriptFolderByPathData, GetScriptFolderByPathResponse, DeleteScriptFolderByPathData, DeleteScriptFolderByPathResponse, GetTreeScriptAncestorsData, GetTreeScriptAncestorsResponse, GetTreeScriptChildrenData, GetTreeScriptChildrenResponse, GetTreeScriptRootData, GetTreeScriptRootResponse, GetSearcherData, GetSearcherResponse, GetSearcherBySearcherNameQueryData, GetSearcherBySearcherNameQueryResponse, GetSecurityConfigurationResponse, PostSecurityForgotPasswordData, PostSecurityForgotPasswordResponse, PostSecurityForgotPasswordResetData, PostSecurityForgotPasswordResetResponse, PostSecurityForgotPasswordVerifyData, PostSecurityForgotPasswordVerifyResponse, GetSegmentData, GetSegmentResponse, GetServerConfigurationResponse, GetServerInformationResponse, GetServerStatusResponse, GetServerTroubleshootingResponse, GetServerUpgradeCheckResponse, GetItemStaticFileData, GetItemStaticFileResponse, GetTreeStaticFileAncestorsData, GetTreeStaticFileAncestorsResponse, GetTreeStaticFileChildrenData, GetTreeStaticFileChildrenResponse, GetTreeStaticFileRootData, GetTreeStaticFileRootResponse, GetItemStylesheetData, GetItemStylesheetResponse, PostStylesheetData, PostStylesheetResponse, GetStylesheetByPathData, GetStylesheetByPathResponse, DeleteStylesheetByPathData, DeleteStylesheetByPathResponse, PutStylesheetByPathData, PutStylesheetByPathResponse, PutStylesheetByPathRenameData, PutStylesheetByPathRenameResponse, PostStylesheetFolderData, PostStylesheetFolderResponse, GetStylesheetFolderByPathData, GetStylesheetFolderByPathResponse, DeleteStylesheetFolderByPathData, DeleteStylesheetFolderByPathResponse, GetTreeStylesheetAncestorsData, GetTreeStylesheetAncestorsResponse, GetTreeStylesheetChildrenData, GetTreeStylesheetChildrenResponse, GetTreeStylesheetRootData, GetTreeStylesheetRootResponse, GetTagData, GetTagResponse, GetTelemetryData, GetTelemetryResponse, GetTelemetryLevelResponse, PostTelemetryLevelData, PostTelemetryLevelResponse, GetItemTemplateData, GetItemTemplateResponse, GetItemTemplateSearchData, GetItemTemplateSearchResponse, PostTemplateData, PostTemplateResponse, GetTemplateByIdData, GetTemplateByIdResponse, DeleteTemplateByIdData, DeleteTemplateByIdResponse, PutTemplateByIdData, PutTemplateByIdResponse, GetTemplateConfigurationResponse, PostTemplateQueryExecuteData, PostTemplateQueryExecuteResponse, GetTemplateQuerySettingsResponse, GetTreeTemplateAncestorsData, GetTreeTemplateAncestorsResponse, GetTreeTemplateChildrenData, GetTreeTemplateChildrenResponse, GetTreeTemplateRootData, GetTreeTemplateRootResponse, PostTemporaryFileData, PostTemporaryFileResponse, GetTemporaryFileByIdData, GetTemporaryFileByIdResponse, DeleteTemporaryFileByIdData, DeleteTemporaryFileByIdResponse, GetTemporaryFileConfigurationResponse, PostUpgradeAuthorizeResponse, GetUpgradeSettingsResponse, GetFilterUserData, GetFilterUserResponse, GetItemUserData, GetItemUserResponse, PostUserData, PostUserResponse, DeleteUserData, DeleteUserResponse, GetUserData, GetUserResponse, GetUserByIdData, GetUserByIdResponse, DeleteUserByIdData, DeleteUserByIdResponse, PutUserByIdData, PutUserByIdResponse, GetUserById2FaData, GetUserById2FaResponse, DeleteUserById2FaByProviderNameData, DeleteUserById2FaByProviderNameResponse, GetUserByIdCalculateStartNodesData, GetUserByIdCalculateStartNodesResponse, PostUserByIdChangePasswordData, PostUserByIdChangePasswordResponse, PostUserByIdClientCredentialsData, PostUserByIdClientCredentialsResponse, GetUserByIdClientCredentialsData, GetUserByIdClientCredentialsResponse, DeleteUserByIdClientCredentialsByClientIdData, DeleteUserByIdClientCredentialsByClientIdResponse, PostUserByIdResetPasswordData, PostUserByIdResetPasswordResponse, DeleteUserAvatarByIdData, DeleteUserAvatarByIdResponse, PostUserAvatarByIdData, PostUserAvatarByIdResponse, GetUserConfigurationResponse, GetUserCurrentResponse, GetUserCurrent2FaResponse, DeleteUserCurrent2FaByProviderNameData, DeleteUserCurrent2FaByProviderNameResponse, PostUserCurrent2FaByProviderNameData, PostUserCurrent2FaByProviderNameResponse, GetUserCurrent2FaByProviderNameData, GetUserCurrent2FaByProviderNameResponse, PostUserCurrentAvatarData, PostUserCurrentAvatarResponse, PostUserCurrentChangePasswordData, PostUserCurrentChangePasswordResponse, GetUserCurrentConfigurationResponse, GetUserCurrentLoginProvidersResponse, GetUserCurrentPermissionsData, GetUserCurrentPermissionsResponse, GetUserCurrentPermissionsDocumentData, GetUserCurrentPermissionsDocumentResponse, GetUserCurrentPermissionsMediaData, GetUserCurrentPermissionsMediaResponse, PostUserDisableData, PostUserDisableResponse, PostUserEnableData, PostUserEnableResponse, PostUserInviteData, PostUserInviteResponse, PostUserInviteCreatePasswordData, PostUserInviteCreatePasswordResponse, PostUserInviteResendData, PostUserInviteResendResponse, PostUserInviteVerifyData, PostUserInviteVerifyResponse, PostUserSetUserGroupsData, PostUserSetUserGroupsResponse, PostUserUnlockData, PostUserUnlockResponse, PostUserDataData, PostUserDataResponse, GetUserDataData, GetUserDataResponse, PutUserDataData, PutUserDataResponse, GetUserDataByIdData, GetUserDataByIdResponse, GetFilterUserGroupData, GetFilterUserGroupResponse, GetItemUserGroupData, GetItemUserGroupResponse, DeleteUserGroupData, DeleteUserGroupResponse, PostUserGroupData, PostUserGroupResponse, GetUserGroupData, GetUserGroupResponse, GetUserGroupByIdData, GetUserGroupByIdResponse, DeleteUserGroupByIdData, DeleteUserGroupByIdResponse, PutUserGroupByIdData, PutUserGroupByIdResponse, DeleteUserGroupByIdUsersData, DeleteUserGroupByIdUsersResponse, PostUserGroupByIdUsersData, PostUserGroupByIdUsersResponse, GetItemWebhookData, GetItemWebhookResponse, GetWebhookData, GetWebhookResponse, PostWebhookData, PostWebhookResponse, GetWebhookByIdData, GetWebhookByIdResponse, DeleteWebhookByIdData, DeleteWebhookByIdResponse, PutWebhookByIdData, PutWebhookByIdResponse, GetWebhookEventsData, GetWebhookEventsResponse } from './types.gen';

export class CultureService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getCulture(data: GetCultureData = {}): CancelablePromise<GetCultureResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/culture',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class DataTypeService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDataType(data: PostDataTypeData = {}): CancelablePromise<PostDataTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/data-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeById(data: GetDataTypeByIdData): CancelablePromise<GetDataTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDataTypeById(data: DeleteDataTypeByIdData): CancelablePromise<DeleteDataTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/data-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDataTypeById(data: PutDataTypeByIdData): CancelablePromise<PutDataTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/data-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDataTypeByIdCopy(data: PostDataTypeByIdCopyData): CancelablePromise<PostDataTypeByIdCopyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/data-type/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns boolean OK
     * @throws ApiError
     */
    public static getDataTypeByIdIsUsed(data: GetDataTypeByIdIsUsedData): CancelablePromise<GetDataTypeByIdIsUsedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/{id}/is-used',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDataTypeByIdMove(data: PutDataTypeByIdMoveData): CancelablePromise<PutDataTypeByIdMoveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/data-type/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeByIdReferences(data: GetDataTypeByIdReferencesData): CancelablePromise<GetDataTypeByIdReferencesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/{id}/references',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeConfiguration(): CancelablePromise<GetDataTypeConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDataTypeFolder(data: PostDataTypeFolderData = {}): CancelablePromise<PostDataTypeFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/data-type/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDataTypeFolderById(data: GetDataTypeFolderByIdData): CancelablePromise<GetDataTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDataTypeFolderById(data: DeleteDataTypeFolderByIdData): CancelablePromise<DeleteDataTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDataTypeFolderById(data: PutDataTypeFolderByIdData): CancelablePromise<PutDataTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/data-type/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.name
     * @param data.editorUiAlias
     * @param data.editorAlias
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterDataType(data: GetFilterDataTypeData = {}): CancelablePromise<GetFilterDataTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/data-type',
            query: {
                skip: data.skip,
                take: data.take,
                name: data.name,
                editorUiAlias: data.editorUiAlias,
                editorAlias: data.editorAlias
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDataType(data: GetItemDataTypeData = {}): CancelablePromise<GetItemDataTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/data-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDataTypeSearch(data: GetItemDataTypeSearchData = {}): CancelablePromise<GetItemDataTypeSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/data-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDataTypeAncestors(data: GetTreeDataTypeAncestorsData = {}): CancelablePromise<GetTreeDataTypeAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/data-type/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDataTypeChildren(data: GetTreeDataTypeChildrenData = {}): CancelablePromise<GetTreeDataTypeChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/data-type/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDataTypeRoot(data: GetTreeDataTypeRootData = {}): CancelablePromise<GetTreeDataTypeRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/data-type/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DictionaryService {
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDictionary(data: GetDictionaryData = {}): CancelablePromise<GetDictionaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dictionary',
            query: {
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDictionary(data: PostDictionaryData = {}): CancelablePromise<PostDictionaryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/dictionary',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDictionaryById(data: GetDictionaryByIdData): CancelablePromise<GetDictionaryByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dictionary/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDictionaryById(data: DeleteDictionaryByIdData): CancelablePromise<DeleteDictionaryByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/dictionary/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDictionaryById(data: PutDictionaryByIdData): CancelablePromise<PutDictionaryByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/dictionary/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.includeChildren
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDictionaryByIdExport(data: GetDictionaryByIdExportData): CancelablePromise<GetDictionaryByIdExportResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dictionary/{id}/export',
            path: {
                id: data.id
            },
            query: {
                includeChildren: data.includeChildren
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDictionaryByIdMove(data: PutDictionaryByIdMoveData): CancelablePromise<PutDictionaryByIdMoveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/dictionary/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDictionaryImport(data: PostDictionaryImportData = {}): CancelablePromise<PostDictionaryImportResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/dictionary/import',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDictionary(data: GetItemDictionaryData = {}): CancelablePromise<GetItemDictionaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/dictionary',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDictionaryAncestors(data: GetTreeDictionaryAncestorsData = {}): CancelablePromise<GetTreeDictionaryAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDictionaryChildren(data: GetTreeDictionaryChildrenData = {}): CancelablePromise<GetTreeDictionaryChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/dictionary/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDictionaryRoot(data: GetTreeDictionaryRootData = {}): CancelablePromise<GetTreeDictionaryRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/dictionary/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DocumentService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.dataTypeId
     * @param data.orderBy
     * @param data.orderCulture
     * @param data.orderDirection
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getCollectionDocumentById(data: GetCollectionDocumentByIdData): CancelablePromise<GetCollectionDocumentByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/collection/document/{id}',
            path: {
                id: data.id
            },
            query: {
                dataTypeId: data.dataTypeId,
                orderBy: data.orderBy,
                orderCulture: data.orderCulture,
                orderDirection: data.orderDirection,
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocument(data: PostDocumentData = {}): CancelablePromise<PostDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentById(data: GetDocumentByIdData): CancelablePromise<GetDocumentByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentById(data: DeleteDocumentByIdData): CancelablePromise<DeleteDocumentByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentById(data: PutDocumentByIdData): CancelablePromise<PutDocumentByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.orderDirection
     * @param data.sinceDate
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdAuditLog(data: GetDocumentByIdAuditLogData): CancelablePromise<GetDocumentByIdAuditLogResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/audit-log',
            path: {
                id: data.id
            },
            query: {
                orderDirection: data.orderDirection,
                sinceDate: data.sinceDate,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentByIdCopy(data: PostDocumentByIdCopyData): CancelablePromise<PostDocumentByIdCopyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdDomains(data: GetDocumentByIdDomainsData): CancelablePromise<GetDocumentByIdDomainsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/domains',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdDomains(data: PutDocumentByIdDomainsData): CancelablePromise<PutDocumentByIdDomainsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/domains',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdMove(data: PutDocumentByIdMoveData): CancelablePromise<PutDocumentByIdMoveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdMoveToRecycleBin(data: PutDocumentByIdMoveToRecycleBinData): CancelablePromise<PutDocumentByIdMoveToRecycleBinResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdNotifications(data: GetDocumentByIdNotificationsData): CancelablePromise<GetDocumentByIdNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdNotifications(data: PutDocumentByIdNotificationsData): CancelablePromise<PutDocumentByIdNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/notifications',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentByIdPublicAccess(data: PostDocumentByIdPublicAccessData): CancelablePromise<PostDocumentByIdPublicAccessResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentByIdPublicAccess(data: DeleteDocumentByIdPublicAccessData): CancelablePromise<DeleteDocumentByIdPublicAccessResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdPublicAccess(data: GetDocumentByIdPublicAccessData): CancelablePromise<GetDocumentByIdPublicAccessResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdPublicAccess(data: PutDocumentByIdPublicAccessData): CancelablePromise<PutDocumentByIdPublicAccessResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/public-access',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdPublish(data: PutDocumentByIdPublishData): CancelablePromise<PutDocumentByIdPublishResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/publish',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdPublishWithDescendants(data: PutDocumentByIdPublishWithDescendantsData): CancelablePromise<PutDocumentByIdPublishWithDescendantsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdPublished(data: GetDocumentByIdPublishedData): CancelablePromise<GetDocumentByIdPublishedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/published',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdReferencedBy(data: GetDocumentByIdReferencedByData): CancelablePromise<GetDocumentByIdReferencedByResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/referenced-by',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentByIdReferencedDescendants(data: GetDocumentByIdReferencedDescendantsData): CancelablePromise<GetDocumentByIdReferencedDescendantsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdUnpublish(data: PutDocumentByIdUnpublishData): CancelablePromise<PutDocumentByIdUnpublishResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/unpublish',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @deprecated
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentByIdValidate(data: PutDocumentByIdValidateData): CancelablePromise<PutDocumentByIdValidateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/{id}/validate',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putUmbracoManagementApiV11DocumentByIdValidate11(data: PutUmbracoManagementApiV11DocumentByIdValidate11Data): CancelablePromise<PutUmbracoManagementApiV11DocumentByIdValidate11Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1.1/document/{id}/validate',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentAreReferenced(data: GetDocumentAreReferencedData = {}): CancelablePromise<GetDocumentAreReferencedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/are-referenced',
            query: {
                id: data.id,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentConfiguration(): CancelablePromise<GetDocumentConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentSort(data: PutDocumentSortData = {}): CancelablePromise<PutDocumentSortResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document/sort',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentUrls(data: GetDocumentUrlsData = {}): CancelablePromise<GetDocumentUrlsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document/urls',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postDocumentValidate(data: PostDocumentValidateData = {}): CancelablePromise<PostDocumentValidateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document/validate',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocument(data: GetItemDocumentData = {}): CancelablePromise<GetItemDocumentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @param data.parentId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentSearch(data: GetItemDocumentSearchData = {}): CancelablePromise<GetItemDocumentSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take,
                parentId: data.parentId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinDocument(): CancelablePromise<DeleteRecycleBinDocumentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/document',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinDocumentById(data: DeleteRecycleBinDocumentByIdData): CancelablePromise<DeleteRecycleBinDocumentByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinDocumentByIdOriginalParent(data: GetRecycleBinDocumentByIdOriginalParentData): CancelablePromise<GetRecycleBinDocumentByIdOriginalParentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putRecycleBinDocumentByIdRestore(data: PutRecycleBinDocumentByIdRestoreData): CancelablePromise<PutRecycleBinDocumentByIdRestoreResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinDocumentChildren(data: GetRecycleBinDocumentChildrenData = {}): CancelablePromise<GetRecycleBinDocumentChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/document/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinDocumentRoot(data: GetRecycleBinDocumentRootData = {}): CancelablePromise<GetRecycleBinDocumentRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/document/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentAncestors(data: GetTreeDocumentAncestorsData = {}): CancelablePromise<GetTreeDocumentAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentChildren(data: GetTreeDocumentChildrenData = {}): CancelablePromise<GetTreeDocumentChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentRoot(data: GetTreeDocumentRootData = {}): CancelablePromise<GetTreeDocumentRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document/root',
            query: {
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DocumentBlueprintService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentBlueprint(data: PostDocumentBlueprintData = {}): CancelablePromise<PostDocumentBlueprintResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-blueprint',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentBlueprintById(data: GetDocumentBlueprintByIdData): CancelablePromise<GetDocumentBlueprintByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentBlueprintById(data: DeleteDocumentBlueprintByIdData): CancelablePromise<DeleteDocumentBlueprintByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentBlueprintById(data: PutDocumentBlueprintByIdData): CancelablePromise<PutDocumentBlueprintByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-blueprint/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentBlueprintByIdMove(data: PutDocumentBlueprintByIdMoveData): CancelablePromise<PutDocumentBlueprintByIdMoveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentBlueprintFolder(data: PostDocumentBlueprintFolderData = {}): CancelablePromise<PostDocumentBlueprintFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-blueprint/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentBlueprintFolderById(data: GetDocumentBlueprintFolderByIdData): CancelablePromise<GetDocumentBlueprintFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentBlueprintFolderById(data: DeleteDocumentBlueprintFolderByIdData): CancelablePromise<DeleteDocumentBlueprintFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentBlueprintFolderById(data: PutDocumentBlueprintFolderByIdData): CancelablePromise<PutDocumentBlueprintFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentBlueprintFromDocument(data: PostDocumentBlueprintFromDocumentData = {}): CancelablePromise<PostDocumentBlueprintFromDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-blueprint/from-document',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentBlueprint(data: GetItemDocumentBlueprintData = {}): CancelablePromise<GetItemDocumentBlueprintResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document-blueprint',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentBlueprintAncestors(data: GetTreeDocumentBlueprintAncestorsData = {}): CancelablePromise<GetTreeDocumentBlueprintAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentBlueprintChildren(data: GetTreeDocumentBlueprintChildrenData = {}): CancelablePromise<GetTreeDocumentBlueprintChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-blueprint/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentBlueprintRoot(data: GetTreeDocumentBlueprintRootData = {}): CancelablePromise<GetTreeDocumentBlueprintRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-blueprint/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DocumentTypeService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentType(data: PostDocumentTypeData = {}): CancelablePromise<PostDocumentTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeById(data: GetDocumentTypeByIdData): CancelablePromise<GetDocumentTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentTypeById(data: DeleteDocumentTypeByIdData): CancelablePromise<DeleteDocumentTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeById(data: PutDocumentTypeByIdData): CancelablePromise<PutDocumentTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdAllowedChildren(data: GetDocumentTypeByIdAllowedChildrenData): CancelablePromise<GetDocumentTypeByIdAllowedChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdBlueprint(data: GetDocumentTypeByIdBlueprintData): CancelablePromise<GetDocumentTypeByIdBlueprintResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdCompositionReferences(data: GetDocumentTypeByIdCompositionReferencesData): CancelablePromise<GetDocumentTypeByIdCompositionReferencesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentTypeByIdCopy(data: PostDocumentTypeByIdCopyData): CancelablePromise<PostDocumentTypeByIdCopyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeByIdExport(data: GetDocumentTypeByIdExportData): CancelablePromise<GetDocumentTypeByIdExportResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/{id}/export',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeByIdImport(data: PutDocumentTypeByIdImportData): CancelablePromise<PutDocumentTypeByIdImportResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/{id}/import',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeByIdMove(data: PutDocumentTypeByIdMoveData): CancelablePromise<PutDocumentTypeByIdMoveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeAllowedAtRoot(data: GetDocumentTypeAllowedAtRootData = {}): CancelablePromise<GetDocumentTypeAllowedAtRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/allowed-at-root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postDocumentTypeAvailableCompositions(data: PostDocumentTypeAvailableCompositionsData = {}): CancelablePromise<PostDocumentTypeAvailableCompositionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/available-compositions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeConfiguration(): CancelablePromise<GetDocumentTypeConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentTypeFolder(data: PostDocumentTypeFolderData = {}): CancelablePromise<PostDocumentTypeFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentTypeFolderById(data: GetDocumentTypeFolderByIdData): CancelablePromise<GetDocumentTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteDocumentTypeFolderById(data: DeleteDocumentTypeFolderByIdData): CancelablePromise<DeleteDocumentTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentTypeFolderById(data: PutDocumentTypeFolderByIdData): CancelablePromise<PutDocumentTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-type/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postDocumentTypeImport(data: PostDocumentTypeImportData = {}): CancelablePromise<PostDocumentTypeImportResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-type/import',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentType(data: GetItemDocumentTypeData = {}): CancelablePromise<GetItemDocumentTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemDocumentTypeSearch(data: GetItemDocumentTypeSearchData = {}): CancelablePromise<GetItemDocumentTypeSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/document-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentTypeAncestors(data: GetTreeDocumentTypeAncestorsData = {}): CancelablePromise<GetTreeDocumentTypeAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-type/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentTypeChildren(data: GetTreeDocumentTypeChildrenData = {}): CancelablePromise<GetTreeDocumentTypeChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-type/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeDocumentTypeRoot(data: GetTreeDocumentTypeRootData = {}): CancelablePromise<GetTreeDocumentTypeRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/document-type/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class DocumentVersionService {
    /**
     * @param data The data for the request.
     * @param data.documentId
     * @param data.culture
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentVersion(data: GetDocumentVersionData): CancelablePromise<GetDocumentVersionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-version',
            query: {
                documentId: data.documentId,
                culture: data.culture,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getDocumentVersionById(data: GetDocumentVersionByIdData): CancelablePromise<GetDocumentVersionByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/document-version/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.preventCleanup
     * @returns string OK
     * @throws ApiError
     */
    public static putDocumentVersionByIdPreventCleanup(data: PutDocumentVersionByIdPreventCleanupData): CancelablePromise<PutDocumentVersionByIdPreventCleanupResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',
            path: {
                id: data.id
            },
            query: {
                preventCleanup: data.preventCleanup
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.culture
     * @returns string OK
     * @throws ApiError
     */
    public static postDocumentVersionByIdRollback(data: PostDocumentVersionByIdRollbackData): CancelablePromise<PostDocumentVersionByIdRollbackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/document-version/{id}/rollback',
            path: {
                id: data.id
            },
            query: {
                culture: data.culture
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class DynamicRootService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postDynamicRootQuery(data: PostDynamicRootQueryData = {}): CancelablePromise<PostDynamicRootQueryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/dynamic-root/query',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static getDynamicRootSteps(): CancelablePromise<GetDynamicRootStepsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/dynamic-root/steps',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class HealthCheckService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getHealthCheckGroup(data: GetHealthCheckGroupData = {}): CancelablePromise<GetHealthCheckGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/health-check-group',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns unknown OK
     * @throws ApiError
     */
    public static getHealthCheckGroupByName(data: GetHealthCheckGroupByNameData): CancelablePromise<GetHealthCheckGroupByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/health-check-group/{name}',
            path: {
                name: data.name
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns unknown OK
     * @throws ApiError
     */
    public static postHealthCheckGroupByNameCheck(data: PostHealthCheckGroupByNameCheckData): CancelablePromise<PostHealthCheckGroupByNameCheckResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/health-check-group/{name}/check',
            path: {
                name: data.name
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postHealthCheckExecuteAction(data: PostHealthCheckExecuteActionData = {}): CancelablePromise<PostHealthCheckExecuteActionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/health-check/execute-action',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class HelpService {
    /**
     * @param data The data for the request.
     * @param data.section
     * @param data.tree
     * @param data.skip
     * @param data.take
     * @param data.baseUrl
     * @returns unknown OK
     * @throws ApiError
     */
    public static getHelp(data: GetHelpData = {}): CancelablePromise<GetHelpResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/help',
            query: {
                section: data.section,
                tree: data.tree,
                skip: data.skip,
                take: data.take,
                baseUrl: data.baseUrl
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class ImagingService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.height
     * @param data.width
     * @param data.mode
     * @returns unknown OK
     * @throws ApiError
     */
    public static getImagingResizeUrls(data: GetImagingResizeUrlsData = {}): CancelablePromise<GetImagingResizeUrlsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/imaging/resize/urls',
            query: {
                id: data.id,
                height: data.height,
                width: data.width,
                mode: data.mode
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ImportService {
    /**
     * @param data The data for the request.
     * @param data.temporaryFileId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getImportAnalyze(data: GetImportAnalyzeData = {}): CancelablePromise<GetImportAnalyzeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/import/analyze',
            query: {
                temporaryFileId: data.temporaryFileId
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
}

export class IndexerService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getIndexer(data: GetIndexerData = {}): CancelablePromise<GetIndexerResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/indexer',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.indexName
     * @returns unknown OK
     * @throws ApiError
     */
    public static getIndexerByIndexName(data: GetIndexerByIndexNameData): CancelablePromise<GetIndexerByIndexNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/indexer/{indexName}',
            path: {
                indexName: data.indexName
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.indexName
     * @returns string OK
     * @throws ApiError
     */
    public static postIndexerByIndexNameRebuild(data: PostIndexerByIndexNameRebuildData): CancelablePromise<PostIndexerByIndexNameRebuildResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',
            path: {
                indexName: data.indexName
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
}

export class InstallService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getInstallSettings(): CancelablePromise<GetInstallSettingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/install/settings',
            errors: {
                428: 'Precondition Required'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postInstallSetup(data: PostInstallSetupData = {}): CancelablePromise<PostInstallSetupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/install/setup',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                428: 'Precondition Required'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postInstallValidateDatabase(data: PostInstallValidateDatabaseData = {}): CancelablePromise<PostInstallValidateDatabaseResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/install/validate-database',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request'
            }
        });
    }
    
}

export class LanguageService {
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemLanguage(data: GetItemLanguageData = {}): CancelablePromise<GetItemLanguageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/language',
            query: {
                isoCode: data.isoCode
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemLanguageDefault(): CancelablePromise<GetItemLanguageDefaultResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/language/default',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLanguage(data: GetLanguageData = {}): CancelablePromise<GetLanguageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/language',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postLanguage(data: PostLanguageData = {}): CancelablePromise<PostLanguageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/language',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLanguageByIsoCode(data: GetLanguageByIsoCodeData): CancelablePromise<GetLanguageByIsoCodeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/language/{isoCode}',
            path: {
                isoCode: data.isoCode
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @returns string OK
     * @throws ApiError
     */
    public static deleteLanguageByIsoCode(data: DeleteLanguageByIsoCodeData): CancelablePromise<DeleteLanguageByIsoCodeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/language/{isoCode}',
            path: {
                isoCode: data.isoCode
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isoCode
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putLanguageByIsoCode(data: PutLanguageByIsoCodeData): CancelablePromise<PutLanguageByIsoCodeResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/language/{isoCode}',
            path: {
                isoCode: data.isoCode
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class LogViewerService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerLevel(data: GetLogViewerLevelData = {}): CancelablePromise<GetLogViewerLevelResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/level',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerLevelCount(data: GetLogViewerLevelCountData = {}): CancelablePromise<GetLogViewerLevelCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/level-count',
            query: {
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.orderDirection
     * @param data.filterExpression
     * @param data.logLevel
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerLog(data: GetLogViewerLogData = {}): CancelablePromise<GetLogViewerLogResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/log',
            query: {
                skip: data.skip,
                take: data.take,
                orderDirection: data.orderDirection,
                filterExpression: data.filterExpression,
                logLevel: data.logLevel,
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerMessageTemplate(data: GetLogViewerMessageTemplateData = {}): CancelablePromise<GetLogViewerMessageTemplateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/message-template',
            query: {
                skip: data.skip,
                take: data.take,
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerSavedSearch(data: GetLogViewerSavedSearchData = {}): CancelablePromise<GetLogViewerSavedSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postLogViewerSavedSearch(data: PostLogViewerSavedSearchData = {}): CancelablePromise<PostLogViewerSavedSearchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/log-viewer/saved-search',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerSavedSearchByName(data: GetLogViewerSavedSearchByNameData): CancelablePromise<GetLogViewerSavedSearchByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            path: {
                name: data.name
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns string OK
     * @throws ApiError
     */
    public static deleteLogViewerSavedSearchByName(data: DeleteLogViewerSavedSearchByNameData): CancelablePromise<DeleteLogViewerSavedSearchByNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',
            path: {
                name: data.name
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.startDate
     * @param data.endDate
     * @returns unknown OK
     * @throws ApiError
     */
    public static getLogViewerValidateLogsSize(data: GetLogViewerValidateLogsSizeData = {}): CancelablePromise<GetLogViewerValidateLogsSizeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',
            query: {
                startDate: data.startDate,
                endDate: data.endDate
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ManifestService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getManifestManifest(): CancelablePromise<GetManifestManifestResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/manifest/manifest',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getManifestManifestPrivate(): CancelablePromise<GetManifestManifestPrivateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/manifest/manifest/private',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getManifestManifestPublic(): CancelablePromise<GetManifestManifestPublicResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/manifest/manifest/public'
        });
    }
    
}

export class MediaService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.dataTypeId
     * @param data.orderBy
     * @param data.orderDirection
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getCollectionMedia(data: GetCollectionMediaData = {}): CancelablePromise<GetCollectionMediaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/collection/media',
            query: {
                id: data.id,
                dataTypeId: data.dataTypeId,
                orderBy: data.orderBy,
                orderDirection: data.orderDirection,
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMedia(data: GetItemMediaData = {}): CancelablePromise<GetItemMediaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @param data.parentId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaSearch(data: GetItemMediaSearchData = {}): CancelablePromise<GetItemMediaSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take,
                parentId: data.parentId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMedia(data: PostMediaData = {}): CancelablePromise<PostMediaResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaById(data: GetMediaByIdData): CancelablePromise<GetMediaByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMediaById(data: DeleteMediaByIdData): CancelablePromise<DeleteMediaByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/media/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaById(data: PutMediaByIdData): CancelablePromise<PutMediaByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.orderDirection
     * @param data.sinceDate
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaByIdAuditLog(data: GetMediaByIdAuditLogData): CancelablePromise<GetMediaByIdAuditLogResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}/audit-log',
            path: {
                id: data.id
            },
            query: {
                orderDirection: data.orderDirection,
                sinceDate: data.sinceDate,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaByIdMove(data: PutMediaByIdMoveData): CancelablePromise<PutMediaByIdMoveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaByIdMoveToRecycleBin(data: PutMediaByIdMoveToRecycleBinData): CancelablePromise<PutMediaByIdMoveToRecycleBinResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaByIdReferencedBy(data: GetMediaByIdReferencedByData): CancelablePromise<GetMediaByIdReferencedByResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}/referenced-by',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaByIdReferencedDescendants(data: GetMediaByIdReferencedDescendantsData): CancelablePromise<GetMediaByIdReferencedDescendantsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaByIdValidate(data: PutMediaByIdValidateData): CancelablePromise<PutMediaByIdValidateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/{id}/validate',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaAreReferenced(data: GetMediaAreReferencedData = {}): CancelablePromise<GetMediaAreReferencedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/are-referenced',
            query: {
                id: data.id,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaConfiguration(): CancelablePromise<GetMediaConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaSort(data: PutMediaSortData = {}): CancelablePromise<PutMediaSortResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media/sort',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaUrls(data: GetMediaUrlsData = {}): CancelablePromise<GetMediaUrlsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media/urls',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postMediaValidate(data: PostMediaValidateData = {}): CancelablePromise<PostMediaValidateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media/validate',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinMedia(): CancelablePromise<DeleteRecycleBinMediaResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/media',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRecycleBinMediaById(data: DeleteRecycleBinMediaByIdData): CancelablePromise<DeleteRecycleBinMediaByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinMediaByIdOriginalParent(data: GetRecycleBinMediaByIdOriginalParentData): CancelablePromise<GetRecycleBinMediaByIdOriginalParentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putRecycleBinMediaByIdRestore(data: PutRecycleBinMediaByIdRestoreData): CancelablePromise<PutRecycleBinMediaByIdRestoreResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinMediaChildren(data: GetRecycleBinMediaChildrenData = {}): CancelablePromise<GetRecycleBinMediaChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/media/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRecycleBinMediaRoot(data: GetRecycleBinMediaRootData = {}): CancelablePromise<GetRecycleBinMediaRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/recycle-bin/media/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaAncestors(data: GetTreeMediaAncestorsData = {}): CancelablePromise<GetTreeMediaAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaChildren(data: GetTreeMediaChildrenData = {}): CancelablePromise<GetTreeMediaChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.dataTypeId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaRoot(data: GetTreeMediaRootData = {}): CancelablePromise<GetTreeMediaRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media/root',
            query: {
                skip: data.skip,
                take: data.take,
                dataTypeId: data.dataTypeId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class MediaTypeService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaType(data: GetItemMediaTypeData = {}): CancelablePromise<GetItemMediaTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.fileExtension
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaTypeAllowed(data: GetItemMediaTypeAllowedData = {}): CancelablePromise<GetItemMediaTypeAllowedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type/allowed',
            query: {
                fileExtension: data.fileExtension,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaTypeFolders(data: GetItemMediaTypeFoldersData = {}): CancelablePromise<GetItemMediaTypeFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type/folders',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMediaTypeSearch(data: GetItemMediaTypeSearchData = {}): CancelablePromise<GetItemMediaTypeSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/media-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaType(data: PostMediaTypeData = {}): CancelablePromise<PostMediaTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeById(data: GetMediaTypeByIdData): CancelablePromise<GetMediaTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMediaTypeById(data: DeleteMediaTypeByIdData): CancelablePromise<DeleteMediaTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/media-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeById(data: PutMediaTypeByIdData): CancelablePromise<PutMediaTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeByIdAllowedChildren(data: GetMediaTypeByIdAllowedChildrenData): CancelablePromise<GetMediaTypeByIdAllowedChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeByIdCompositionReferences(data: GetMediaTypeByIdCompositionReferencesData): CancelablePromise<GetMediaTypeByIdCompositionReferencesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaTypeByIdCopy(data: PostMediaTypeByIdCopyData): CancelablePromise<PostMediaTypeByIdCopyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/{id}/copy',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeByIdExport(data: GetMediaTypeByIdExportData): CancelablePromise<GetMediaTypeByIdExportResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/{id}/export',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeByIdImport(data: PutMediaTypeByIdImportData): CancelablePromise<PutMediaTypeByIdImportResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/{id}/import',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeByIdMove(data: PutMediaTypeByIdMoveData): CancelablePromise<PutMediaTypeByIdMoveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/{id}/move',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeAllowedAtRoot(data: GetMediaTypeAllowedAtRootData = {}): CancelablePromise<GetMediaTypeAllowedAtRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/allowed-at-root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postMediaTypeAvailableCompositions(data: PostMediaTypeAvailableCompositionsData = {}): CancelablePromise<PostMediaTypeAvailableCompositionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/available-compositions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeConfiguration(): CancelablePromise<GetMediaTypeConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaTypeFolder(data: PostMediaTypeFolderData = {}): CancelablePromise<PostMediaTypeFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMediaTypeFolderById(data: GetMediaTypeFolderByIdData): CancelablePromise<GetMediaTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMediaTypeFolderById(data: DeleteMediaTypeFolderByIdData): CancelablePromise<DeleteMediaTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMediaTypeFolderById(data: PutMediaTypeFolderByIdData): CancelablePromise<PutMediaTypeFolderByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/media-type/folder/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMediaTypeImport(data: PostMediaTypeImportData = {}): CancelablePromise<PostMediaTypeImportResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/media-type/import',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaTypeAncestors(data: GetTreeMediaTypeAncestorsData = {}): CancelablePromise<GetTreeMediaTypeAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media-type/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaTypeChildren(data: GetTreeMediaTypeChildrenData = {}): CancelablePromise<GetTreeMediaTypeChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media-type/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.foldersOnly
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMediaTypeRoot(data: GetTreeMediaTypeRootData = {}): CancelablePromise<GetTreeMediaTypeRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/media-type/root',
            query: {
                skip: data.skip,
                take: data.take,
                foldersOnly: data.foldersOnly
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class MemberService {
    /**
     * @param data The data for the request.
     * @param data.memberTypeId
     * @param data.memberGroupName
     * @param data.isApproved
     * @param data.isLockedOut
     * @param data.orderBy
     * @param data.orderDirection
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterMember(data: GetFilterMemberData = {}): CancelablePromise<GetFilterMemberResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/member',
            query: {
                memberTypeId: data.memberTypeId,
                memberGroupName: data.memberGroupName,
                isApproved: data.isApproved,
                isLockedOut: data.isLockedOut,
                orderBy: data.orderBy,
                orderDirection: data.orderDirection,
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMember(data: GetItemMemberData = {}): CancelablePromise<GetItemMemberResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberSearch(data: GetItemMemberSearchData = {}): CancelablePromise<GetItemMemberSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMember(data: PostMemberData = {}): CancelablePromise<PostMemberResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberById(data: GetMemberByIdData): CancelablePromise<GetMemberByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMemberById(data: DeleteMemberByIdData): CancelablePromise<DeleteMemberByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/member/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberById(data: PutMemberByIdData): CancelablePromise<PutMemberByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberByIdValidate(data: PutMemberByIdValidateData): CancelablePromise<PutMemberByIdValidateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member/{id}/validate',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberConfiguration(): CancelablePromise<GetMemberConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postMemberValidate(data: PostMemberValidateData = {}): CancelablePromise<PostMemberValidateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member/validate',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class MemberGroupService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberGroup(data: GetItemMemberGroupData = {}): CancelablePromise<GetItemMemberGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member-group',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberGroup(data: GetMemberGroupData = {}): CancelablePromise<GetMemberGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-group',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMemberGroup(data: PostMemberGroupData = {}): CancelablePromise<PostMemberGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-group',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberGroupById(data: GetMemberGroupByIdData): CancelablePromise<GetMemberGroupByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-group/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMemberGroupById(data: DeleteMemberGroupByIdData): CancelablePromise<DeleteMemberGroupByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/member-group/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberGroupById(data: PutMemberGroupByIdData): CancelablePromise<PutMemberGroupByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member-group/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMemberGroupRoot(data: GetTreeMemberGroupRootData = {}): CancelablePromise<GetTreeMemberGroupRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/member-group/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class MemberTypeService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberType(data: GetItemMemberTypeData = {}): CancelablePromise<GetItemMemberTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemMemberTypeSearch(data: GetItemMemberTypeSearchData = {}): CancelablePromise<GetItemMemberTypeSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/member-type/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postMemberType(data: PostMemberTypeData = {}): CancelablePromise<PostMemberTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-type',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberTypeById(data: GetMemberTypeByIdData): CancelablePromise<GetMemberTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteMemberTypeById(data: DeleteMemberTypeByIdData): CancelablePromise<DeleteMemberTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/member-type/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putMemberTypeById(data: PutMemberTypeByIdData): CancelablePromise<PutMemberTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/member-type/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberTypeByIdCompositionReferences(data: GetMemberTypeByIdCompositionReferencesData): CancelablePromise<GetMemberTypeByIdCompositionReferencesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string Created
     * @throws ApiError
     */
    public static postMemberTypeByIdCopy(data: PostMemberTypeByIdCopyData): CancelablePromise<PostMemberTypeByIdCopyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-type/{id}/copy',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postMemberTypeAvailableCompositions(data: PostMemberTypeAvailableCompositionsData = {}): CancelablePromise<PostMemberTypeAvailableCompositionsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/member-type/available-compositions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getMemberTypeConfiguration(): CancelablePromise<GetMemberTypeConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/member-type/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeMemberTypeRoot(data: GetTreeMemberTypeRootData = {}): CancelablePromise<GetTreeMemberTypeRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/member-type/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ModelsBuilderService {
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postModelsBuilderBuild(): CancelablePromise<PostModelsBuilderBuildResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/models-builder/build',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                428: 'Precondition Required'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getModelsBuilderDashboard(): CancelablePromise<GetModelsBuilderDashboardResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/models-builder/dashboard',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getModelsBuilderStatus(): CancelablePromise<GetModelsBuilderStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/models-builder/status',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ObjectTypesService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getObjectTypes(data: GetObjectTypesData = {}): CancelablePromise<GetObjectTypesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/object-types',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class OEmbedService {
    /**
     * @param data The data for the request.
     * @param data.url
     * @param data.maxWidth
     * @param data.maxHeight
     * @returns unknown OK
     * @throws ApiError
     */
    public static getOembedQuery(data: GetOembedQueryData = {}): CancelablePromise<GetOembedQueryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/oembed/query',
            query: {
                url: data.url,
                maxWidth: data.maxWidth,
                maxHeight: data.maxHeight
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PackageService {
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns string OK
     * @throws ApiError
     */
    public static postPackageByNameRunMigration(data: PostPackageByNameRunMigrationData): CancelablePromise<PostPackageByNameRunMigrationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/package/{name}/run-migration',
            path: {
                name: data.name
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found',
                409: 'Conflict'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageConfiguration(): CancelablePromise<GetPackageConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageCreated(data: GetPackageCreatedData = {}): CancelablePromise<GetPackageCreatedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/created',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postPackageCreated(data: PostPackageCreatedData = {}): CancelablePromise<PostPackageCreatedResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/package/created',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageCreatedById(data: GetPackageCreatedByIdData): CancelablePromise<GetPackageCreatedByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/created/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deletePackageCreatedById(data: DeletePackageCreatedByIdData): CancelablePromise<DeletePackageCreatedByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/package/created/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putPackageCreatedById(data: PutPackageCreatedByIdData): CancelablePromise<PutPackageCreatedByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/package/created/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageCreatedByIdDownload(data: GetPackageCreatedByIdDownloadData): CancelablePromise<GetPackageCreatedByIdDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/created/{id}/download',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPackageMigrationStatus(data: GetPackageMigrationStatusData = {}): CancelablePromise<GetPackageMigrationStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/package/migration-status',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PartialViewService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemPartialView(data: GetItemPartialViewData = {}): CancelablePromise<GetItemPartialViewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/partial-view',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postPartialView(data: PostPartialViewData = {}): CancelablePromise<PostPartialViewResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/partial-view',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewByPath(data: GetPartialViewByPathData): CancelablePromise<GetPartialViewByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deletePartialViewByPath(data: DeletePartialViewByPathData): CancelablePromise<DeletePartialViewByPathResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/partial-view/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putPartialViewByPath(data: PutPartialViewByPathData): CancelablePromise<PutPartialViewByPathResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/partial-view/{path}',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static putPartialViewByPathRename(data: PutPartialViewByPathRenameData): CancelablePromise<PutPartialViewByPathRenameResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/partial-view/{path}/rename',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postPartialViewFolder(data: PostPartialViewFolderData = {}): CancelablePromise<PostPartialViewFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/partial-view/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewFolderByPath(data: GetPartialViewFolderByPathData): CancelablePromise<GetPartialViewFolderByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deletePartialViewFolderByPath(data: DeletePartialViewFolderByPathData): CancelablePromise<DeletePartialViewFolderByPathResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/partial-view/folder/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewSnippet(data: GetPartialViewSnippetData = {}): CancelablePromise<GetPartialViewSnippetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/snippet',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getPartialViewSnippetById(data: GetPartialViewSnippetByIdData): CancelablePromise<GetPartialViewSnippetByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreePartialViewAncestors(data: GetTreePartialViewAncestorsData = {}): CancelablePromise<GetTreePartialViewAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreePartialViewChildren(data: GetTreePartialViewChildrenData = {}): CancelablePromise<GetTreePartialViewChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/partial-view/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreePartialViewRoot(data: GetTreePartialViewRootData = {}): CancelablePromise<GetTreePartialViewRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/partial-view/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PreviewService {
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static deletePreview(): CancelablePromise<DeletePreviewResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/preview',
            responseHeader: 'Umb-Notifications'
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postPreview(): CancelablePromise<PostPreviewResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/preview',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class ProfilingService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getProfilingStatus(): CancelablePromise<GetProfilingStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/profiling/status',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putProfilingStatus(data: PutProfilingStatusData = {}): CancelablePromise<PutProfilingStatusResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/profiling/status',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PropertyTypeService {
    /**
     * @param data The data for the request.
     * @param data.contentTypeId
     * @param data.propertyAlias
     * @returns boolean OK
     * @throws ApiError
     */
    public static getPropertyTypeIsUsed(data: GetPropertyTypeIsUsedData = {}): CancelablePromise<GetPropertyTypeIsUsedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/property-type/is-used',
            query: {
                contentTypeId: data.contentTypeId,
                propertyAlias: data.propertyAlias
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class PublishedCacheService {
    /**
     * @deprecated
     * @throws ApiError
     */
    public static postPublishedCacheCollect(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/published-cache/collect',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                501: 'Not Implemented'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postPublishedCacheRebuild(): CancelablePromise<PostPublishedCacheRebuildResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/published-cache/rebuild',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postPublishedCacheReload(): CancelablePromise<PostPublishedCacheReloadResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/published-cache/reload',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @deprecated
     * @throws ApiError
     */
    public static getPublishedCacheStatus(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/published-cache/status',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                501: 'Not Implemented'
            }
        });
    }
    
}

export class RedirectManagementService {
    /**
     * @param data The data for the request.
     * @param data.filter
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRedirectManagement(data: GetRedirectManagementData = {}): CancelablePromise<GetRedirectManagementResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/redirect-management',
            query: {
                filter: data.filter,
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRedirectManagementById(data: GetRedirectManagementByIdData): CancelablePromise<GetRedirectManagementByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteRedirectManagementById(data: DeleteRedirectManagementByIdData): CancelablePromise<DeleteRedirectManagementByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/redirect-management/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRedirectManagementStatus(): CancelablePromise<GetRedirectManagementStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/redirect-management/status',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.status
     * @returns string OK
     * @throws ApiError
     */
    public static postRedirectManagementStatus(data: PostRedirectManagementStatusData = {}): CancelablePromise<PostRedirectManagementStatusResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/redirect-management/status',
            query: {
                status: data.status
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class RelationService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRelationByRelationTypeId(data: GetRelationByRelationTypeIdData): CancelablePromise<GetRelationByRelationTypeIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/relation/type/{id}',
            path: {
                id: data.id
            },
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class RelationTypeService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemRelationType(data: GetItemRelationTypeData = {}): CancelablePromise<GetItemRelationTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/relation-type',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRelationType(data: GetRelationTypeData = {}): CancelablePromise<GetRelationTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/relation-type',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getRelationTypeById(data: GetRelationTypeByIdData): CancelablePromise<GetRelationTypeByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/relation-type/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class ScriptService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemScript(data: GetItemScriptData = {}): CancelablePromise<GetItemScriptResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/script',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postScript(data: PostScriptData = {}): CancelablePromise<PostScriptResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/script',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getScriptByPath(data: GetScriptByPathData): CancelablePromise<GetScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/script/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteScriptByPath(data: DeleteScriptByPathData): CancelablePromise<DeleteScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/script/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putScriptByPath(data: PutScriptByPathData): CancelablePromise<PutScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/script/{path}',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static putScriptByPathRename(data: PutScriptByPathRenameData): CancelablePromise<PutScriptByPathRenameResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/script/{path}/rename',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postScriptFolder(data: PostScriptFolderData = {}): CancelablePromise<PostScriptFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/script/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getScriptFolderByPath(data: GetScriptFolderByPathData): CancelablePromise<GetScriptFolderByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/script/folder/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteScriptFolderByPath(data: DeleteScriptFolderByPathData): CancelablePromise<DeleteScriptFolderByPathResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/script/folder/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeScriptAncestors(data: GetTreeScriptAncestorsData = {}): CancelablePromise<GetTreeScriptAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/script/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeScriptChildren(data: GetTreeScriptChildrenData = {}): CancelablePromise<GetTreeScriptChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/script/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeScriptRoot(data: GetTreeScriptRootData = {}): CancelablePromise<GetTreeScriptRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/script/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class SearcherService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSearcher(data: GetSearcherData = {}): CancelablePromise<GetSearcherResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/searcher',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searcherName
     * @param data.term
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSearcherBySearcherNameQuery(data: GetSearcherBySearcherNameQueryData): CancelablePromise<GetSearcherBySearcherNameQueryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',
            path: {
                searcherName: data.searcherName
            },
            query: {
                term: data.term,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
}

export class SecurityService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSecurityConfiguration(): CancelablePromise<GetSecurityConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/security/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postSecurityForgotPassword(data: PostSecurityForgotPasswordData = {}): CancelablePromise<PostSecurityForgotPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/security/forgot-password',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string No Content
     * @throws ApiError
     */
    public static postSecurityForgotPasswordReset(data: PostSecurityForgotPasswordResetData = {}): CancelablePromise<PostSecurityForgotPasswordResetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/security/forgot-password/reset',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postSecurityForgotPasswordVerify(data: PostSecurityForgotPasswordVerifyData = {}): CancelablePromise<PostSecurityForgotPasswordVerifyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/security/forgot-password/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                404: 'Not Found'
            }
        });
    }
    
}

export class SegmentService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getSegment(data: GetSegmentData = {}): CancelablePromise<GetSegmentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/segment',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class ServerService {
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerConfiguration(): CancelablePromise<GetServerConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerInformation(): CancelablePromise<GetServerInformationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/information',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerStatus(): CancelablePromise<GetServerStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/status',
            errors: {
                400: 'Bad Request'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerTroubleshooting(): CancelablePromise<GetServerTroubleshootingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/troubleshooting',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getServerUpgradeCheck(): CancelablePromise<GetServerUpgradeCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/server/upgrade-check',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class StaticFileService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemStaticFile(data: GetItemStaticFileData = {}): CancelablePromise<GetItemStaticFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/static-file',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStaticFileAncestors(data: GetTreeStaticFileAncestorsData = {}): CancelablePromise<GetTreeStaticFileAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/static-file/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStaticFileChildren(data: GetTreeStaticFileChildrenData = {}): CancelablePromise<GetTreeStaticFileChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/static-file/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStaticFileRoot(data: GetTreeStaticFileRootData = {}): CancelablePromise<GetTreeStaticFileRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/static-file/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class StylesheetService {
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemStylesheet(data: GetItemStylesheetData = {}): CancelablePromise<GetItemStylesheetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/stylesheet',
            query: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postStylesheet(data: PostStylesheetData = {}): CancelablePromise<PostStylesheetResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/stylesheet',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getStylesheetByPath(data: GetStylesheetByPathData): CancelablePromise<GetStylesheetByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteStylesheetByPath(data: DeleteStylesheetByPathData): CancelablePromise<DeleteStylesheetByPathResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putStylesheetByPath(data: PutStylesheetByPathData): CancelablePromise<PutStylesheetByPathResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/stylesheet/{path}',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static putStylesheetByPathRename(data: PutStylesheetByPathRenameData): CancelablePromise<PutStylesheetByPathRenameResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',
            path: {
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postStylesheetFolder(data: PostStylesheetFolderData = {}): CancelablePromise<PostStylesheetFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/stylesheet/folder',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns unknown OK
     * @throws ApiError
     */
    public static getStylesheetFolderByPath(data: GetStylesheetFolderByPathData): CancelablePromise<GetStylesheetFolderByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            path: {
                path: data.path
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.path
     * @returns string OK
     * @throws ApiError
     */
    public static deleteStylesheetFolderByPath(data: DeleteStylesheetFolderByPathData): CancelablePromise<DeleteStylesheetFolderByPathResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',
            path: {
                path: data.path
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantPath
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStylesheetAncestors(data: GetTreeStylesheetAncestorsData = {}): CancelablePromise<GetTreeStylesheetAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',
            query: {
                descendantPath: data.descendantPath
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentPath
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStylesheetChildren(data: GetTreeStylesheetChildrenData = {}): CancelablePromise<GetTreeStylesheetChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/stylesheet/children',
            query: {
                parentPath: data.parentPath,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeStylesheetRoot(data: GetTreeStylesheetRootData = {}): CancelablePromise<GetTreeStylesheetRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/stylesheet/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class TagService {
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.tagGroup
     * @param data.culture
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTag(data: GetTagData = {}): CancelablePromise<GetTagResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tag',
            query: {
                query: data.query,
                tagGroup: data.tagGroup,
                culture: data.culture,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class TelemetryService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTelemetry(data: GetTelemetryData = {}): CancelablePromise<GetTelemetryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/telemetry',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTelemetryLevel(): CancelablePromise<GetTelemetryLevelResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/telemetry/level',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postTelemetryLevel(data: PostTelemetryLevelData = {}): CancelablePromise<PostTelemetryLevelResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/telemetry/level',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class TemplateService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemTemplate(data: GetItemTemplateData = {}): CancelablePromise<GetItemTemplateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/template',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.query
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemTemplateSearch(data: GetItemTemplateSearchData = {}): CancelablePromise<GetItemTemplateSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/template/search',
            query: {
                query: data.query,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postTemplate(data: PostTemplateData = {}): CancelablePromise<PostTemplateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/template',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemplateById(data: GetTemplateByIdData): CancelablePromise<GetTemplateByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/template/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteTemplateById(data: DeleteTemplateByIdData): CancelablePromise<DeleteTemplateByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/template/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putTemplateById(data: PutTemplateByIdData): CancelablePromise<PutTemplateByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/template/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemplateConfiguration(): CancelablePromise<GetTemplateConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/template/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postTemplateQueryExecute(data: PostTemplateQueryExecuteData = {}): CancelablePromise<PostTemplateQueryExecuteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/template/query/execute',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemplateQuerySettings(): CancelablePromise<GetTemplateQuerySettingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/template/query/settings',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.descendantId
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeTemplateAncestors(data: GetTreeTemplateAncestorsData = {}): CancelablePromise<GetTreeTemplateAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/template/ancestors',
            query: {
                descendantId: data.descendantId
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.parentId
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeTemplateChildren(data: GetTreeTemplateChildrenData = {}): CancelablePromise<GetTreeTemplateChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/template/children',
            query: {
                parentId: data.parentId,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTreeTemplateRoot(data: GetTreeTemplateRootData = {}): CancelablePromise<GetTreeTemplateRootResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/tree/template/root',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class TemporaryFileService {
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns string Created
     * @throws ApiError
     */
    public static postTemporaryFile(data: PostTemporaryFileData = {}): CancelablePromise<PostTemporaryFileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/temporary-file',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemporaryFileById(data: GetTemporaryFileByIdData): CancelablePromise<GetTemporaryFileByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteTemporaryFileById(data: DeleteTemporaryFileByIdData): CancelablePromise<DeleteTemporaryFileByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/temporary-file/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getTemporaryFileConfiguration(): CancelablePromise<GetTemporaryFileConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/temporary-file/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
}

export class UpgradeService {
    /**
     * @returns string OK
     * @throws ApiError
     */
    public static postUpgradeAuthorize(): CancelablePromise<PostUpgradeAuthorizeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/upgrade/authorize',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                428: 'Precondition Required',
                500: 'Internal Server Error'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUpgradeSettings(): CancelablePromise<GetUpgradeSettingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/upgrade/settings',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                428: 'Precondition Required'
            }
        });
    }
    
}

export class UserService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.orderBy
     * @param data.orderDirection
     * @param data.userGroupIds
     * @param data.userStates
     * @param data.filter
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterUser(data: GetFilterUserData = {}): CancelablePromise<GetFilterUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/user',
            query: {
                skip: data.skip,
                take: data.take,
                orderBy: data.orderBy,
                orderDirection: data.orderDirection,
                userGroupIds: data.userGroupIds,
                userStates: data.userStates,
                filter: data.filter
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemUser(data: GetItemUserData = {}): CancelablePromise<GetItemUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/user',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUser(data: PostUserData = {}): CancelablePromise<PostUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUser(data: DeleteUserData = {}): CancelablePromise<DeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUser(data: GetUserData = {}): CancelablePromise<GetUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserById(data: GetUserByIdData): CancelablePromise<GetUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserById(data: DeleteUserByIdData): CancelablePromise<DeleteUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putUserById(data: PutUserByIdData): CancelablePromise<PutUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/user/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserById2Fa(data: GetUserById2FaData): CancelablePromise<GetUserById2FaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/{id}/2fa',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.providerName
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserById2FaByProviderName(data: DeleteUserById2FaByProviderNameData): CancelablePromise<DeleteUserById2FaByProviderNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',
            path: {
                id: data.id,
                providerName: data.providerName
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserByIdCalculateStartNodes(data: GetUserByIdCalculateStartNodesData): CancelablePromise<GetUserByIdCalculateStartNodesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/{id}/calculate-start-nodes',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserByIdChangePassword(data: PostUserByIdChangePasswordData): CancelablePromise<PostUserByIdChangePasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/{id}/change-password',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserByIdClientCredentials(data: PostUserByIdClientCredentialsData): CancelablePromise<PostUserByIdClientCredentialsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static getUserByIdClientCredentials(data: GetUserByIdClientCredentialsData): CancelablePromise<GetUserByIdClientCredentialsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/{id}/client-credentials',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.clientId
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserByIdClientCredentialsByClientId(data: DeleteUserByIdClientCredentialsByClientIdData): CancelablePromise<DeleteUserByIdClientCredentialsByClientIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/{id}/client-credentials/{clientId}',
            path: {
                id: data.id,
                clientId: data.clientId
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static postUserByIdResetPassword(data: PostUserByIdResetPasswordData): CancelablePromise<PostUserByIdResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/{id}/reset-password',
            path: {
                id: data.id
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserAvatarById(data: DeleteUserAvatarByIdData): CancelablePromise<DeleteUserAvatarByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserAvatarById(data: PostUserAvatarByIdData): CancelablePromise<PostUserAvatarByIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/avatar/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserConfiguration(): CancelablePromise<GetUserConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrent(): CancelablePromise<GetUserCurrentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrent2Fa(): CancelablePromise<GetUserCurrent2FaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/2fa',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.code
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserCurrent2FaByProviderName(data: DeleteUserCurrent2FaByProviderNameData): CancelablePromise<DeleteUserCurrent2FaByProviderNameResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            path: {
                providerName: data.providerName
            },
            query: {
                code: data.code
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postUserCurrent2FaByProviderName(data: PostUserCurrent2FaByProviderNameData): CancelablePromise<PostUserCurrent2FaByProviderNameResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            path: {
                providerName: data.providerName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerName
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrent2FaByProviderName(data: GetUserCurrent2FaByProviderNameData): CancelablePromise<GetUserCurrent2FaByProviderNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',
            path: {
                providerName: data.providerName
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserCurrentAvatar(data: PostUserCurrentAvatarData = {}): CancelablePromise<PostUserCurrentAvatarResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/current/avatar',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserCurrentChangePassword(data: PostUserCurrentChangePasswordData = {}): CancelablePromise<PostUserCurrentChangePasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/current/change-password',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentConfiguration(): CancelablePromise<GetUserCurrentConfigurationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/configuration',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentLoginProviders(): CancelablePromise<GetUserCurrentLoginProvidersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/login-providers',
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentPermissions(data: GetUserCurrentPermissionsData = {}): CancelablePromise<GetUserCurrentPermissionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/permissions',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentPermissionsDocument(data: GetUserCurrentPermissionsDocumentData = {}): CancelablePromise<GetUserCurrentPermissionsDocumentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/permissions/document',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserCurrentPermissionsMedia(data: GetUserCurrentPermissionsMediaData = {}): CancelablePromise<GetUserCurrentPermissionsMediaResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user/current/permissions/media',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserDisable(data: PostUserDisableData = {}): CancelablePromise<PostUserDisableResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/disable',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserEnable(data: PostUserEnableData = {}): CancelablePromise<PostUserEnableResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/enable',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUserInvite(data: PostUserInviteData = {}): CancelablePromise<PostUserInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserInviteCreatePassword(data: PostUserInviteCreatePasswordData = {}): CancelablePromise<PostUserInviteCreatePasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite/create-password',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserInviteResend(data: PostUserInviteResendData = {}): CancelablePromise<PostUserInviteResendResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite/resend',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public static postUserInviteVerify(data: PostUserInviteVerifyData = {}): CancelablePromise<PostUserInviteVerifyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/invite/verify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad Request',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserSetUserGroups(data: PostUserSetUserGroupsData = {}): CancelablePromise<PostUserSetUserGroupsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/set-user-groups',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserUnlock(data: PostUserUnlockData = {}): CancelablePromise<PostUserUnlockResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user/unlock',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}

export class UserDataService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUserData(data: PostUserDataData = {}): CancelablePromise<PostUserDataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user-data',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.groups
     * @param data.identifiers
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserData(data: GetUserDataData = {}): CancelablePromise<GetUserDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-data',
            query: {
                groups: data.groups,
                identifiers: data.identifiers,
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putUserData(data: PutUserDataData = {}): CancelablePromise<PutUserDataResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/user-data',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserDataById(data: GetUserDataByIdData): CancelablePromise<GetUserDataByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-data/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                404: 'Not Found'
            }
        });
    }
    
}

export class UserGroupService {
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @param data.filter
     * @returns unknown OK
     * @throws ApiError
     */
    public static getFilterUserGroup(data: GetFilterUserGroupData = {}): CancelablePromise<GetFilterUserGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/filter/user-group',
            query: {
                skip: data.skip,
                take: data.take,
                filter: data.filter
            },
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemUserGroup(data: GetItemUserGroupData = {}): CancelablePromise<GetItemUserGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/user-group',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserGroup(data: DeleteUserGroupData = {}): CancelablePromise<DeleteUserGroupResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user-group',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postUserGroup(data: PostUserGroupData = {}): CancelablePromise<PostUserGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user-group',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserGroup(data: GetUserGroupData = {}): CancelablePromise<GetUserGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-group',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getUserGroupById(data: GetUserGroupByIdData): CancelablePromise<GetUserGroupByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/user-group/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserGroupById(data: DeleteUserGroupByIdData): CancelablePromise<DeleteUserGroupByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user-group/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putUserGroupById(data: PutUserGroupByIdData): CancelablePromise<PutUserGroupByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/user-group/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static deleteUserGroupByIdUsers(data: DeleteUserGroupByIdUsersData): CancelablePromise<DeleteUserGroupByIdUsersResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static postUserGroupByIdUsers(data: PostUserGroupByIdUsersData): CancelablePromise<PostUserGroupByIdUsersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/user-group/{id}/users',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
}

export class WebhookService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getItemWebhook(data: GetItemWebhookData = {}): CancelablePromise<GetItemWebhookResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/item/webhook',
            query: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getWebhook(data: GetWebhookData = {}): CancelablePromise<GetWebhookResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/webhook',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Created
     * @throws ApiError
     */
    public static postWebhook(data: PostWebhookData = {}): CancelablePromise<PostWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/umbraco/management/api/v1/webhook',
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Generated-Resource',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown OK
     * @throws ApiError
     */
    public static getWebhookById(data: GetWebhookByIdData): CancelablePromise<GetWebhookByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/webhook/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns string OK
     * @throws ApiError
     */
    public static deleteWebhookById(data: DeleteWebhookByIdData): CancelablePromise<DeleteWebhookByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/umbraco/management/api/v1/webhook/{id}',
            path: {
                id: data.id
            },
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns string OK
     * @throws ApiError
     */
    public static putWebhookById(data: PutWebhookByIdData): CancelablePromise<PutWebhookByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/umbraco/management/api/v1/webhook/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            responseHeader: 'Umb-Notifications',
            errors: {
                400: 'Bad Request',
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource',
                404: 'Not Found'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.skip
     * @param data.take
     * @returns unknown OK
     * @throws ApiError
     */
    public static getWebhookEvents(data: GetWebhookEventsData = {}): CancelablePromise<GetWebhookEventsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/umbraco/management/api/v1/webhook/events',
            query: {
                skip: data.skip,
                take: data.take
            },
            errors: {
                401: 'The resource is protected and requires an authentication token',
                403: 'The authenticated user do not have access to this resource'
            }
        });
    }
    
}