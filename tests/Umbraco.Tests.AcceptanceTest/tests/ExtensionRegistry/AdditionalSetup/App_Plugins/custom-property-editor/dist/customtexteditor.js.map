{"version":3,"file":"customtexteditor.js","sources":["../src/customtexteditor.ts"],"sourcesContent":["import { html, css, customElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport type { UmbPropertyEditorConfigCollection, UmbPropertyEditorUiElement } from '@umbraco-cms/backoffice/property-editor';\r\nimport { UmbTextStyles } from '@umbraco-cms/backoffice/style';\r\n\r\n@customElement('custom-text-editor')\r\nexport class CustomTextEditorElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n\r\n    @property({ type: String })\r\n    value: string = '';\r\n\r\n    @property({ attribute: false })\r\n    public config?: UmbPropertyEditorConfigCollection;\r\n\r\n    @state()\r\n    private _maxLength?: number;\r\n\r\n    @state()\r\n    private _placeholder?: string;\r\n\r\n    override render() {\r\n        const characterCount = this.value?.length || 0;\r\n        const hasMaxLength = this._maxLength !== null && this._maxLength !== undefined && this._maxLength > 0;\r\n        const showCharCounter = hasMaxLength;\r\n\r\n        // Safe calculation with null checks\r\n        let counterClass = '';\r\n        if (this._maxLength) {\r\n            if (characterCount > this._maxLength * 0.9) {\r\n                counterClass = 'danger';\r\n            } else if (characterCount > this._maxLength * 0.7) {\r\n                counterClass = 'warning';\r\n            }\r\n        }\r\n\r\n        return html`\r\n              <uui-input\r\n                  class=\"text-input\"\r\n                  type=\"text\"\r\n                  .value=${this.value || ''}\r\n                  .placeholder=${this._placeholder || ''}\r\n                  .maxlength=${this._maxLength || ''}\r\n                  @input=${this._onInput}\r\n                /></uui-input>\r\n                ${showCharCounter\r\n                ? html`\r\n                    <div class=\"char-counter ${counterClass}\">\r\n                      ${characterCount}/${this._maxLength}\r\n                    </div>\r\n                  `\r\n                : ''\r\n                    }\r\n        `;\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n        this._updateConfigValues();\r\n    }\r\n\r\n    private _updateConfigValues(): void {\r\n        this._maxLength = this.config?.getValueByAlias('maxChars') as number;\r\n        this._placeholder = this.config?.getValueByAlias('placeholder') as string || 'Enter text here...';\r\n    }\r\n\r\n    private _onInput(event: Event): void {\r\n        const target = event.target as HTMLInputElement;\r\n        const newValue = target.value;\r\n\r\n        // Apply max length validation if configured\r\n        if (this._maxLength && newValue.length > this._maxLength) {\r\n            target.value = this.value; // Revert to previous value\r\n            return;\r\n        }\r\n\r\n        this.value = newValue;\r\n        this._dispatchChangeEvent();\r\n    }\r\n\r\n    private _dispatchChangeEvent(): void {\r\n        this.dispatchEvent(\r\n            new CustomEvent('property-value-change', {\r\n                detail: {\r\n                    value: this.value,\r\n                },\r\n                bubbles: true,\r\n                composed: true,\r\n            })\r\n        );\r\n    }\r\n\r\n    static styles = [\r\n        UmbTextStyles,\r\n        css`\r\n            .text-input{\r\n                width: 100%;\r\n            }\r\n            .char-counter {\r\n              position: absolute;\r\n              bottom: -20px;\r\n              right: 0;\r\n              font-size: 12px;\r\n              color: var(--uui-color-text-alt);\r\n            }\r\n\r\n            .char-counter.warning {\r\n              color: var(--uui-color-warning);\r\n            }\r\n\r\n            .char-counter.danger {\r\n              color: var(--uui-color-danger);\r\n            }\r\n        `];\r\n}\r\n\r\nexport {\r\n    CustomTextEditorElement as default\r\n};"],"names":["CustomTextEditorElement","UmbLitElement","characterCount","showCharCounter","counterClass","html","event","target","newValue","UmbTextStyles","css","__decorateClass","property","state","customElement"],"mappings":";;;;;;;;AAMO,IAAMA,IAAN,cAAsCC,EAAoD;AAAA,EAA1F,cAAA;AAAA,UAAA,GAAA,SAAA,GAGH,KAAA,QAAgB;AAAA,EAAA;AAAA,EAWP,SAAS;AACd,UAAMC,IAAiB,KAAK,OAAO,UAAU,GAEvCC,IADe,KAAK,eAAe,QAAQ,KAAK,eAAe,UAAa,KAAK,aAAa;AAIpG,QAAIC,IAAe;AACnB,WAAI,KAAK,eACDF,IAAiB,KAAK,aAAa,MACnCE,IAAe,WACRF,IAAiB,KAAK,aAAa,QAC1CE,IAAe,aAIhBC;AAAA;AAAA;AAAA;AAAA,2BAIY,KAAK,SAAS,EAAE;AAAA,iCACV,KAAK,gBAAgB,EAAE;AAAA,+BACzB,KAAK,cAAc,EAAE;AAAA,2BACzB,KAAK,QAAQ;AAAA;AAAA,kBAEtBF,IACAE;AAAA,+CAC6BD,CAAY;AAAA,wBACnCF,CAAc,IAAI,KAAK,UAAU;AAAA;AAAA,sBAGvC,EACE;AAAA;AAAA,EAEhB;AAAA,EAEA,oBAA0B;AACtB,UAAM,kBAAA,GACN,KAAK,oBAAA;AAAA,EACT;AAAA,EAEQ,sBAA4B;AAChC,SAAK,aAAa,KAAK,QAAQ,gBAAgB,UAAU,GACzD,KAAK,eAAe,KAAK,QAAQ,gBAAgB,aAAa,KAAe;AAAA,EACjF;AAAA,EAEQ,SAASI,GAAoB;AACjC,UAAMC,IAASD,EAAM,QACfE,IAAWD,EAAO;AAGxB,QAAI,KAAK,cAAcC,EAAS,SAAS,KAAK,YAAY;AACtD,MAAAD,EAAO,QAAQ,KAAK;AACpB;AAAA,IACJ;AAEA,SAAK,QAAQC,GACb,KAAK,qBAAA;AAAA,EACT;AAAA,EAEQ,uBAA6B;AACjC,SAAK;AAAA,MACD,IAAI,YAAY,yBAAyB;AAAA,QACrC,QAAQ;AAAA,UACJ,OAAO,KAAK;AAAA,QAAA;AAAA,QAEhB,SAAS;AAAA,QACT,UAAU;AAAA,MAAA,CACb;AAAA,IAAA;AAAA,EAET;AAwBJ;AA3GaR,EAqFF,SAAS;AAAA,EACZS;AAAA,EACAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBC;AAvGLC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAA,CAAQ;AAAA,GAFjBZ,EAGT,WAAA,SAAA,CAAA;AAGOW,EAAA;AAAA,EADNC,EAAS,EAAE,WAAW,GAAA,CAAO;AAAA,GALrBZ,EAMF,WAAA,UAAA,CAAA;AAGCW,EAAA;AAAA,EADPE,EAAA;AAAM,GAREb,EASD,WAAA,cAAA,CAAA;AAGAW,EAAA;AAAA,EADPE,EAAA;AAAM,GAXEb,EAYD,WAAA,gBAAA,CAAA;AAZCA,IAANW,EAAA;AAAA,EADNG,EAAc,oBAAoB;AAAA,GACtBd,CAAA;"}